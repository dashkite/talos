var test;
import { Machine, $start, $end } from "../../src";
import * as h from "../helpers";
import util from "node:util";
test = function() {
    return [
        h.test("compact + booleans", h.target("edge", function() {
            var edge, machine;
            machine = Machine.make({
                start: {
                    alpha: true
                },
                alpha: {
                    ignore: false,
                    end: true
                }
            });
            h.assert(machine.graph[$start] != null);
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run == null);
            h.assert(edge.move({}) === "alpha");
            edge = machine.graph["alpha"].edges[0];
            h.assert(edge.when() === false);
            h.assert(edge.move({}) === "ignore");
            edge = machine.graph["alpha"].edges[1];
            return h.assert(edge.move({}) === $end);
        })),
        h.test("compact + functions", h.target("edge", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = Machine.make({
                start: {
                    alpha: A
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when === A);
            h.assert(edge.run == null);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("objects + booleans", h.target("edge", function() {
            var edge, machine;
            machine = Machine.make({
                start: {
                    alpha: {
                        when: true,
                        run: function() {
                            return 1 + 1;
                        },
                        move: "alpha"
                    }
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("objects + functions", h.target("edge", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = Machine.make({
                start: {
                    alpha: {
                        when: A,
                        run: function() {
                            return 1 + 1;
                        },
                        move: function(talos) {
                            return talos.state = "alpha";
                        }
                    }
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when === A);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("arrays + booleans", h.target("edge", function() {
            var edge, machine;
            machine = Machine.make({
                start: [
                    {
                        when: true,
                        move: "alpha"
                    }
                ]
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run == null);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("arrays + functions", h.target("edge", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = Machine.make({
                start: [
                    {
                        when: A,
                        run: function() {
                            return 1 + 1;
                        },
                        move: function(talos) {
                            return talos.state = "alpha";
                        }
                    }
                ]
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when === A);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("compact with default", h.target("edge", function() {
            var edge, machine;
            machine = Machine.make({
                start: {
                    ignore: false,
                    default: "alpha",
                    alsoIgnore: false
                }
            });
            edge = machine.graph[$start].edges.at(-1);
            h.assert(edge.when() === true);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("terminal function", h.target("edge", function() {
            var edge, machine;
            machine = Machine.make({
                start: function() {
                    return 1 + 1;
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === $end);
        }))
    ];
};
export { test as expansions }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=test/machine/expansions.coffee

//# sourceMappingURL=data:application/json;base64,