var Edge, Edges, Machine, Vertex, areVertexEdges, isState, normalizeMove, normalizeWhen, prioritize;
import { generic } from "@dashkite/joy/generic";
import * as Type from "@dashkite/joy/type";
import { $start, $end } from "./states";
isState = function(x) {
    return Type.isString(x) || Type.isSymbol(x);
};
areVertexEdges = function(x) {
    var edge, j, len, ref;
    if (x.edges == null) {
        return false;
    }
    if (!Type.isArray(x.edges)) {
        return false;
    }
    ref = x.edges;
    for(j = 0, len = ref.length; j < len; j++){
        edge = ref[j];
        if (!Type.isObject(edge)) {
            return false;
        }
    }
    return true;
};
normalizeWhen = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return event === condition;
        };
    } else if (Type.isFunction(x)) {
        return x;
    } else if (Type.isBoolean(x)) {
        return function() {
            return x;
        };
    } else {
        throw new Error("unable to normalize when description");
    }
};
normalizeMove = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return talos.state = x;
        };
    } else if (Type.isFunction(x)) {
        return x;
    } else {
        throw new Error("unable to normalize move description");
    }
};
prioritize = function(frames) {
    return frames.sort(function(a, b) {
        if (a.priority < b.priority) {
            return -1;
        } else if (a.priority > b.priority) {
            return 1;
        } else {
            return 0;
        }
    });
};
Edge = {
    make: generic({
        name: "talos: make edge",
        default: function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            throw new Error(`talos make edge: input is malformed ${JSON.stringify(args)}`);
        }
    })
};
generic(Edge.make, Type.isObject, function(object) {
    return {
        when: normalizeWhen(object.when),
        run: object.run,
        move: normalizeMove(object.move)
    };
});
generic(Edge.make, isState, Type.isAny, function(move, _when) {
    return Edge.make({
        move,
        when: _when
    });
});
generic(Edge.make, isState, Type.isObject, function(move, object) {
    var ref, ref1;
    return {
        when: normalizeWhen((ref = object.when) != null ? ref : true),
        run: object.run,
        move: normalizeMove((ref1 = object.move) != null ? ref1 : move)
    };
});
Edges = {
    make: generic({
        name: "talos: make edges",
        default: function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            throw new Error(`talos make edges: input is malformed ${JSON.stringify(args)}`);
        }
    })
};
generic(Edges.make, Type.isObject, function(object) {
    var defaultFrame, edges, frames, j, k, key, len, len1, priority, ref, ref1, value;
    frames = [];
    defaultFrame = null;
    ref = Reflect.ownKeys(object);
    for(j = 0, len = ref.length; j < len; j++){
        key = ref[j];
        value = object[key];
        priority = (ref1 = value.priority) != null ? ref1 : 100;
        if (key === "default") {
            defaultFrame = {
                key,
                value
            };
        } else {
            if (key === "end") {
                key = $end;
            }
            frames.push({
                key,
                value,
                priority
            });
        }
    }
    prioritize(frames);
    edges = [];
    for(k = 0, len1 = frames.length; k < len1; k++){
        ({ key, value } = frames[k]);
        edges.push(Edge.make(key, value));
    }
    if (defaultFrame != null) {
        // default is a special case emphasizing an always true "when" function.
        ({ value } = defaultFrame);
        if (Type.isObject(value)) {
            edges.push(Edge.make({
                ...value,
                when: true
            }));
        } else {
            edges.push(Edge.make({
                when: true,
                move: value
            }));
        }
    }
    return edges;
});
generic(Edges.make, Type.isArray, function(array) {
    var edge, j, len, results;
    results = [];
    for(j = 0, len = array.length; j < len; j++){
        edge = array[j];
        results.push(Edge.make(edge));
    }
    return results;
});
generic(Edges.make, Type.isFunction, function(f) {
    var edge;
    edge = {
        when: true,
        run: f,
        move: $end
    };
    return [
        Edge.make(edge)
    ];
});
generic(Edges.make, isState, function(move) {
    return Edges.make({
        [move]: true
    });
});
generic(Edges.make, areVertexEdges, function(param) {
    let { edges } = param;
    var edge, j, len, results;
    results = [];
    for(j = 0, len = edges.length; j < len; j++){
        edge = edges[j];
        results.push({
            when: edge.when,
            run: edge.run,
            move: edge.move
        });
    }
    return results;
});
Vertex = {
    make: function(key, value) {
        return {
            name: key,
            edges: Edges.make(value)
        };
    }
};
Machine = {
    make: function(value) {
        var _graph, j, key, len, machine, ref;
        _graph = Machine.format(value);
        machine = {
            graph: {}
        };
        ref = Reflect.ownKeys(_graph);
        for(j = 0, len = ref.length; j < len; j++){
            key = ref[j];
            value = _graph[key];
            machine.graph[key] = Vertex.make(key, value);
        }
        return machine;
    },
    format: function(value) {
        var _value, graph, j, key, len, ref;
        if (Type.isObject(value)) {
            graph = {};
            _value = value.graph != null ? value.graph : value;
            ref = Reflect.ownKeys(_value);
            for(j = 0, len = ref.length; j < len; j++){
                key = ref[j];
                graph[key] = _value[key];
            }
        } else if (Type.isArray(value)) {
            graph = Machine.expand(value);
        } else {
            throw new Error("Talos machine representation is malformed");
        }
        if (graph[$start] == null) {
            if (graph.start != null) {
                graph[$start] = graph.start;
                delete graph.start;
            } else {
                throw new Error("no start state defined for this machine");
            }
        }
        if (graph[$end] == null) {
            if (graph.end != null) {
                graph[$end] = graph.end;
                delete graph.end;
            }
        }
        return graph;
    },
    expand: function(fx) {
        var current, f, graph, i, j, len, next;
        graph = {};
        for(i = j = 0, len = fx.length; j < len; i = ++j){
            f = fx[i];
            current = i === 0 ? $start : `${i}`;
            next = i === fx.length - 1 ? $end : `${i + 1}`;
            graph[current] = {
                next: {
                    when: true,
                    run: f,
                    move: next
                }
            };
        }
        return graph;
    }
};
export { Machine, Vertex, Edges, Edge }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL21hY2hpbmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLGNBQUEsRUFBQSxPQUFBLEVBQUEsYUFBQSxFQUFBLGFBQUEsRUFBQTs7QUFBQSxPQUFBO0VBQVMsT0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFBO0VBQVMsTUFBVDtFQUFpQixJQUFqQjtDQUFBLE1BQUE7O0FBRUEsT0FBQSxHQUFVLFFBQUEsQ0FBRSxDQUFGLENBQUE7U0FBUyxDQUFFLElBQUksQ0FBQyxRQUFMLENBQWMsQ0FBZCxDQUFGLENBQUEsSUFBdUIsQ0FBRSxJQUFJLENBQUMsUUFBTCxDQUFjLENBQWQsQ0FBRjtBQUFoQzs7QUFDVixjQUFBLEdBQWlCLFFBQUEsQ0FBRSxDQUFGLENBQUE7QUFDakIsTUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFFLElBQWlCLGVBQWpCO0FBQUEsV0FBTyxNQUFQOztFQUNBLElBQWdCLENBQUMsSUFBSSxDQUFDLE9BQUwsQ0FBYSxDQUFDLENBQUMsS0FBZixDQUFqQjtBQUFBLFdBQU8sTUFBUDs7QUFDQTtFQUFBLEtBQUEscUNBQUE7O1FBQXlCLENBQUMsSUFBSSxDQUFDLFFBQUwsQ0FBYyxJQUFkO0FBQ3hCLGFBQU87O0VBRFQ7U0FFQTtBQUxlOztBQVFqQixhQUFBLEdBQWdCLFFBQUEsQ0FBRSxDQUFGLENBQUE7RUFDZCxJQUFHLE9BQUEsQ0FBUSxDQUFSLENBQUg7V0FDRSxRQUFBLENBQUUsS0FBRixFQUFTLEtBQVQsQ0FBQTthQUFvQixLQUFBLEtBQVM7SUFBN0IsRUFERjtHQUFBLE1BRUssSUFBRyxJQUFJLENBQUMsVUFBTCxDQUFnQixDQUFoQixDQUFIO1dBQ0gsRUFERztHQUFBLE1BRUEsSUFBRyxJQUFJLENBQUMsU0FBTCxDQUFlLENBQWYsQ0FBSDtXQUNILFFBQUEsQ0FBQSxDQUFBO2FBQUc7SUFBSCxFQURHO0dBQUEsTUFBQTtJQUdILE1BQU0sSUFBSSxLQUFKLENBQVUsc0NBQVYsRUFISDs7QUFMUzs7QUFVaEIsYUFBQSxHQUFnQixRQUFBLENBQUUsQ0FBRixDQUFBO0VBQ2QsSUFBRyxPQUFBLENBQVEsQ0FBUixDQUFIO1dBQ0UsUUFBQSxDQUFFLEtBQUYsRUFBUyxLQUFULENBQUE7YUFBb0IsS0FBSyxDQUFDLEtBQU4sR0FBYztJQUFsQyxFQURGO0dBQUEsTUFFSyxJQUFHLElBQUksQ0FBQyxVQUFMLENBQWdCLENBQWhCLENBQUg7V0FDSCxFQURHO0dBQUEsTUFBQTtJQUdILE1BQU0sSUFBSSxLQUFKLENBQVUsc0NBQVYsRUFISDs7QUFIUzs7QUFRaEIsVUFBQSxHQUFhLFFBQUEsQ0FBRSxNQUFGLENBQUE7U0FDWCxNQUFNLENBQUMsSUFBUCxDQUFZLFFBQUEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxDQUFBO0lBQ1YsSUFBRyxDQUFDLENBQUMsUUFBRixHQUFhLENBQUMsQ0FBQyxRQUFsQjthQUNFLENBQUMsRUFESDtLQUFBLE1BRUssSUFBRyxDQUFDLENBQUMsUUFBRixHQUFhLENBQUMsQ0FBQyxRQUFsQjthQUNILEVBREc7S0FBQSxNQUFBO2FBR0gsRUFIRzs7RUFISyxDQUFaO0FBRFc7O0FBVWIsSUFBQSxHQUNFO0VBQUEsSUFBQSxFQUFNLE9BQUEsQ0FDSjtJQUFBLElBQUEsRUFBTSxrQkFBTjtJQUNBLE9BQUEsRUFBUyxRQUFBLENBQUEsR0FBRSxJQUFGLENBQUE7TUFDUCxNQUFNLElBQUksS0FBSixDQUFVLENBQUEsb0NBQUEsQ0FBQSxDQUF3QyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsQ0FBeEMsQ0FBQSxDQUFWO0lBREM7RUFEVCxDQURJO0FBQU47O0FBS0YsT0FBQSxDQUFRLElBQUksQ0FBQyxJQUFiLEVBQW1CLElBQUksQ0FBQyxRQUF4QixFQUFrQyxRQUFBLENBQUUsTUFBRixDQUFBO1NBQ2hDO0lBQUEsSUFBQSxFQUFNLGFBQUEsQ0FBYyxNQUFNLENBQUMsSUFBckIsQ0FBTjtJQUNBLEdBQUEsRUFBSyxNQUFNLENBQUMsR0FEWjtJQUVBLElBQUEsRUFBTSxhQUFBLENBQWMsTUFBTSxDQUFDLElBQXJCO0VBRk47QUFEZ0MsQ0FBbEM7O0FBS0EsT0FBQSxDQUFRLElBQUksQ0FBQyxJQUFiLEVBQW1CLE9BQW5CLEVBQTRCLElBQUksQ0FBQyxLQUFqQyxFQUF3QyxRQUFBLENBQUUsSUFBRixFQUFRLEtBQVIsQ0FBQTtTQUN0QyxJQUFJLENBQUMsSUFBTCxDQUFVO0lBQUUsSUFBRjtJQUFRLElBQUEsRUFBTTtFQUFkLENBQVY7QUFEc0MsQ0FBeEM7O0FBR0EsT0FBQSxDQUFRLElBQUksQ0FBQyxJQUFiLEVBQW1CLE9BQW5CLEVBQTRCLElBQUksQ0FBQyxRQUFqQyxFQUEyQyxRQUFBLENBQUUsSUFBRixFQUFRLE1BQVIsQ0FBQTtBQUMzQyxNQUFBLEdBQUEsRUFBQTtTQUFFO0lBQUEsSUFBQSxFQUFNLGFBQUEscUNBQTRCLElBQTVCLENBQU47SUFDQSxHQUFBLEVBQUssTUFBTSxDQUFDLEdBRFo7SUFFQSxJQUFBLEVBQU0sYUFBQSx1Q0FBNEIsSUFBNUI7RUFGTjtBQUR5QyxDQUEzQzs7QUFNQSxLQUFBLEdBQ0U7RUFBQSxJQUFBLEVBQU0sT0FBQSxDQUNKO0lBQUEsSUFBQSxFQUFNLG1CQUFOO0lBQ0EsT0FBQSxFQUFTLFFBQUEsQ0FBQSxHQUFFLElBQUYsQ0FBQTtNQUNQLE1BQU0sSUFBSSxLQUFKLENBQVUsQ0FBQSxxQ0FBQSxDQUFBLENBQXlDLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixDQUF6QyxDQUFBLENBQVY7SUFEQztFQURULENBREk7QUFBTjs7QUFLRixPQUFBLENBQVEsS0FBSyxDQUFDLElBQWQsRUFBb0IsSUFBSSxDQUFDLFFBQXpCLEVBQW1DLFFBQUEsQ0FBRSxNQUFGLENBQUE7QUFDbkMsTUFBQSxZQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBO0VBQUUsTUFBQSxHQUFTO0VBQ1QsWUFBQSxHQUFlO0FBQ2Y7RUFBQSxLQUFBLHFDQUFBOztJQUNFLEtBQUEsR0FBUSxNQUFNLENBQUUsR0FBRjtJQUNkLFFBQUEsNENBQTRCO0lBQzVCLElBQUcsR0FBQSxLQUFPLFNBQVY7TUFDRSxZQUFBLEdBQWUsQ0FBRSxHQUFGLEVBQU8sS0FBUCxFQURqQjtLQUFBLE1BQUE7TUFHRSxJQUFjLEdBQUEsS0FBTyxLQUFyQjtRQUFBLEdBQUEsR0FBTSxLQUFOOztNQUNBLE1BQU0sQ0FBQyxJQUFQLENBQVksQ0FBRSxHQUFGLEVBQU8sS0FBUCxFQUFjLFFBQWQsQ0FBWixFQUpGOztFQUhGO0VBU0EsVUFBQSxDQUFXLE1BQVg7RUFFQSxLQUFBLEdBQVE7RUFDUixLQUFBLDBDQUFBO0tBQUksQ0FBRSxHQUFGLEVBQU8sS0FBUDtJQUNGLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBSSxDQUFDLElBQUwsQ0FBVSxHQUFWLEVBQWUsS0FBZixDQUFYO0VBREY7RUFHQSxJQUFHLG9CQUFIOztJQUVFLENBQUEsQ0FBRSxLQUFGLENBQUEsR0FBWSxZQUFaO0lBQ0EsSUFBRyxJQUFJLENBQUMsUUFBTCxDQUFjLEtBQWQsQ0FBSDtNQUNFLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBSSxDQUFDLElBQUwsQ0FBVTtRQUFFLEdBQUEsS0FBRjtRQUFZLElBQUEsRUFBTTtNQUFsQixDQUFWLENBQVgsRUFERjtLQUFBLE1BQUE7TUFHRSxLQUFLLENBQUMsSUFBTixDQUFXLElBQUksQ0FBQyxJQUFMLENBQVU7UUFBQSxJQUFBLEVBQU0sSUFBTjtRQUFZLElBQUEsRUFBTTtNQUFsQixDQUFWLENBQVgsRUFIRjtLQUhGOztTQVFBO0FBMUJpQyxDQUFuQzs7QUE2QkEsT0FBQSxDQUFRLEtBQUssQ0FBQyxJQUFkLEVBQW9CLElBQUksQ0FBQyxPQUF6QixFQUFrQyxRQUFBLENBQUUsS0FBRixDQUFBO0FBQ2xDLE1BQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7QUFBRTtFQUFBLEtBQUEsdUNBQUE7O2lCQUNFLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBVjtFQURGLENBQUE7O0FBRGdDLENBQWxDOztBQUlBLE9BQUEsQ0FBUSxLQUFLLENBQUMsSUFBZCxFQUFvQixJQUFJLENBQUMsVUFBekIsRUFBcUMsUUFBQSxDQUFFLENBQUYsQ0FBQTtBQUNyQyxNQUFBO0VBQUUsSUFBQSxHQUFPO0lBQUEsSUFBQSxFQUFNLElBQU47SUFBWSxHQUFBLEVBQUssQ0FBakI7SUFBb0IsSUFBQSxFQUFNO0VBQTFCO1NBQ1AsQ0FBRSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQVYsQ0FBRjtBQUZtQyxDQUFyQzs7QUFJQSxPQUFBLENBQVEsS0FBSyxDQUFDLElBQWQsRUFBb0IsT0FBcEIsRUFBNkIsUUFBQSxDQUFFLElBQUYsQ0FBQTtTQUMzQixLQUFLLENBQUMsSUFBTixDQUFXO0lBQUEsQ0FBRSxJQUFGLENBQUEsRUFBVTtFQUFWLENBQVg7QUFEMkIsQ0FBN0I7O0FBR0EsT0FBQSxDQUFRLEtBQUssQ0FBQyxJQUFkLEVBQW9CLGNBQXBCLEVBQW9DLFFBQUEsQ0FBQyxDQUFFLEtBQUYsQ0FBRCxDQUFBO0FBQ3BDLE1BQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7QUFBRTtFQUFBLEtBQUEsdUNBQUE7O2lCQUNFO01BQUEsSUFBQSxFQUFNLElBQUksQ0FBQyxJQUFYO01BQ0EsR0FBQSxFQUFLLElBQUksQ0FBQyxHQURWO01BRUEsSUFBQSxFQUFNLElBQUksQ0FBQztJQUZYO0VBREYsQ0FBQTs7QUFEa0MsQ0FBcEM7O0FBT0EsTUFBQSxHQUNFO0VBQUEsSUFBQSxFQUFNLFFBQUEsQ0FBRSxHQUFGLEVBQU8sS0FBUCxDQUFBO1dBQ0o7TUFBQSxJQUFBLEVBQU0sR0FBTjtNQUNBLEtBQUEsRUFBTyxLQUFLLENBQUMsSUFBTixDQUFXLEtBQVg7SUFEUDtFQURJO0FBQU47O0FBS0YsT0FBQSxHQUNFO0VBQUEsSUFBQSxFQUFNLFFBQUEsQ0FBRSxLQUFGLENBQUE7QUFDUixRQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7SUFBSSxNQUFBLEdBQVMsT0FBTyxDQUFDLE1BQVIsQ0FBZSxLQUFmO0lBQ1QsT0FBQSxHQUFVO01BQUEsS0FBQSxFQUFPLENBQUE7SUFBUDtBQUVWO0lBQUEsS0FBQSxxQ0FBQTs7TUFDRSxLQUFBLEdBQVEsTUFBTSxDQUFFLEdBQUY7TUFDZCxPQUFPLENBQUMsS0FBSyxDQUFFLEdBQUYsQ0FBYixHQUF1QixNQUFNLENBQUMsSUFBUCxDQUFZLEdBQVosRUFBaUIsS0FBakI7SUFGekI7V0FJQTtFQVJJLENBQU47RUFVQSxNQUFBLEVBQVEsUUFBQSxDQUFFLEtBQUYsQ0FBQTtBQUNWLFFBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtJQUFJLElBQUcsSUFBSSxDQUFDLFFBQUwsQ0FBYyxLQUFkLENBQUg7TUFDRSxLQUFBLEdBQVEsQ0FBQTtNQUNSLE1BQUEsR0FBWSxtQkFBSCxHQUFxQixLQUFLLENBQUMsS0FBM0IsR0FBc0M7QUFDL0M7TUFBQSxLQUFBLHFDQUFBOztRQUNFLEtBQUssQ0FBRSxHQUFGLENBQUwsR0FBZSxNQUFNLENBQUUsR0FBRjtNQUR2QixDQUhGO0tBQUEsTUFLSyxJQUFHLElBQUksQ0FBQyxPQUFMLENBQWEsS0FBYixDQUFIO01BQ0gsS0FBQSxHQUFRLE9BQU8sQ0FBQyxNQUFSLENBQWUsS0FBZixFQURMO0tBQUEsTUFBQTtNQUdILE1BQU0sSUFBSSxLQUFKLENBQVUsMkNBQVYsRUFISDs7SUFLTCxJQUFJLHFCQUFKO01BQ0UsSUFBRyxtQkFBSDtRQUNFLEtBQUssQ0FBRSxNQUFGLENBQUwsR0FBa0IsS0FBSyxDQUFDO1FBQ3hCLE9BQU8sS0FBSyxDQUFDLE1BRmY7T0FBQSxNQUFBO1FBSUUsTUFBTSxJQUFJLEtBQUosQ0FBVSx5Q0FBVixFQUpSO09BREY7O0lBT0EsSUFBSSxtQkFBSjtNQUNFLElBQUcsaUJBQUg7UUFDRSxLQUFLLENBQUUsSUFBRixDQUFMLEdBQWdCLEtBQUssQ0FBQztRQUN0QixPQUFPLEtBQUssQ0FBQyxJQUZmO09BREY7O1dBS0E7RUF2Qk0sQ0FWUjtFQW1DQSxNQUFBLEVBQVEsUUFBQSxDQUFFLEVBQUYsQ0FBQTtBQUNWLFFBQUEsT0FBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7SUFBSSxLQUFBLEdBQVEsQ0FBQTtJQUNSLEtBQUEsNENBQUE7O01BQ0UsT0FBQSxHQUFhLENBQUEsS0FBSyxDQUFSLEdBQWUsTUFBZixHQUEyQixDQUFBLENBQUEsQ0FBSSxDQUFKLENBQUE7TUFDckMsSUFBQSxHQUFVLENBQUEsS0FBSyxFQUFFLENBQUMsTUFBSCxHQUFZLENBQXBCLEdBQTJCLElBQTNCLEdBQXFDLENBQUEsQ0FBQSxDQUFJLENBQUEsR0FBSSxDQUFSLENBQUE7TUFFNUMsS0FBSyxDQUFFLE9BQUYsQ0FBTCxHQUNFO1FBQUEsSUFBQSxFQUNFO1VBQUEsSUFBQSxFQUFNLElBQU47VUFDQSxHQUFBLEVBQUssQ0FETDtVQUVBLElBQUEsRUFBTTtRQUZOO01BREY7SUFMSjtXQVVBO0VBWk07QUFuQ1I7O0FBa0RGLE9BQUE7RUFBUyxPQUFUO0VBQWtCLE1BQWxCO0VBQTBCLEtBQTFCO0VBQWlDLElBQWpDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuZXJpYyB9IGZyb20gXCJAZGFzaGtpdGUvam95L2dlbmVyaWNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCB7ICRzdGFydCwgJGVuZCB9IGZyb20gXCIuL3N0YXRlc1wiXG5cbmlzU3RhdGUgPSAoIHggKSAtPiAoIFR5cGUuaXNTdHJpbmcgeCApIHx8ICggVHlwZS5pc1N5bWJvbCB4IClcbmFyZVZlcnRleEVkZ2VzID0gKCB4ICkgLT5cbiAgcmV0dXJuIGZhbHNlIGlmICF4LmVkZ2VzP1xuICByZXR1cm4gZmFsc2UgaWYgIVR5cGUuaXNBcnJheSB4LmVkZ2VzXG4gIGZvciBlZGdlIGluIHguZWRnZXMgd2hlbiAhVHlwZS5pc09iamVjdCBlZGdlXG4gICAgcmV0dXJuIGZhbHNlXG4gIHRydWVcblxuXG5ub3JtYWxpemVXaGVuID0gKCB4ICkgLT5cbiAgaWYgaXNTdGF0ZSB4XG4gICAgKCB0YWxvcywgZXZlbnQgKSAtPiBldmVudCA9PSBjb25kaXRpb25cbiAgZWxzZSBpZiBUeXBlLmlzRnVuY3Rpb24geFxuICAgIHhcbiAgZWxzZSBpZiBUeXBlLmlzQm9vbGVhbiB4XG4gICAgLT4geFxuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yIFwidW5hYmxlIHRvIG5vcm1hbGl6ZSB3aGVuIGRlc2NyaXB0aW9uXCJcblxubm9ybWFsaXplTW92ZSA9ICggeCApIC0+XG4gIGlmIGlzU3RhdGUgeFxuICAgICggdGFsb3MsIGV2ZW50ICkgLT4gdGFsb3Muc3RhdGUgPSB4XG4gIGVsc2UgaWYgVHlwZS5pc0Z1bmN0aW9uIHhcbiAgICB4XG4gIGVsc2VcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJ1bmFibGUgdG8gbm9ybWFsaXplIG1vdmUgZGVzY3JpcHRpb25cIlxuXG5wcmlvcml0aXplID0gKCBmcmFtZXMgKSAtPlxuICBmcmFtZXMuc29ydCAoIGEsIGIgKSAtPiBcbiAgICBpZiBhLnByaW9yaXR5IDwgYi5wcmlvcml0eVxuICAgICAgLTFcbiAgICBlbHNlIGlmIGEucHJpb3JpdHkgPiBiLnByaW9yaXR5XG4gICAgICAxXG4gICAgZWxzZVxuICAgICAgMFxuXG5cbkVkZ2UgPVxuICBtYWtlOiBnZW5lcmljIFxuICAgIG5hbWU6IFwidGFsb3M6IG1ha2UgZWRnZVwiXG4gICAgZGVmYXVsdDogKCBhcmdzLi4uICkgLT4gXG4gICAgICB0aHJvdyBuZXcgRXJyb3IgXCJ0YWxvcyBtYWtlIGVkZ2U6IGlucHV0IGlzIG1hbGZvcm1lZCAjeyBKU09OLnN0cmluZ2lmeSBhcmdzIH1cIlxuXG5nZW5lcmljIEVkZ2UubWFrZSwgVHlwZS5pc09iamVjdCwgKCBvYmplY3QgKSAtPlxuICB3aGVuOiBub3JtYWxpemVXaGVuIG9iamVjdC53aGVuXG4gIHJ1bjogb2JqZWN0LnJ1blxuICBtb3ZlOiBub3JtYWxpemVNb3ZlIG9iamVjdC5tb3ZlXG5cbmdlbmVyaWMgRWRnZS5tYWtlLCBpc1N0YXRlLCBUeXBlLmlzQW55LCAoIG1vdmUsIF93aGVuICkgLT5cbiAgRWRnZS5tYWtlIHsgbW92ZSwgd2hlbjogX3doZW4gfVxuXG5nZW5lcmljIEVkZ2UubWFrZSwgaXNTdGF0ZSwgVHlwZS5pc09iamVjdCwgKCBtb3ZlLCBvYmplY3QgKSAtPlxuICB3aGVuOiBub3JtYWxpemVXaGVuIG9iamVjdC53aGVuID8gdHJ1ZVxuICBydW46IG9iamVjdC5ydW5cbiAgbW92ZTogbm9ybWFsaXplTW92ZSBvYmplY3QubW92ZSA/IG1vdmVcblxuXG5FZGdlcyA9IFxuICBtYWtlOiBnZW5lcmljIFxuICAgIG5hbWU6IFwidGFsb3M6IG1ha2UgZWRnZXNcIlxuICAgIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgICAgdGhyb3cgbmV3IEVycm9yIFwidGFsb3MgbWFrZSBlZGdlczogaW5wdXQgaXMgbWFsZm9ybWVkICN7IEpTT04uc3RyaW5naWZ5IGFyZ3MgfVwiXG5cbmdlbmVyaWMgRWRnZXMubWFrZSwgVHlwZS5pc09iamVjdCwgKCBvYmplY3QgKSAtPlxuICBmcmFtZXMgPSBbXVxuICBkZWZhdWx0RnJhbWUgPSBudWxsXG4gIGZvciBrZXkgaW4gUmVmbGVjdC5vd25LZXlzIG9iamVjdFxuICAgIHZhbHVlID0gb2JqZWN0WyBrZXkgXVxuICAgIHByaW9yaXR5ID0gdmFsdWUucHJpb3JpdHkgPyAxMDBcbiAgICBpZiBrZXkgPT0gXCJkZWZhdWx0XCJcbiAgICAgIGRlZmF1bHRGcmFtZSA9IHsga2V5LCB2YWx1ZSB9XG4gICAgZWxzZVxuICAgICAga2V5ID0gJGVuZCBpZiBrZXkgPT0gXCJlbmRcIlxuICAgICAgZnJhbWVzLnB1c2ggeyBrZXksIHZhbHVlLCBwcmlvcml0eSB9XG5cbiAgcHJpb3JpdGl6ZSBmcmFtZXNcblxuICBlZGdlcyA9IFtdXG4gIGZvciB7IGtleSwgdmFsdWUgfSBpbiBmcmFtZXNcbiAgICBlZGdlcy5wdXNoIEVkZ2UubWFrZSBrZXksIHZhbHVlXG5cbiAgaWYgZGVmYXVsdEZyYW1lP1xuICAgICMgZGVmYXVsdCBpcyBhIHNwZWNpYWwgY2FzZSBlbXBoYXNpemluZyBhbiBhbHdheXMgdHJ1ZSBcIndoZW5cIiBmdW5jdGlvbi5cbiAgICB7IHZhbHVlIH0gPSBkZWZhdWx0RnJhbWVcbiAgICBpZiBUeXBlLmlzT2JqZWN0IHZhbHVlXG4gICAgICBlZGdlcy5wdXNoIEVkZ2UubWFrZSB7IHZhbHVlLi4uLCB3aGVuOiB0cnVlIH1cbiAgICBlbHNlXG4gICAgICBlZGdlcy5wdXNoIEVkZ2UubWFrZSB3aGVuOiB0cnVlLCBtb3ZlOiB2YWx1ZVxuICBcbiAgZWRnZXNcbiAgXG5cbmdlbmVyaWMgRWRnZXMubWFrZSwgVHlwZS5pc0FycmF5LCAoIGFycmF5ICkgLT5cbiAgZm9yIGVkZ2UgaW4gYXJyYXlcbiAgICBFZGdlLm1ha2UgZWRnZVxuXG5nZW5lcmljIEVkZ2VzLm1ha2UsIFR5cGUuaXNGdW5jdGlvbiwgKCBmICkgLT5cbiAgZWRnZSA9IHdoZW46IHRydWUsIHJ1bjogZiwgbW92ZTogJGVuZFxuICBbIEVkZ2UubWFrZSBlZGdlIF1cblxuZ2VuZXJpYyBFZGdlcy5tYWtlLCBpc1N0YXRlLCAoIG1vdmUgKSAtPlxuICBFZGdlcy5tYWtlIFsgbW92ZSBdOiB0cnVlXG5cbmdlbmVyaWMgRWRnZXMubWFrZSwgYXJlVmVydGV4RWRnZXMsICh7IGVkZ2VzIH0pIC0+XG4gIGZvciBlZGdlIGluIGVkZ2VzXG4gICAgd2hlbjogZWRnZS53aGVuXG4gICAgcnVuOiBlZGdlLnJ1blxuICAgIG1vdmU6IGVkZ2UubW92ZVxuXG5cblZlcnRleCA9XG4gIG1ha2U6ICgga2V5LCB2YWx1ZSApIC0+XG4gICAgbmFtZToga2V5XG4gICAgZWRnZXM6IEVkZ2VzLm1ha2UgdmFsdWVcblxuXG5NYWNoaW5lID1cbiAgbWFrZTogKCB2YWx1ZSApIC0+IFxuICAgIF9ncmFwaCA9IE1hY2hpbmUuZm9ybWF0IHZhbHVlXG4gICAgbWFjaGluZSA9IGdyYXBoOiB7fVxuXG4gICAgZm9yIGtleSBpbiBSZWZsZWN0Lm93bktleXMgX2dyYXBoXG4gICAgICB2YWx1ZSA9IF9ncmFwaFsga2V5IF1cbiAgICAgIG1hY2hpbmUuZ3JhcGhbIGtleSBdID0gVmVydGV4Lm1ha2Uga2V5LCB2YWx1ZVxuICAgIFxuICAgIG1hY2hpbmVcblxuICBmb3JtYXQ6ICggdmFsdWUgKSAtPlxuICAgIGlmIFR5cGUuaXNPYmplY3QgdmFsdWVcbiAgICAgIGdyYXBoID0ge31cbiAgICAgIF92YWx1ZSA9IGlmIHZhbHVlLmdyYXBoPyB0aGVuIHZhbHVlLmdyYXBoIGVsc2UgdmFsdWVcbiAgICAgIGZvciBrZXkgaW4gUmVmbGVjdC5vd25LZXlzIF92YWx1ZVxuICAgICAgICBncmFwaFsga2V5IF0gPSBfdmFsdWVbIGtleSBdXG4gICAgZWxzZSBpZiBUeXBlLmlzQXJyYXkgdmFsdWVcbiAgICAgIGdyYXBoID0gTWFjaGluZS5leHBhbmQgdmFsdWVcbiAgICBlbHNlXG4gICAgICB0aHJvdyBuZXcgRXJyb3IgXCJUYWxvcyBtYWNoaW5lIHJlcHJlc2VudGF0aW9uIGlzIG1hbGZvcm1lZFwiXG4gICAgXG4gICAgaWYgIWdyYXBoWyAkc3RhcnQgXT9cbiAgICAgIGlmIGdyYXBoLnN0YXJ0P1xuICAgICAgICBncmFwaFsgJHN0YXJ0IF0gPSBncmFwaC5zdGFydFxuICAgICAgICBkZWxldGUgZ3JhcGguc3RhcnRcbiAgICAgIGVsc2VcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwibm8gc3RhcnQgc3RhdGUgZGVmaW5lZCBmb3IgdGhpcyBtYWNoaW5lXCJcblxuICAgIGlmICFncmFwaFsgJGVuZCBdP1xuICAgICAgaWYgZ3JhcGguZW5kP1xuICAgICAgICBncmFwaFsgJGVuZCBdID0gZ3JhcGguZW5kXG4gICAgICAgIGRlbGV0ZSBncmFwaC5lbmRcblxuICAgIGdyYXBoXG5cbiAgZXhwYW5kOiAoIGZ4ICkgLT5cbiAgICBncmFwaCA9IHt9ICAgIFxuICAgIGZvciBmLCBpIGluIGZ4XG4gICAgICBjdXJyZW50ID0gaWYgaSA9PSAwIHRoZW4gJHN0YXJ0IGVsc2UgXCIjeyBpIH1cIlxuICAgICAgbmV4dCA9IGlmIGkgPT0gZngubGVuZ3RoIC0gMSB0aGVuICRlbmQgZWxzZSBcIiN7IGkgKyAxIH1cIlxuXG4gICAgICBncmFwaFsgY3VycmVudCBdID0gXG4gICAgICAgIG5leHQ6XG4gICAgICAgICAgd2hlbjogdHJ1ZVxuICAgICAgICAgIHJ1bjogZlxuICAgICAgICAgIG1vdmU6IG5leHRcbiAgICBcbiAgICBncmFwaFxuXG5cbmV4cG9ydCB7IE1hY2hpbmUsIFZlcnRleCwgRWRnZXMsIEVkZ2UgfSJdfQ==
 //# sourceURL=src/machine.coffee

//# sourceMappingURL=data:application/json;base64,