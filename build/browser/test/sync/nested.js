var test;
import { Machine, $end, start, run } from "../../src/sync";
import * as h from "../helpers";
test = function() {
    var A, B, Run;
    Run = {
        grow: function(talos) {
            return talos.context.product *= 2;
        }
    };
    A = Machine.make({
        name: "A",
        graph: {
            start: {
                default: "second"
            },
            second: {
                default: {
                    run: Run.grow,
                    move: "third"
                }
            },
            third: {
                default: {
                    run: Run.grow,
                    move: $end
                }
            }
        }
    });
    Run.join = function*(talos) {
        var inner, ref, results;
        ref = start(A, talos.context);
        results = [];
        for (inner of ref){
            results.push((yield inner));
        }
        return results;
    };
    B = Machine.make({
        name: "B",
        graph: {
            start: {
                default: "first"
            },
            first: {
                default: {
                    run: Run.grow,
                    move: "join"
                }
            },
            join: {
                default: {
                    run: Run.join,
                    move: $end
                }
            }
        }
    });
    return [
        h.test("completes operation", h.target("sync", function() {
            var ref, talos;
            talos = run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("exposes lower order talos instance", h.target("sync", function() {
            var expected, ref, states, talos;
            states = [];
            ref = start(B, {
                product: 1
            });
            for (talos of ref){
                states.push({
                    name: talos.name,
                    state: talos.state
                });
            }
            expected = [
                {
                    name: "B",
                    state: "first"
                },
                {
                    name: "B",
                    state: "join"
                },
                {
                    name: "A",
                    state: "second"
                },
                {
                    name: "A",
                    state: "third"
                },
                {
                    name: "A",
                    state: $end
                },
                {
                    name: "B",
                    state: $end
                }
            ];
            return h.assert.deepEqual(expected, states);
        }))
    ];
};
export { test as nested }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy90ZXN0L3N5bmMvbmVzdGVkLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0VBQWtCLElBQWxCO0VBQXdCLEtBQXhCO0VBQStCLEdBQS9CO0NBQUEsTUFBQTs7QUFDQSxPQUFPLENBQUEsS0FBUCxNQUFBOztBQUdBLElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQTtBQUNQLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQTtFQUFFLEdBQUEsR0FDRTtJQUFBLElBQUEsRUFBTSxRQUFBLENBQUUsS0FBRixDQUFBO2FBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFkLElBQXlCO0lBRHJCO0VBQU47RUFHRixDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FDRjtJQUFBLElBQUEsRUFBTSxHQUFOO0lBQ0EsS0FBQSxFQUNFO01BQUEsS0FBQSxFQUNFO1FBQUEsT0FBQSxFQUFTO01BQVQsQ0FERjtNQUVBLE1BQUEsRUFDRTtRQUFBLE9BQUEsRUFDRTtVQUFBLEdBQUEsRUFBSyxHQUFHLENBQUMsSUFBVDtVQUNBLElBQUEsRUFBTTtRQUROO01BREYsQ0FIRjtNQU1BLEtBQUEsRUFDRTtRQUFBLE9BQUEsRUFDRTtVQUFBLEdBQUEsRUFBSyxHQUFHLENBQUMsSUFBVDtVQUNBLElBQUEsRUFBTTtRQUROO01BREY7SUFQRjtFQUZGLENBREU7RUFjSixHQUFHLENBQUMsSUFBSixHQUFXLFNBQUEsQ0FBRSxLQUFGLENBQUE7QUFDYixRQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUE7QUFBSTtBQUFBO0lBQUEsS0FBQSxZQUFBO21CQUNFLENBQUEsTUFBTSxLQUFOO0lBREYsQ0FBQTs7RUFEUztFQUlYLENBQUEsR0FBSSxPQUFPLENBQUMsSUFBUixDQUNGO0lBQUEsSUFBQSxFQUFNLEdBQU47SUFDQSxLQUFBLEVBQ0U7TUFBQSxLQUFBLEVBQ0U7UUFBQSxPQUFBLEVBQVM7TUFBVCxDQURGO01BRUEsS0FBQSxFQUNFO1FBQUEsT0FBQSxFQUNFO1VBQUEsR0FBQSxFQUFLLEdBQUcsQ0FBQyxJQUFUO1VBQ0EsSUFBQSxFQUFNO1FBRE47TUFERixDQUhGO01BTUEsSUFBQSxFQUNFO1FBQUEsT0FBQSxFQUNFO1VBQUEsR0FBQSxFQUFLLEdBQUcsQ0FBQyxJQUFUO1VBQ0EsSUFBQSxFQUFNO1FBRE47TUFERjtJQVBGO0VBRkYsQ0FERTtTQWVKO0lBQ0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxxQkFBUDtJQUE4QixDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQ7SUFBaUIsUUFBQSxDQUFBLENBQUE7QUFDbkQsVUFBQSxHQUFBO0lBQUE7TUFBTSxLQUFBLEdBQVEsR0FBQSxDQUFJLENBQUo7SUFBTztRQUFBLE9BQUEsRUFBUztNQUFULENBQVA7YUFDUixDQUFDLENBQUMsTUFBTSxDQUFDLEtBQVQsQ0FBZSxDQUFmO3VDQUErQixDQUFFLGdCQUFqQztJQUY2QyxDQUFqQixDQUE5QixDQURGO0lBS0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxvQ0FBUDtJQUE2QyxDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQ7SUFBaUIsUUFBQSxDQUFBLENBQUE7QUFDbEUsVUFBQSxRQUFBO0lBQUEsR0FBQTtJQUFBLE1BQUE7SUFBQTtNQUFNLE1BQUEsR0FBUztBQUNUOzs7TUFBQSxLQUFBLFlBQUE7UUFDRSxNQUFNLENBQUMsSUFBUCxDQUNFO1VBQUEsSUFBQSxFQUFNLEtBQUssQ0FBQyxJQUFaO1VBQ0EsS0FBQSxFQUFPLEtBQUssQ0FBQztRQURiLENBREY7TUFERjtNQUtBLFFBQUEsR0FBVztRQUNUO1VBQUEsSUFBQSxFQUFNLEdBQU47VUFDQSxLQUFBLEVBQU87UUFEUCxDQURTO1FBSVQ7VUFBQSxJQUFBLEVBQU0sR0FBTjtVQUNBLEtBQUEsRUFBTztRQURQLENBSlM7UUFPVDtVQUFBLElBQUEsRUFBTSxHQUFOO1VBQ0EsS0FBQSxFQUFPO1FBRFAsQ0FQUztRQVVUO1VBQUEsSUFBQSxFQUFNLEdBQU47VUFDQSxLQUFBLEVBQU87UUFEUCxDQVZTO1FBYVQ7VUFBQSxJQUFBLEVBQU0sR0FBTjtVQUNBLEtBQUEsRUFBTztRQURQLENBYlM7UUFnQlQ7VUFBQSxJQUFBLEVBQU0sR0FBTjtVQUNBLEtBQUEsRUFBTztRQURQLENBaEJTOzthQW9CWCxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVQsQ0FBbUIsUUFBbkI7SUFBNkIsTUFBN0I7SUEzQjRELENBQWpCLENBQTdDLENBTEY7O0FBdENLOztBQTBFUCxPQUFBO0VBQVMsSUFBQSxVQUFUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgJGVuZCwgc3RhcnQsIHJ1biB9IGZyb20gXCIuLi8uLi9zcmMvc3luY1wiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuXG50ZXN0ID0gLT5cbiAgUnVuID0gXG4gICAgZ3JvdzogKCB0YWxvcyApIC0+XG4gICAgICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gMlxuXG4gIEEgPSBNYWNoaW5lLm1ha2UgXG4gICAgbmFtZTogXCJBXCJcbiAgICBncmFwaDpcbiAgICAgIHN0YXJ0OlxuICAgICAgICBkZWZhdWx0OiBcInNlY29uZFwiXG4gICAgICBzZWNvbmQ6XG4gICAgICAgIGRlZmF1bHQ6IFxuICAgICAgICAgIHJ1bjogUnVuLmdyb3dcbiAgICAgICAgICBtb3ZlOiBcInRoaXJkXCJcbiAgICAgIHRoaXJkOiBcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBydW46IFJ1bi5ncm93XG4gICAgICAgICAgbW92ZTogJGVuZFxuXG4gIFJ1bi5qb2luID0gKCB0YWxvcyApIC0+XG4gICAgZm9yIGlubmVyIGZyb20gc3RhcnQgQSwgdGFsb3MuY29udGV4dFxuICAgICAgeWllbGQgaW5uZXJcblxuICBCID0gTWFjaGluZS5tYWtlIFxuICAgIG5hbWU6IFwiQlwiXG4gICAgZ3JhcGg6XG4gICAgICBzdGFydDpcbiAgICAgICAgZGVmYXVsdDogXCJmaXJzdFwiIFxuICAgICAgZmlyc3Q6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcnVuOiBSdW4uZ3Jvd1xuICAgICAgICAgIG1vdmU6IFwiam9pblwiXG4gICAgICBqb2luOiBcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBydW46IFJ1bi5qb2luXG4gICAgICAgICAgbW92ZTogJGVuZFxuXG5cbiAgW1xuICAgIGgudGVzdCBcImNvbXBsZXRlcyBvcGVyYXRpb25cIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IHJ1biBCLCBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJleHBvc2VzIGxvd2VyIG9yZGVyIHRhbG9zIGluc3RhbmNlXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgc3RhdGVzID0gW11cbiAgICAgIGZvciB0YWxvcyBmcm9tIHN0YXJ0IEIsIHByb2R1Y3Q6IDFcbiAgICAgICAgc3RhdGVzLnB1c2hcbiAgICAgICAgICBuYW1lOiB0YWxvcy5uYW1lXG4gICAgICAgICAgc3RhdGU6IHRhbG9zLnN0YXRlXG4gICAgXG4gICAgICBleHBlY3RlZCA9IFsgXG4gICAgICAgIG5hbWU6IFwiQlwiXG4gICAgICAgIHN0YXRlOiBcImZpcnN0XCJcbiAgICAgICwgXG4gICAgICAgIG5hbWU6IFwiQlwiXG4gICAgICAgIHN0YXRlOiBcImpvaW5cIlxuICAgICAgLCBcbiAgICAgICAgbmFtZTogXCJBXCJcbiAgICAgICAgc3RhdGU6IFwic2Vjb25kXCJcbiAgICAgICwgXG4gICAgICAgIG5hbWU6IFwiQVwiXG4gICAgICAgIHN0YXRlOiBcInRoaXJkXCJcbiAgICAgICxcbiAgICAgICAgbmFtZTogXCJBXCJcbiAgICAgICAgc3RhdGU6ICRlbmRcbiAgICAgICxcbiAgICAgICAgbmFtZTogXCJCXCJcbiAgICAgICAgc3RhdGU6ICRlbmRcbiAgICAgIF1cbiAgICAgIFxuICAgICAgaC5hc3NlcnQuZGVlcEVxdWFsIGV4cGVjdGVkLCBzdGF0ZXNcbiAgICAgIFxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgbmVzdGVkIH0iXX0=
 //# sourceURL=/@dashkite/talos/test/sync/nested.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9zeW5jL25lc3RlZC5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgJGVuZCwgc3RhcnQsIHJ1biB9IGZyb20gXCIuLi8uLi9zcmMvc3luY1wiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuXG50ZXN0ID0gLT5cbiAgUnVuID0gXG4gICAgZ3JvdzogKCB0YWxvcyApIC0+XG4gICAgICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gMlxuXG4gIEEgPSBNYWNoaW5lLm1ha2UgXG4gICAgbmFtZTogXCJBXCJcbiAgICBncmFwaDpcbiAgICAgIHN0YXJ0OlxuICAgICAgICBkZWZhdWx0OiBcInNlY29uZFwiXG4gICAgICBzZWNvbmQ6XG4gICAgICAgIGRlZmF1bHQ6IFxuICAgICAgICAgIHJ1bjogUnVuLmdyb3dcbiAgICAgICAgICBtb3ZlOiBcInRoaXJkXCJcbiAgICAgIHRoaXJkOiBcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBydW46IFJ1bi5ncm93XG4gICAgICAgICAgbW92ZTogJGVuZFxuXG4gIFJ1bi5qb2luID0gKCB0YWxvcyApIC0+XG4gICAgZm9yIGlubmVyIGZyb20gc3RhcnQgQSwgdGFsb3MuY29udGV4dFxuICAgICAgeWllbGQgaW5uZXJcblxuICBCID0gTWFjaGluZS5tYWtlIFxuICAgIG5hbWU6IFwiQlwiXG4gICAgZ3JhcGg6XG4gICAgICBzdGFydDpcbiAgICAgICAgZGVmYXVsdDogXCJmaXJzdFwiIFxuICAgICAgZmlyc3Q6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcnVuOiBSdW4uZ3Jvd1xuICAgICAgICAgIG1vdmU6IFwiam9pblwiXG4gICAgICBqb2luOiBcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBydW46IFJ1bi5qb2luXG4gICAgICAgICAgbW92ZTogJGVuZFxuXG5cbiAgW1xuICAgIGgudGVzdCBcImNvbXBsZXRlcyBvcGVyYXRpb25cIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IHJ1biBCLCBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJleHBvc2VzIGxvd2VyIG9yZGVyIHRhbG9zIGluc3RhbmNlXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgc3RhdGVzID0gW11cbiAgICAgIGZvciB0YWxvcyBmcm9tIHN0YXJ0IEIsIHByb2R1Y3Q6IDFcbiAgICAgICAgc3RhdGVzLnB1c2hcbiAgICAgICAgICBuYW1lOiB0YWxvcy5uYW1lXG4gICAgICAgICAgc3RhdGU6IHRhbG9zLnN0YXRlXG4gICAgXG4gICAgICBleHBlY3RlZCA9IFsgXG4gICAgICAgIG5hbWU6IFwiQlwiXG4gICAgICAgIHN0YXRlOiBcImZpcnN0XCJcbiAgICAgICwgXG4gICAgICAgIG5hbWU6IFwiQlwiXG4gICAgICAgIHN0YXRlOiBcImpvaW5cIlxuICAgICAgLCBcbiAgICAgICAgbmFtZTogXCJBXCJcbiAgICAgICAgc3RhdGU6IFwic2Vjb25kXCJcbiAgICAgICwgXG4gICAgICAgIG5hbWU6IFwiQVwiXG4gICAgICAgIHN0YXRlOiBcInRoaXJkXCJcbiAgICAgICxcbiAgICAgICAgbmFtZTogXCJBXCJcbiAgICAgICAgc3RhdGU6ICRlbmRcbiAgICAgICxcbiAgICAgICAgbmFtZTogXCJCXCJcbiAgICAgICAgc3RhdGU6ICRlbmRcbiAgICAgIF1cbiAgICAgIFxuICAgICAgaC5hc3NlcnQuZGVlcEVxdWFsIGV4cGVjdGVkLCBzdGF0ZXNcbiAgICAgIFxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgbmVzdGVkIH0iXSwibmFtZXMiOlsidGVzdCIsIk1hY2hpbmUiLCIkZW5kIiwic3RhcnQiLCJydW4iLCJoIiwiQSIsIkIiLCJSdW4iLCJncm93IiwidGFsb3MiLCJjb250ZXh0IiwicHJvZHVjdCIsIm1ha2UiLCJuYW1lIiwiZ3JhcGgiLCJkZWZhdWx0Iiwic2Vjb25kIiwibW92ZSIsInRoaXJkIiwiam9pbiIsImlubmVyIiwicmVmIiwicmVzdWx0cyIsImZpcnN0IiwidGFyZ2V0IiwiYXNzZXJ0IiwiZXF1YWwiLCJleHBlY3RlZCIsInN0YXRlcyIsInB1c2giLCJzdGF0ZSIsImRlZXBFcXVhbCIsIm5lc3RlZCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUE7QUFBQSxTQUFTQyxPQUFULEVBQWtCQyxJQUFsQixFQUF3QkMsS0FBeEIsRUFBK0JDLEdBQS9CLFFBQUEsaUJBQUE7QUFDQSxZQUFPQyxPQUFQLGFBQUE7QUFHQUwsT0FBTztJQUNQLElBQUFNLEdBQUFDLEdBQUFDO0lBQUVBLE1BQ0U7UUFBQUMsTUFBTSxTQUFFQyxLQUFGO21CQUNKQSxNQUFNQyxPQUFPLENBQUNDLE9BQWQsSUFBeUI7UUFEckI7SUFBTjtJQUdGTixJQUFJTCxRQUFRWSxJQUFSLENBQ0Y7UUFBQUMsTUFBTTtRQUNOQyxPQUNFO1lBQUFaLE9BQ0U7Z0JBQUFhLFNBQVM7WUFBVDtZQUNGQyxRQUNFO2dCQUFBRCxTQUNFO29CQUFBWixLQUFLSSxJQUFJQyxJQUFUO29CQUNBUyxNQUFNO2dCQUROO1lBREY7WUFHRkMsT0FDRTtnQkFBQUgsU0FDRTtvQkFBQVosS0FBS0ksSUFBSUMsSUFBVDtvQkFDQVMsTUFBTWhCO2dCQUROO1lBREY7UUFQRjtJQUZGO0lBYUZNLElBQUlZLElBQUosR0FBVyxVQUFFVixLQUFGO1FBQ2IsSUFBQVcsT0FBQUMsS0FBQUM7UUFBSUQsTUFBQW5CLE1BQUFHLEdBQUFJLE1BQUFDLE9BQUE7UUFBQVksVUFBQSxFQUFBO1FBQUEsS0FBQUYsU0FBQUMsSUFBQTt5QkFDRSxDQUFBLE1BQU1ELEtBQUE7UUFEUjs7SUFEUztJQUlYZCxJQUFJTixRQUFRWSxJQUFSLENBQ0Y7UUFBQUMsTUFBTTtRQUNOQyxPQUNFO1lBQUFaLE9BQ0U7Z0JBQUFhLFNBQVM7WUFBVDtZQUNGUSxPQUNFO2dCQUFBUixTQUNFO29CQUFBWixLQUFLSSxJQUFJQyxJQUFUO29CQUNBUyxNQUFNO2dCQUROO1lBREY7WUFHRkUsTUFDRTtnQkFBQUosU0FDRTtvQkFBQVosS0FBS0ksSUFBSVksSUFBVDtvQkFDQUYsTUFBTWhCO2dCQUROO1lBREY7UUFQRjtJQUZGO1dBY0Y7UUFDRUcsRUFBRUwsSUFBRixDQUFPLHVCQUF1QkssRUFBRW9CLE1BQUYsQ0FBUyxRQUFRO1lBQ25ELElBQUFILEtBQUFaO1lBQU1BLFFBQVFOLElBQUlHLEdBQUc7Z0JBQUFLLFNBQVM7WUFBVDttQkFDZlAsRUFBRXFCLE1BQU0sQ0FBQ0MsS0FBVCxDQUFlLHVDQUFrQmYsT0FBQSxHQUFBLEtBQUE7UUFGWTtRQUkvQ1AsRUFBRUwsSUFBRixDQUFPLHNDQUFzQ0ssRUFBRW9CLE1BQUYsQ0FBUyxRQUFRO1lBQ2xFLElBQUFHLFVBQUFOLEtBQUFPLFFBQUFuQjtZQUFNbUIsU0FBUyxFQUFBO1lBQ1RQLE1BQUFuQixNQUFBSSxHQUFBOzs7WUFBQSxLQUFBRyxTQUFBWSxJQUFBO2dCQUNFTyxPQUFPQyxJQUFQLENBQ0U7b0JBQUFoQixNQUFNSixNQUFNSSxJQUFaO29CQUNBaUIsT0FBT3JCLE1BQU1xQixLQUFBO2dCQURiO1lBRko7WUFLQUgsV0FBVztnQkFDVDtvQkFBQWQsTUFBTTtvQkFDTmlCLE9BQU87Z0JBRFA7Z0JBR0E7b0JBQUFqQixNQUFNO29CQUNOaUIsT0FBTztnQkFEUDtnQkFHQTtvQkFBQWpCLE1BQU07b0JBQ05pQixPQUFPO2dCQURQO2dCQUdBO29CQUFBakIsTUFBTTtvQkFDTmlCLE9BQU87Z0JBRFA7Z0JBR0E7b0JBQUFqQixNQUFNO29CQUNOaUIsT0FBTzdCO2dCQURQO2dCQUdBO29CQUFBWSxNQUFNO29CQUNOaUIsT0FBTzdCO2dCQURQOzttQkFJRkcsRUFBRXFCLE1BQU0sQ0FBQ00sU0FBVCxDQUFtQkosVUFBVUM7UUEzQitCOztBQTNDM0Q7QUEwRVAsU0FBUzdCLFFBQUFpQyxNQUFUIn0=