var add, grow, test;
import { Machine, Talos, $start, $end } from "../../src";
import { start, run, build, pipe, pipeWith } from "../../src/sync";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        h.test("start", h.target("sync", function() {
            var cycle;
            cycle = start(A);
            return h.assert(Type.isIterator(cycle));
        })),
        h.test("run while consuming on events", h.target("sync", function() {
            var cycle, events, ref, talos;
            events = [
                1,
                2,
                3
            ];
            cycle = start(A, {
                sum: 0
            }, events);
            talos = run(cycle);
            return h.assert.equal(6, talos != null ? (ref = talos.context) != null ? ref.sum : void 0 : void 0);
        })),
        h.test("run without events and reconsume context", h.target("sync", function() {
            var cycle, ref, talos;
            cycle = start(B, {
                product: 1
            });
            talos = run(cycle);
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("build", h.target("sync", function() {
            var f, ref, talos;
            f = build(B);
            h.assert(Type.isFunction(f));
            talos = f({
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("pipe", h.target("sync", function() {
            var a, b, c, context, f;
            a = function(talos) {
                return talos.context.sum = 1;
            };
            b = function(talos) {
                return talos.context.sum += 2;
            };
            c = function(talos) {
                return talos.context.sum += 3;
            };
            f = pipe([
                a,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = f({});
            return h.assert.equal(6, context != null ? context.sum : void 0);
        })),
        h.test("pipeWith", h.target("sync", function() {
            var a, b, c, context, f, log;
            a = function(talos) {
                return talos.context.sum = 1;
            };
            b = function(talos) {
                return talos.context.sum += 2;
            };
            c = function(talos) {
                return talos.context.sum += 3;
            };
            log = function(talos) {
                var base;
                if ((base = talos.context).product == null) {
                    base.product = 1;
                }
                return talos.context.product *= talos.context.sum;
            };
            // console.log talos.context.product
            f = pipeWith(log, [
                a,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = f({});
            h.assert.equal(6, context != null ? context.sum : void 0);
            return h.assert.equal(18, context != null ? context.product : void 0);
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9zeW5jL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsS0FBbEI7RUFBeUIsTUFBekI7RUFBaUMsSUFBakM7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0VBQWdCLEdBQWhCO0VBQXFCLEtBQXJCO0VBQTRCLElBQTVCO0VBQWtDLFFBQWxDO0NBQUEsTUFBQTs7QUFDQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxLQUFQLE1BQUE7O0FBRUEsR0FBQSxHQUFNLFFBQUEsQ0FBRSxLQUFGLEVBQVMsS0FBVCxDQUFBO1NBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFkLElBQXFCO0FBRGpCOztBQUVOLElBQUEsR0FBTyxRQUFBLENBQUUsS0FBRixDQUFBO1NBQ0wsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFkLElBQXlCO0FBRHBCOztBQUlQLElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQTtBQUNQLE1BQUEsQ0FBQSxFQUFBO0VBQUUsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQ0Y7SUFBQSxLQUFBLEVBQ0U7TUFBQSxJQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBREY7SUFHQSxJQUFBLEVBQ0U7TUFBQSxJQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGO0VBSkYsQ0FERTtFQVFKLENBQUEsR0FBSSxPQUFPLENBQUMsSUFBUixDQUNGO0lBQUEsS0FBQSxFQUNFO01BQUEsS0FBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERixDQURGO0lBR0EsS0FBQSxFQUNFO01BQUEsTUFBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERixDQUpGO0lBTUEsTUFBQSxFQUNFO01BQUEsR0FBQSxFQUNFO1FBQUEsR0FBQSxF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YWxvcywgJHN0YXJ0LCAkZW5kIH0gZnJvbSBcIi4uLy4uL3NyY1wiXG5pbXBvcnQgeyBzdGFydCwgcnVuLCBidWlsZCwgcGlwZSwgcGlwZVdpdGggfSBmcm9tIFwiLi4vLi4vc3JjL3N5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgY3ljbGUgPSBzdGFydCBBXG4gICAgICBoLmFzc2VydCBUeXBlLmlzSXRlcmF0b3IgY3ljbGVcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgb24gZXZlbnRzXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyAxLCAyLCAzIF1cbiAgICAgIGN5Y2xlID0gc3RhcnQgQSwgc3VtOiAwLCBldmVudHNcbiAgICAgIHRhbG9zID0gcnVuIGN5Y2xlXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcz8uY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgY3ljbGUgPSBzdGFydCBCLCBwcm9kdWN0OiAxXG4gICAgICB0YWxvcyA9IHJ1biBjeWNsZVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiYnVpbGRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBmID0gYnVpbGQgQlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIHRhbG9zID0gZiBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJwaXBlXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMlxuICAgICAgYyA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSAzIFxuXG4gICAgICBmID0gcGlwZSBbIGEsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBmIHt9XG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCBjb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcInBpcGVXaXRoXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMlxuICAgICAgYyA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSAzIFxuICAgICAgbG9nID0gKCB0YWxvcyApIC0+XG4gICAgICAgIHRhbG9zLmNvbnRleHQucHJvZHVjdCA/PSAxIFxuICAgICAgICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gdGFsb3MuY29udGV4dC5zdW1cbiAgICAgICAgIyBjb25zb2xlLmxvZyB0YWxvcy5jb250ZXh0LnByb2R1Y3RcblxuICAgICAgZiA9IHBpcGVXaXRoIGxvZywgWyBhLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gZiB7fVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgY29udGV4dD8uc3VtXG4gICAgICBoLmFzc2VydC5lcXVhbCAxOCwgY29udGV4dD8ucHJvZHVjdFxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBiYXNpYyB9Il19
 //# sourceURL=test/sync/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc3luYy9iYXNpYy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0IHsgc3RhcnQsIHJ1biwgYnVpbGQsIHBpcGUsIHBpcGVXaXRoIH0gZnJvbSBcIi4uLy4uL3NyYy9zeW5jXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuYWRkID0gKCB0YWxvcywgZXZlbnQgKSAtPlxuICB0YWxvcy5jb250ZXh0LnN1bSArPSBldmVudFxuZ3JvdyA9ICggdGFsb3MgKSAtPlxuICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gMlxuXG5cbnRlc3QgPSAtPlxuICBBID0gTWFjaGluZS5tYWtlXG4gICAgc3RhcnQ6XG4gICAgICBob2xkOiBcbiAgICAgICAgcnVuOiBhZGRcbiAgICBob2xkOlxuICAgICAgaG9sZDpcbiAgICAgICAgcnVuOiBhZGRcblxuICBCID0gTWFjaGluZS5tYWtlXG4gICAgc3RhcnQ6XG4gICAgICBmaXJzdDogXG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIGZpcnN0OlxuICAgICAgc2Vjb25kOlxuICAgICAgICBydW46IGdyb3dcbiAgICBzZWNvbmQ6IFxuICAgICAgZW5kOlxuICAgICAgICBydW46IGdyb3dcblxuXG4gIFtcbiAgICBoLnRlc3QgXCJzdGFydFwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGN5Y2xlID0gc3RhcnQgQVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0l0ZXJhdG9yIGN5Y2xlXG5cbiAgICBoLnRlc3QgXCJydW4gd2hpbGUgY29uc3VtaW5nIG9uIGV2ZW50c1wiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgMSwgMiwgMyBdXG4gICAgICBjeWNsZSA9IHN0YXJ0IEEsIHN1bTogMCwgZXZlbnRzXG4gICAgICB0YWxvcyA9IHJ1biBjeWNsZVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3M/LmNvbnRleHQ/LnN1bVxuXG4gICAgaC50ZXN0IFwicnVuIHdpdGhvdXQgZXZlbnRzIGFuZCByZWNvbnN1bWUgY29udGV4dFwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGN5Y2xlID0gc3RhcnQgQiwgcHJvZHVjdDogMVxuICAgICAgdGFsb3MgPSBydW4gY3ljbGVcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImJ1aWxkXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgZiA9IGJ1aWxkIEJcbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICB0YWxvcyA9IGYgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwicGlwZVwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGEgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gPSAxXG4gICAgICBiID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IDJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMyBcblxuICAgICAgZiA9IHBpcGUgWyBhLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gZiB7fVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJwaXBlV2l0aFwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGEgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gPSAxXG4gICAgICBiID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IDJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMyBcbiAgICAgIGxvZyA9ICggdGFsb3MgKSAtPlxuICAgICAgICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgPz0gMSBcbiAgICAgICAgdGFsb3MuY29udGV4dC5wcm9kdWN0ICo9IHRhbG9zLmNvbnRleHQuc3VtXG4gICAgICAgICMgY29uc29sZS5sb2cgdGFsb3MuY29udGV4dC5wcm9kdWN0XG5cbiAgICAgIGYgPSBwaXBlV2l0aCBsb2csIFsgYSwgYiwgYyBdXG4gICAgICBoLmFzc2VydCBUeXBlLmlzRnVuY3Rpb24gZlxuICAgICAgY29udGV4dCA9IGYge31cbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIGNvbnRleHQ/LnN1bVxuICAgICAgaC5hc3NlcnQuZXF1YWwgMTgsIGNvbnRleHQ/LnByb2R1Y3RcblxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSJdLCJuYW1lcyI6WyJhZGQiLCJncm93IiwidGVzdCIsIk1hY2hpbmUiLCJUYWxvcyIsIiRzdGFydCIsIiRlbmQiLCJzdGFydCIsInJ1biIsImJ1aWxkIiwicGlwZSIsInBpcGVXaXRoIiwiVHlwZSIsImgiLCJ0YWxvcyIsImV2ZW50IiwiY29udGV4dCIsInN1bSIsInByb2R1Y3QiLCJBIiwiQiIsIm1ha2UiLCJob2xkIiwiZmlyc3QiLCJzZWNvbmQiLCJlbmQiLCJ0YXJnZXQiLCJjeWNsZSIsImFzc2VydCIsImlzSXRlcmF0b3IiLCJldmVudHMiLCJyZWYiLCJlcXVhbCIsImYiLCJpc0Z1bmN0aW9uIiwiYSIsImIiLCJjIiwibG9nIiwiYmFzZSIsImJhc2ljIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSxLQUFBQyxNQUFBQztBQUFBLFNBQVNDLE9BQVQsRUFBa0JDLEtBQWxCLEVBQXlCQyxNQUF6QixFQUFpQ0MsSUFBakMsUUFBQSxZQUFBO0FBQ0EsU0FBU0MsS0FBVCxFQUFnQkMsR0FBaEIsRUFBcUJDLEtBQXJCLEVBQTRCQyxJQUE1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