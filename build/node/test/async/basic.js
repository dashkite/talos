"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "basic", {
    enumerable: true,
    get: function() {
        return test;
    }
});
const _async = require("../../src/async");
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _helpers = /*#__PURE__*/ _interop_require_wildcard(require("../helpers"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var add, grow, test;
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = _async.Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = _async.Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        _helpers.test("start", _helpers.target("async", function() {
            return _helpers.assert(_type.isReactor((0, _async.start)(A)));
        })),
        _helpers.test("run while consuming events", _helpers.target("async", async function() {
            var events, ref, talos;
            events = [
                new Promise(function(resolve, reject) {
                    return resolve(1);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(2);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(3);
                })
            ];
            talos = await (0, _async.run)(A, {
                sum: 0
            }, events);
            return _helpers.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        _helpers.test("run without events and reconsume context", _helpers.target("async", async function() {
            var ref, talos;
            talos = await (0, _async.run)(B, {
                product: 1
            });
            return _helpers.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        _helpers.test("flow functional composition", _helpers.target("async", async function() {
            var a, b, b2, c, context, error, f, g;
            a = async function(talos) {
                return talos.context.sum = await 1;
            };
            b = async function(talos) {
                return talos.context.sum += await 2;
            };
            b2 = async function() {
                await null;
                throw new Error("b2");
            };
            c = async function(talos) {
                return talos.context.sum += await 3;
            };
            f = (0, _async.flow)([
                a,
                b,
                b,
                c
            ]);
            _helpers.assert(_type.isFunction(f));
            context = await f();
            _helpers.assert.equal(8, context != null ? context.sum : void 0);
            g = (0, _async.flow)([
                a,
                b,
                b2,
                c
            ]);
            try {
                await g();
                throw new Error("did not throw");
            } catch (error1) {
                error = error1;
                return _helpers.assert(error.message === "b2");
            }
        }))
    ];
};
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy90ZXN0L2FzeW5jL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsS0FBbEI7RUFBeUIsTUFBekI7RUFBaUMsSUFBakM7RUFDRSxLQURGO0VBQ1MsR0FEVDtFQUNjLElBRGQ7Q0FBQSxNQUFBOztBQUVBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFFQSxHQUFBLEdBQU0sUUFBQSxDQUFFLEtBQUYsRUFBUyxLQUFULENBQUE7U0FDSixLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsSUFBcUI7QUFEakI7O0FBRU4sSUFBQSxHQUFPLFFBQUEsQ0FBRSxLQUFGLENBQUE7U0FDTCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQWQsSUFBeUI7QUFEcEI7O0FBSVAsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxDQUFBLEVBQUE7RUFBRSxDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FDRjtJQUFBLEtBQUEsRUFDRTtNQUFBLElBQUEsRUFDRTtRQUFBLEdBQUEsRUFBSztNQUFMO0lBREYsQ0FERjtJQUdBLElBQUEsRUFDRTtNQUFBLElBQUEsRUFDRTtRQUFBLEdBQUEsRUFBSztNQUFMO0lBREY7RUFKRixDQURFO0VBUUosQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQ0Y7SUFBQSxLQUFBLEVBQ0U7TUFBQSxLQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBREY7SUFHQSxLQUFBLEVBQ0U7TUFBQSxNQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBSkY7SUFNQSxNQUFBLEVBQ0U7TUFBQSxHQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGO0VBUEYsQ0FERTtTQVlKO0lBQ0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxPQUFQO0lBQWdCLENBQUMsQ0FBQyxNQUFGLENBQVMsT0FBVDtJQUFrQixRQUFBLENBQUEsQ0FBQTthQUNoQyxDQUFDLENBQUMsTUFBRixDQUFTLElBQUksQ0FBQyxTQUFMLENBQWUsS0FBQSxDQUFNLENBQU4sQ0FBZixDQUFUO0lBRGdDLENBQWxCLENBQWhCLENBREY7SUFJRSxDQUFDLENBQUMsSUFBRixDQUFPLDRCQUFQO0lBQXFDLENBQUMsQ0FBQyxNQUFGLENBQVMsT0FBVDtJQUFrQixNQUFBLFFBQUEsQ0FBQSxDQUFBO0FBQzNELFVBQUEsTUFBQTtJQUFBLEdBQUE7SUFBQTtNQUFNLE1BQUEsR0FBUztRQUNQLElBQUksT0FBSixDQUFZLFFBQUEsQ0FBRSxPQUFGO1FBQVcsTUFBWCxDQUFBO2lCQUF1QixPQUFBLENBQVEsQ0FBUjtRQUF2QixDQUFaLENBRE87UUFFUCxJQUFJLE9BQUosQ0FBWSxRQUFBLENBQUUsT0FBRjtRQUFXLE1BQVgsQ0FBQTtpQkFBdUIsT0FBQSxDQUFRLENBQVI7UUFBdkIsQ0FBWixDQUZPO1FBR1AsSUFBSSxPQUFKLENBQVksUUFBQSxDQUFFLE9BQUY7UUFBVyxNQUFYLENBQUE7aUJBQXVCLE9BQUEsQ0FBUSxDQUFSO1FBQXZCLENBQVosQ0FITzs7TUFLVCxLQUFBLEdBQVEsQ0FBQSxNQUFNLEdBQUEsQ0FBSSxDQUFKO0lBQU87UUFBQSxHQUFBLEVBQUs7TUFBTCxDQUFQO0lBQWUsTUFBZixDQUFOO2FBQ1IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsQ0FBZjt1Q0FBK0IsQ0FBRSxZQUFqQztJQVBxRCxDQUFsQixDQUFyQyxDQUpGO0lBYUUsQ0FBQyxDQUFDLElBQUYsQ0FBTywwQ0FBUDtJQUFtRCxDQUFDLENBQUMsTUFBRixDQUFTLE9BQVQ7SUFBa0IsTUFBQSxRQUFBLENBQUEsQ0FBQTtBQUN6RSxVQUFBLEdBQUE7SUFBQTtNQUFNLEtBQUEsR0FBUSxDQUFBLE1BQU0sR0FBQSxDQUFJLENBQUo7SUFBTztRQUFBLE9BQUEsRUFBUztNQUFULENBQVAsQ0FBTjthQUNSLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQWY7dUNBQStCLENBQUUsZ0JBQWpDO0lBRm1FLENBQWxCLENBQW5ELENBYkY7SUFpQkUsQ0FBQyxDQUFDLElBQUYsQ0FBTyw2QkFBUDtJQUFzQyxDQUFDLENBQUMsTUFBRixDQUFTLE9BQVQ7SUFBa0IsTUFBQSxRQUFBLENBQUEsQ0FBQTtBQUM1RCxVQUFBLENBQUE7SUFBQSxDQUFBO0lBQUEsRUFBQTtJQUFBLENBQUE7SUFBQSxPQUFBO0lBQUEsS0FBQTtJQUFBLENBQUE7SUFBQTtNQUFNLENBQUEsR0FBSSxNQUFBLFFBQUEsQ0FBRSxLQUFGLENBQUE7ZUFBYSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsR0FBb0IsQ0FBQSxNQUFNLENBQU47TUFBakM7TUFDSixDQUFBLEdBQUksTUFBQSxRQUFBLENBQUUsS0FBRixDQUFBO2VBQWEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFkLElBQXFCLENBQUEsTUFBTSxDQUFOO01BQWxDO01BQ0osRUFBQSxHQUFLLE1BQUEsUUFBQSxDQUFBLENBQUE7UUFBRyxNQUFNO1FBQU0sTUFBTSxJQUFJLEtBQUosQ0FBVSxJQUFWO01BQXJCO01BQ0wsQ0FBQSxHQUFJLE1BQUEsUUFBQSxDQUFFLEtBQUYsQ0FBQTtlQUFhLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBZCxJQUFxQixDQUFBLE1BQU0sQ0FBTjtNQUFsQztNQUVKLENBQUEsR0FBSSxJQUFBLENBQUssQ0FBRSxDQUFGO0lBQUssQ0FBTDtJQUFRLENBQVI7SUFBVyxDQUFYLENBQUw7TUFDSixDQUFDLENBQUMsTUFBRixDQUFTLElBQUksQ0FBQyxVQUFMLENBQWdCLENBQWhCLENBQVQ7TUFDQSxPQUFBLEdBQVUsQ0FBQSxNQUFNLENBQUEsQ0FBQSxDQUFOO01BQ1YsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsQ0FBZjtzQkFBa0IsT0FBTyxDQUFFLFlBQTNCO01BRUEsQ0FBQSxHQUFJLElBQUEsQ0FBSyxDQUFFLENBQUY7SUFBSyxDQUFMO0lBQVEsRUFBUjtJQUFZLENBQVosQ0FBTDtBQUNKO1FBQ0UsTUFBTSxDQUFBLENBQUE7UUFDTixNQUFNLElBQUksS0FBSixDQUFVLGVBQVYsRUFGUjtPQUdBLGNBQUE7UUFBTTtlQUNKLENBQUMsQ0FBQyxNQUFGLENBQVMsS0FBSyxDQUFDLE9BQU4sS0FBaUIsSUFBMUIsRUFERjs7SUFmc0QsQ0FBbEIsQ0FBdEMsQ0FqQkY7O0FBckJLOztBQTBEUCxPQUFBO0VBQVMsSUFBQSxTQUFUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCxcbiAgc3RhcnQsIHJ1biwgZmxvdyB9IGZyb20gXCIuLi8uLi9zcmMvYXN5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNSZWFjdG9yIHN0YXJ0IEFcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAxXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAyXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAzXG4gICAgICBdXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImZsb3cgZnVuY3Rpb25hbCBjb21wb3NpdGlvblwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSBhd2FpdCAyXG4gICAgICBiMiA9IC0+IGF3YWl0IG51bGw7IHRocm93IG5ldyBFcnJvciBcImIyXCJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgZiA9IGZsb3cgWyBhLCBiLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gYXdhaXQgZigpXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCBjb250ZXh0Py5zdW1cblxuICAgICAgZyA9IGZsb3cgWyBhLCBiLCBiMiwgYyBdXG4gICAgICB0cnlcbiAgICAgICAgYXdhaXQgZygpXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcImRpZCBub3QgdGhyb3dcIlxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgaC5hc3NlcnQgZXJyb3IubWVzc2FnZSA9PSBcImIyXCJcblxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSJdfQ==
 //# sourceURL=/@dashkite/talos/test/async/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9hc3luYy9iYXNpYy5jb2ZmZWUiLCI8YW5vbj4iXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCxcbiAgc3RhcnQsIHJ1biwgZmxvdyB9IGZyb20gXCIuLi8uLi9zcmMvYXN5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNSZWFjdG9yIHN0YXJ0IEFcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAxXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAyXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAzXG4gICAgICBdXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImZsb3cgZnVuY3Rpb25hbCBjb21wb3NpdGlvblwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSBhd2FpdCAyXG4gICAgICBiMiA9IC0+IGF3YWl0IG51bGw7IHRocm93IG5ldyBFcnJvciBcImIyXCJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgZiA9IGZsb3cgWyBhLCBiLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gYXdhaXQgZigpXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCBjb250ZXh0Py5zdW1cblxuICAgICAgZyA9IGZsb3cgWyBhLCBiLCBiMiwgYyBdXG4gICAgICB0cnlcbiAgICAgICAgYXdhaXQgZygpXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcImRpZCBub3QgdGhyb3dcIlxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgaC5hc3NlcnQgZXJyb3IubWVzc2FnZSA9PSBcImIyXCJcblxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSIsbnVsbF0sIm5hbWVzIjpbImJhc2ljIiwidGVzdCIsImFkZCIsImdyb3ciLCJ0YWxvcyIsImV2ZW50IiwiY29udGV4dCIsInN1bSIsInByb2R1Y3QiLCJBIiwiQiIsIk1hY2hpbmUiLCJtYWtlIiwic3RhcnQiLCJob2xkIiwicnVuIiwiZmlyc3QiLCJzZWNvbmQiLCJlbmQiLCJoIiwidGFyZ2V0IiwiYXNzZXJ0IiwiVHlwZSIsImlzUmVhY3RvciIsImV2ZW50cyIsInJlZiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXF1YWwiLCJhIiwiYiIsImIyIiwiYyIsImVycm9yIiwiZiIsImciLCJFcnJvciIsImZsb3ciLCJpc0Z1bmN0aW9uIiwiZXJyb3IxIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFxRVNBOzs7ZUFBQUM7Ozt1QkFyRVQ7OERBRUE7aUVBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFIQSxJQUFBQyxLQUFBQyxNQUFBRjtBQUtBQyxNQUFNLFNBQUVFLEtBQUYsRUFBU0MsS0FBVDtXQUNKRCxNQUFNRSxPQUFPLENBQUNDLEdBQWQsSUFBcUJGO0FBRGpCO0FBRU5GLE9BQU8sU0FBRUMsS0FBRjtXQUNMQSxNQUFNRSxPQUFPLENBQUNFLE9BQWQsSUFBeUI7QUFEcEI7QUFJUFAsT0FBTztJQUNQLElBQUFRLEdBQUFDO0lBQUVELElBQUlFLGNBQU8sQ0FBQ0MsSUFBUixDQUNGO1FBQUFDLE9BQ0U7WUFBQUMsTUFDRTtnQkFBQUMsS0FBS2I7WUFBTDtRQURGO1FBRUZZLE1BQ0U7WUFBQUEsTUFDRTtnQkFBQUMsS0FBS2I7WUFBTDtRQURGO0lBSkY7SUFPRlEsSUFBSUMsY0FBTyxDQUFDQyxJQUFSLENBQ0Y7UUFBQUMsT0FDRTtZQUFBRyxPQUNFO2dCQUFBRCxLQUFLWjtZQUFMO1FBREY7UUFFRmEsT0FD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