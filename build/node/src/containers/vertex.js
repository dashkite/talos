"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isState = exports.Vertex = void 0;
var Meta = _interopRequireWildcard(require("@dashkite/joy/metaclass"));
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var Value = _interopRequireWildcard(require("@dashkite/joy/value"));
var _generic = require("@dashkite/joy/generic");
var _helpers = require("../helpers.js");
var _index = require("./edge/index.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Vertex, _make, isState;
exports.isState = isState = (0, _helpers.oneOf)([Type.isString, Type.isSymbol]);
_make = function (type) {
  var make;
  make = (0, _generic.generic)({
    name: "vertex make",
    default: function (...args) {
      throw new Error(`Vertex.make: input is malformed ${JSON.stringify(args)}`);
    }
  });
  (0, _generic.generic)(make, isState, Type.isArray, function (state, edges) {
    var edge;
    return new Vertex({
      state: state,
      edges: function () {
        var i, len, results;
        results = [];
        for (i = 0, len = edges.length; i < len; i++) {
          edge = edges[i];
          results.push(_index.Edge.make(edge));
        }
        return results;
      }()
    });
  });
  (0, _generic.generic)(make, isState, Type.isObject, function (state, _vertex) {
    return make(state, _vertex.edges);
  });
  (0, _generic.generic)(make, isState, Type.isUndefined(function (state, _null) {
    return make(state, []);
  }));
  (0, _generic.generic)(make, isState, function (state) {
    return make(state, []);
  });
  (0, _generic.generic)(make, type.isType, function (vertex) {
    return vertex.clone();
  });
  (0, _generic.generic)(make, isState, type.isType, function (state, _vertex) {
    var vertex;
    vertex = _vertex.clone();
    vertex.state = state;
    return vertex;
  });
  return make;
};
exports.Vertex = Vertex = function () {
  class Vertex {
    constructor({
      state: state1,
      edges: edges1
    }) {
      this.state = state1;
      this.edges = edges1;
    }
    clone() {
      var edge, edges, state;
      state = Value.clone(this.state);
      edges = function () {
        var i, len, ref, results;
        ref = this.edges;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          edge = ref[i];
          results.push(edge.clone());
        }
        return results;
      }.call(this);
      return new Vertex({
        state,
        edges
      });
    }
  }
  ;
  Meta.mixin(Vertex.prototype, [Meta.getters({})]);
  Vertex.make = _make(Vertex);
  Vertex.isType = Type.isType(Vertex);
  return Vertex;
}.call(void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250YWluZXJzL3ZlcnRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQSxJQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxJQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQTtBQUFBLElBQUEsUUFBQSxHQUFBLE9BQUE7QUFBQSxJQUFBLE1BQUEsR0FBQSxPQUFBO0FBQUEsU0FBQSx5QkFBQSxDQUFBLDZCQUFBLE9BQUEsbUJBQUEsQ0FBQSxPQUFBLE9BQUEsSUFBQSxDQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQTtBQUFBLFNBQUEsd0JBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxVQUFBLFNBQUEsQ0FBQSxlQUFBLENBQUEsdUJBQUEsQ0FBQSx5QkFBQSxDQUFBLFdBQUEsT0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsd0JBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxTQUFBLFVBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsQ0FBQSxJQUFBLENBQUEsb0JBQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLHdCQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsVUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxD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TUFBRyxJQUFDLENBQUEsS0FBQSxHQUFBLE1BQUE7TUFBTyxJQUFDLENBQUEsS0FBQSxHQUFBLE1BQUE7SUFBWjtJQVNiLEtBQU8sQ0FBQSxFQUFBO01BQ1QsSUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUE7TUFBSSxLQUFBLEdBQVEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFDLENBQUEsS0FBYixDQUFBO01BQ1IsS0FBQSxHQUFBLFlBQUE7O1FBQVUsR0FBQSxHQUFBLElBQUEsQ0FBQSxLQUFBO1FBQUEsT0FBQSxHQUFBLEVBQUE7UUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxHQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQTs7dUJBQUEsSUFBSSxDQUFDLEtBQUwsQ0FBQSxDQUFBLENBQUE7UUFBQTs7O2FBQ1YsSUFBSSxNQUFKLENBQVc7UUFBRSxLQUFGO1FBQVM7TUFBVCxDQUFYLENBQUE7SUFISztFQVZUO0VBQUE7RUFHRSxJQUFJLENBQUMsS0FBTCxDQUFXLE1BQUMsQ0FBQSxTQUFaLEVBQWdCLENBQ2QsSUFBSSxDQUFDLE9BQUwsQ0FBYSxDQUFBLENBQWIsQ0FEYyxDQUFoQixDQUFBO0VBSUEsTUFBQyxDQUFBLElBQUQsR0FBTyxLQUFBLENBQU0sTUFBTixDQUFBO0VBQ1AsTUFBQyxDQUFBLE1BQUQsR0FBUyxJQUFJLENBQUMsTUFBTCxDQUFZLE1BQVosQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE1ldGEgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvbWV0YWNsYXNzXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBWYWx1ZSBmcm9tIFwiQGRhc2hraXRlL2pveS92YWx1ZVwiXG5pbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgeyBvbmVPZiB9IGZyb20gXCIuLi9oZWxwZXJzXCJcbmltcG9ydCB7IEVkZ2UgfSBmcm9tIFwiLi9lZGdlXCJcblxuXG5pc1N0YXRlID0gb25lT2YgW1xuICBUeXBlLmlzU3RyaW5nXG4gIFR5cGUuaXNTeW1ib2xcbl1cblxuX21ha2UgPSAoIHR5cGUgKSAtPlxuICBtYWtlID0gZ2VuZXJpYyBcbiAgICBuYW1lOiBcInZlcnRleCBtYWtlXCJcbiAgICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICAgIHRocm93IG5ldyBFcnJvciBcIlZlcnRleC5tYWtlOiBpbnB1dCBpcyBtYWxmb3JtZWQgI3tKU09OLnN0cmluZ2lmeSBhcmdzfVwiXG5cbiAgZ2VuZXJpYyBtYWtlLCBpc1N0YXRlLCBUeXBlLmlzQXJyYXksICggc3RhdGUsIGVkZ2VzICkgLT5cbiAgICBuZXcgVmVydGV4XG4gICAgICBzdGF0ZTogc3RhdGVcbiAgICAgIGVkZ2VzOiAoIEVkZ2UubWFrZSBlZGdlIGZvciBlZGdlIGluIGVkZ2VzIClcblxuICBnZW5lcmljIG1ha2UsIGlzU3RhdGUsIFR5cGUuaXNPYmplY3QsICggc3RhdGUsIF92ZXJ0ZXggKSAtPlxuICAgIG1ha2Ugc3RhdGUsIF92ZXJ0ZXguZWRnZXNcblxuICBnZW5lcmljIG1ha2UsIGlzU3RhdGUsIFR5cGUuaXNVbmRlZmluZWQgKCBzdGF0ZSwgX251bGwgKSAtPlxuICAgIG1ha2Ugc3RhdGUsIFtdXG5cbiAgZ2VuZXJpYyBtYWtlLCBpc1N0YXRlLCAoIHN0YXRlICkgLT5cbiAgICBtYWtlIHN0YXRlLCBbXVxuXG4gIGdlbmVyaWMgbWFrZSwgdHlwZS5pc1R5cGUsICggdmVydGV4ICkgLT5cbiAgICB2ZXJ0ZXguY2xvbmUoKVxuXG4gIGdlbmVyaWMgbWFrZSwgaXNTdGF0ZSwgdHlwZS5pc1R5cGUsICggc3RhdGUsIF92ZXJ0ZXggKSAtPlxuICAgIHZlcnRleCA9IF92ZXJ0ZXguY2xvbmUoKVxuICAgIHZlcnRleC5zdGF0ZSA9IHN0YXRlXG4gICAgdmVydGV4XG5cbiAgbWFrZVxuXG5cbmNsYXNzIFZlcnRleFxuICBjb25zdHJ1Y3RvcjogKHsgQHN0YXRlLCBAZWRnZXMgfSkgLT5cblxuICBNZXRhLm1peGluIEA6OiwgW1xuICAgIE1ldGEuZ2V0dGVycyB7fVxuICBdXG5cbiAgQG1ha2U6IF9tYWtlIEBcbiAgQGlzVHlwZTogVHlwZS5pc1R5cGUgQFxuXG4gIGNsb25lOiAtPlxuICAgIHN0YXRlID0gVmFsdWUuY2xvbmUgQHN0YXRlXG4gICAgZWRnZXMgPSAoIGVkZ2UuY2xvbmUoKSBmb3IgZWRnZSBpbiBAZWRnZXMgKVxuICAgIG5ldyBWZXJ0ZXggeyBzdGF0ZSwgZWRnZXMgfVxuXG5cbmV4cG9ydCB7XG4gIGlzU3RhdGVcbiAgVmVydGV4XG59Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=src/containers/vertex.coffee