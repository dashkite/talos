"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nameVertex = exports.isFunctionArray = exports.finished = exports.expand = exports.check = void 0;
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _states = require("../states.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var check, expand, finished, isFunctionArray, nameVertex;
exports.expand = expand = function (fx) {
  var current, f, graph, i, j, len, next;
  graph = {};
  for (i = j = 0, len = fx.length; j < len; i = ++j) {
    f = fx[i];
    current = i === 0 ? _states.$start : `${i}`;
    next = i === fx.length - 1 ? _states.$halt : `${i + 1}`;
    graph[current] = {
      name: f.name == null || f.name === "" ? `anonymous-${i}` : f.name,
      edges: [{
        accept: true,
        run: f,
        move: next
      }]
    };
  }
  return graph;
};
exports.check = check = function (talos) {
  if (talos.error != null) {
    throw talos.error.error;
  }
};
exports.isFunctionArray = isFunctionArray = function (fx) {
  var f, j, len;
  if (!Type.isArray(fx)) {
    return false;
  }
  for (j = 0, len = fx.length; j < len; j++) {
    f = fx[j];
    if (!Type.isFunction(f)) {
      return false;
    }
  }
  return true;
};
exports.nameVertex = nameVertex = function (vertex) {
  var name;
  name = vertex.metadata.name;
  if (Type.isSymbol(name)) {
    return `[Symbol ${name.toString()} ]`;
  } else {
    return name;
  }
};
exports.finished = finished = function (name) {
  return function (talos) {
    if (talos.failure) {
      console.error(`[ ${name} ] encountered error`, talos.error.error);
      return true;
    } else if (talos.success) {
      console.log(`[ ${name} ] graph traversal complete`, talos.context);
      return true;
    } else {
      return false;
    }
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saW5lYXIvaGVscGVycy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQSxJQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQTtBQUFBLFNBQUEseUJBQUEsQ0FBQSw2QkFBQSxPQUFBLG1CQUFBLENBQUEsT0FBQSxPQUFBLElBQUEsQ0FBQSxPQUFBLE9BQUEsWUFBQSx3QkFBQSxZQUFBLENBQUEsQ0FBQSxXQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUE7QUFBQSxTQUFBLHdCQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsVUFBQSxTQUFBLENBQUEsZUFBQSxDQUFBLHVCQUFBLENBQUEseUJBQUEsQ0FBQSxXQUFBLE9BQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLHdCQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsU0FBQSxVQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLENBQUEsSUFBQSxDQUFBLG9CQUFBLENBQUEsSUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsWUFBQSxDQUFBLENBQUEsT0FBQSxH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LElBQUEsNkJBQVosRUFBc0QsS0FBSyxDQUFDLE9BQTVELENBQUE7YUFDQSxJQUZHO0tBQUEsTUFBQTthQUlILEtBSkc7O0VBSlAsQ0FBQTtBQURTLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgJHN0YXJ0LCAkaGFsdCB9IGZyb20gXCIuLi9zdGF0ZXNcIlxuXG5cbmV4cGFuZCA9ICggZnggKSAtPlxuICBncmFwaCA9IHt9ICAgIFxuICBmb3IgZiwgaSBpbiBmeFxuICAgIGN1cnJlbnQgPSBpZiBpID09IDAgdGhlbiAkc3RhcnQgZWxzZSBcIiN7IGkgfVwiXG4gICAgbmV4dCA9IGlmIGkgPT0gZngubGVuZ3RoIC0gMSB0aGVuICRoYWx0IGVsc2UgXCIjeyBpICsgMSB9XCJcblxuICAgIGdyYXBoWyBjdXJyZW50IF0gPSBcbiAgICAgIG5hbWU6IGlmICFmLm5hbWU/IHx8IGYubmFtZSA9PSBcIlwiIHRoZW4gXCJhbm9ueW1vdXMtI3sgaSB9XCIgZWxzZSBmLm5hbWVcbiAgICAgIGVkZ2VzOiBbXG4gICAgICAgIGFjY2VwdDogdHJ1ZVxuICAgICAgICBydW46IGZcbiAgICAgICAgbW92ZTogbmV4dFxuICAgICAgXSBcbiAgXG4gIGdyYXBoXG5cbmNoZWNrID0gKCB0YWxvcyApIC0+XG4gIGlmIHRhbG9zLmVycm9yP1xuICAgIHRocm93IHRhbG9zLmVycm9yLmVycm9yXG5cbmlzRnVuY3Rpb25BcnJheSA9ICggZnggKSAtPlxuICBpZiAhIFR5cGUuaXNBcnJheSBmeFxuICAgIHJldHVybiBmYWxzZVxuICBmb3IgZiBpbiBmeFxuICAgIHJldHVybiBmYWxzZSBpZiAhIFR5cGUuaXNGdW5jdGlvbiBmXG4gIHRydWVcblxuXG5uYW1lVmVydGV4ID0gKCB2ZXJ0ZXggKSAtPlxuICBuYW1lID0gdmVydGV4Lm1ldGFkYXRhLm5hbWVcbiAgaWYgVHlwZS5pc1N5bWJvbCBuYW1lXG4gICAgXCJbU3ltYm9sICN7IG5hbWUudG9TdHJpbmcoKSB9IF1cIlxuICBlbHNlXG4gICAgbmFtZVxuXG5maW5pc2hlZCA9ICggbmFtZSApIC0+XG4gICggdGFsb3MgKSAtPlxuICAgIGlmIHRhbG9zLmZhaWx1cmVcbiAgICAgIGNvbnNvbGUuZXJyb3IgXCJbICN7IG5hbWUgfSBdIGVuY291bnRlcmVkIGVycm9yXCIsIHRhbG9zLmVycm9yLmVycm9yXG4gICAgICB0cnVlXG4gICAgZWxzZSBpZiB0YWxvcy5zdWNjZXNzXG4gICAgICBjb25zb2xlLmxvZyBcIlsgI3sgbmFtZSB9IF0gZ3JhcGggdHJhdmVyc2FsIGNvbXBsZXRlXCIsIHRhbG9zLmNvbnRleHRcbiAgICAgIHRydWVcbiAgICBlbHNlXG4gICAgICBmYWxzZVxuXG5cbmV4cG9ydCB7XG4gIGV4cGFuZFxuICBjaGVja1xuICBpc0Z1bmN0aW9uQXJyYXlcbiAgbmFtZVZlcnRleFxuICBmaW5pc2hlZFxufSJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=src/linear/helpers.coffee