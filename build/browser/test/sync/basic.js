var add, grow, test;
import { Machine, Talos, $start, $end } from "../../src";
import { start, run } from "../../src/sync";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        h.test("start", h.target("sync", function() {
            var cycle;
            cycle = start(A);
            return h.assert(Type.isIterator(cycle));
        })),
        h.test("run while consuming events", h.target("sync", function() {
            var events, ref, talos;
            events = [
                1,
                2,
                3
            ];
            talos = run(A, {
                sum: 0
            }, events);
            return h.assert.equal(6, talos != null ? (ref = talos.context) != null ? ref.sum : void 0 : void 0);
        })),
        h.test("run without events and reconsume context", h.target("sync", function() {
            var ref, talos;
            talos = run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("functional composition", h.target("sync", function() {
            var a, b, c, ref, talos;
            a = function(talos) {
                return talos.context.sum = 1;
            };
            b = function(talos) {
                return talos.context.sum += 2;
            };
            c = function(talos) {
                return talos.context.sum += 3;
            };
            talos = run([
                a,
                b,
                c
            ]);
            return h.assert.equal(6, talos != null ? (ref = talos.context) != null ? ref.sum : void 0 : void 0);
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9zeW5jL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsS0FBbEI7RUFBeUIsTUFBekI7RUFBaUMsSUFBakM7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0VBQWdCLEdBQWhCO0NBQUEsTUFBQTs7QUFDQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxLQUFQLE1BQUE7O0FBRUEsR0FBQSxHQUFNLFFBQUEsQ0FBRSxLQUFGLEVBQVMsS0FBVCxDQUFBO1NBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFkLElBQXFCO0FBRGpCOztBQUVOLElBQUEsR0FBTyxRQUFBLENBQUUsS0FBRixDQUFBO1NBQ0wsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFkLElBQXlCO0FBRHBCOztBQUlQLElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQTtBQUNQLE1BQUEsQ0FBQSxFQUFBO0VBQUUsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQ0Y7SUFBQSxLQUFBLEVBQ0U7TUFBQSxJQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBREY7SUFHQSxJQUFBLEVBQ0U7TUFBQSxJQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGO0VBSkYsQ0FERTtFQVFKLENBQUEsR0FBSSxPQUFPLENBQUMsSUFBUixDQUNGO0lBQUEsS0FBQSxFQUNFO01BQUEsS0FBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERixDQURGO0lBR0EsS0FBQSxFQUNFO01BQUEsTUFBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERixDQUpGO0lBTUEsTUFBQSxFQUNFO01BQUEsR0FBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERjtFQVBGLENBREU7U0FZSjtJQUNFLENBQUMsQ0FBQyxJQUFGLENBQU8sT0FBUDtJQUFnQixDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQ7SUFBaUIsUUFBQSxDQUFBLENBQUE7QUFDckMsVUFBQTtNQUFNLEtBQUEsR0FBUSxLQUFBLENBQU0sQ0FBTjthQUNSLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBSSxDQUFDLFVBQUwsQ0FBZ0IsS0FBaEIsQ0FBVDtJQUYrQixDQUFqQixDQUFoQixDQURGO0lBS0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyw0QkFBUDtJQUFxQyxDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQ7SUFBaUIsUUFBQSxDQUFBLENBQUE7QUFDMUQsVUFBQSxNQUFBO0lBQUEsR0FBQTtJQUFBO01BQU0sTUFBQSxHQUFTLENBQUUsQ0FBRjtJQUFLLENBQUw7SUFBUSxDQUFSO01BQ1QsS0FBQSxHQUFRLEdBQUEsQ0FBSSxDQUFKO0lBQU87UUFBQSxHQUFBLEVBQUs7TUFBTCxDQUFQO0lBQWUsTUFBZjthQUNSLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQWY7dURBQWdDLENBQUUscUJBQWxDO0lBSG9ELENBQWpCLENBQXJDLENBTEY7SUFVRSxDQUFDLENBQUMsSUFBRixDQUFPLDBDQUFQO0lBQW1ELENBQUMsQ0FBQyxNQUFGLENBQVMsTUFBVDtJQUFpQixRQUFBLENBQUEsQ0FBQTtBQUN4RSxVQUFBLEdBQUE7SUFBQTtNQUFNLEtBQUEsR0FBUSxHQUFBLENBQUksQ0FBSjtJQUFPO1FBQUEsT0FBQSxFQUFTO01BQVQsQ0FBUDthQUNSLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQWY7dUNBQStCLENBQUUsZ0JBQWpDO0lBRmtFLENBQWpCLENBQW5ELENBVkY7SUFjRSxDQUFDLENBQUMsSUFBRixDQUFPLHdCQUFQO0lBQWlDLENBQUMsQ0FBQyxNQUFGLENBQVMsTUFBVDtJQUFpQixRQUFBLENBQUEsQ0FBQTtBQUN0RCxVQUFBLENBQUE7SUFBQSxDQUFBO0lBQUEsQ0FBQTtJQUFBLEdBQUE7SUFBQTtNQUFNLENBQUEsR0FBSSxRQUFBLENBQUUsS0FBRixDQUFBO2VBQWEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFkLEdBQW9CO01BQWpDO01BQ0osQ0FBQSxHQUFJLFFBQUEsQ0FBRSxLQUFGLENBQUE7ZUFBYSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsSUFBcUI7TUFBbEM7TUFDSixDQUFBLEdBQUksUUFBQSxDQUFFLEtBQUYsQ0FBQTtlQUFhLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBZCxJQUFxQjtNQUFsQztNQUVKLEtBQUEsR0FBUSxHQUFBLENBQUksQ0FBRSxDQUFGO0lBQUssQ0FBTDtJQUFRLENBQVIsQ0FBSjthQUNSLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQWY7dURBQWdDLENBQUUscUJBQWxDO0lBTmdELENBQWpCLENBQWpDLENBZEY7O0FBckJLOztBQTZDUCxPQUFBO0VBQVMsSUFBQSxTQUFUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0IHsgc3RhcnQsIHJ1biB9IGZyb20gXCIuLi8uLi9zcmMvc3luY1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbmFkZCA9ICggdGFsb3MsIGV2ZW50ICkgLT5cbiAgdGFsb3MuY29udGV4dC5zdW0gKz0gZXZlbnRcbmdyb3cgPSAoIHRhbG9zICkgLT5cbiAgdGFsb3MuY29udGV4dC5wcm9kdWN0ICo9IDJcblxuXG50ZXN0ID0gLT5cbiAgQSA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBjeWNsZSA9IHN0YXJ0IEFcbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNJdGVyYXRvciBjeWNsZVxuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIGNvbnN1bWluZyBldmVudHNcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBldmVudHMgPSBbIDEsIDIsIDMgXVxuICAgICAgdGFsb3MgPSBydW4gQSwgc3VtOiAwLCBldmVudHNcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIHRhbG9zPy5jb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcInJ1biB3aXRob3V0IGV2ZW50cyBhbmQgcmVjb25zdW1lIGNvbnRleHRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IHJ1biBCLCBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJmdW5jdGlvbmFsIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMlxuICAgICAgYyA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSAzIFxuICAgICAgXG4gICAgICB0YWxvcyA9IHJ1biBbIGEsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3M/LmNvbnRleHQ/LnN1bVxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBiYXNpYyB9Il19
 //# sourceURL=test/sync/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc3luYy9iYXNpYy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0IHsgc3RhcnQsIHJ1biB9IGZyb20gXCIuLi8uLi9zcmMvc3luY1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbmFkZCA9ICggdGFsb3MsIGV2ZW50ICkgLT5cbiAgdGFsb3MuY29udGV4dC5zdW0gKz0gZXZlbnRcbmdyb3cgPSAoIHRhbG9zICkgLT5cbiAgdGFsb3MuY29udGV4dC5wcm9kdWN0ICo9IDJcblxuXG50ZXN0ID0gLT5cbiAgQSA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBjeWNsZSA9IHN0YXJ0IEFcbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNJdGVyYXRvciBjeWNsZVxuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIGNvbnN1bWluZyBldmVudHNcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBldmVudHMgPSBbIDEsIDIsIDMgXVxuICAgICAgdGFsb3MgPSBydW4gQSwgc3VtOiAwLCBldmVudHNcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIHRhbG9zPy5jb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcInJ1biB3aXRob3V0IGV2ZW50cyBhbmQgcmVjb25zdW1lIGNvbnRleHRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IHJ1biBCLCBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJmdW5jdGlvbmFsIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMlxuICAgICAgYyA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSAzIFxuICAgICAgXG4gICAgICB0YWxvcyA9IHJ1biBbIGEsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3M/LmNvbnRleHQ/LnN1bVxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBiYXNpYyB9Il0sIm5hbWVzIjpbImFkZCIsImdyb3ciLCJ0ZXN0IiwiTWFjaGluZSIsIlRhbG9zIiwiJHN0YXJ0IiwiJGVuZCIsInN0YXJ0IiwicnVuIiwiVHlwZSIsImgiLCJ0YWxvcyIsImV2ZW50IiwiY29udGV4dCIsInN1bSIsInByb2R1Y3QiLCJBIiwiQiIsIm1ha2UiLCJob2xkIiwiZmlyc3QiLCJzZWNvbmQiLCJlbmQiLCJ0YXJnZXQiLCJjeWNsZSIsImFzc2VydCIsImlzSXRlcmF0b3IiLCJldmVudHMiLCJyZWYiLCJlcXVhbCIsImEiLCJiIiwiYyIsImJhc2ljIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSxLQUFBQyxNQUFBQztBQUFBLFNBQVNDLE9BQVQsRUFBa0JDLEtBQWxCLEVBQXlCQyxNQUF6QixFQUFpQ0MsSUFBakMsUUFBQSxZQUFBO0FBQ0EsU0FBU0MsS0FB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