"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isState = exports.Vertex = void 0;
var Meta = _interopRequireWildcard(require("@dashkite/joy/metaclass"));
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var Value = _interopRequireWildcard(require("@dashkite/joy/value"));
var _generic = require("@dashkite/joy/generic");
var _helpers = require("../helpers.js");
var _index = require("./edge/index.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Vertex, _create, isState;
exports.isState = isState = (0, _helpers.oneOf)([Type.isString, Type.isSymbol]);
_create = function (type) {
  var create;
  create = (0, _generic.generic)({
    name: "vertex create",
    default: function (...args) {
      throw new Error(`Vertex.create: input is malformed ${JSON.stringify(args)}`);
    }
  });
  (0, _generic.generic)(create, isState, Type.isArray, function (state, edges) {
    var edge;
    return new Vertex({
      state: state,
      edges: function () {
        var i, len, results;
        results = [];
        for (i = 0, len = edges.length; i < len; i++) {
          edge = edges[i];
          results.push(_index.Edge.create(edge));
        }
        return results;
      }()
    });
  });
  (0, _generic.generic)(create, isState, Type.isObject, function (state, _vertex) {
    return create(state, _vertex.edges);
  });
  (0, _generic.generic)(create, isState, Type.isUndefined(function (state, _null) {
    return create(state, []);
  }));
  (0, _generic.generic)(create, isState, function (state) {
    return create(state, []);
  });
  (0, _generic.generic)(create, type.isType, function (vertex) {
    return vertex.clone();
  });
  (0, _generic.generic)(create, isState, type.isType, function (state, _vertex) {
    var vertex;
    vertex = _vertex.clone();
    vertex.state = state;
    return vertex;
  });
  return create;
};
exports.Vertex = Vertex = function () {
  class Vertex {
    constructor({
      state: state1,
      edges: edges1
    }) {
      this.state = state1;
      this.edges = edges1;
    }
    clone() {
      var edge, edges, state;
      state = Value.clone(this.state);
      edges = function () {
        var i, len, ref, results;
        ref = this.edges;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          edge = ref[i];
          results.push(edge.clone());
        }
        return results;
      }.call(this);
      return new Vertex({
        state,
        edges
      });
    }
  }
  ;
  Meta.mixin(Vertex.prototype, [Meta.getters({})]);
  Vertex.create = _create(Vertex);
  Vertex.isType = Type.isType(Vertex);
  return Vertex;
}.call(void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250YWluZXJzL3ZlcnRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQSxJQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxJQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQTtBQUFBLElBQUEsUUFBQSxHQUFBLE9BQUE7QUFBQSxJQUFBLE1BQUEsR0FBQSxPQUFBO0FBQUEsU0FBQSx5QkFBQSxDQUFBLDZCQUFBLE9BQUEsbUJBQUEsQ0FBQSxPQUFBLE9BQUEsSUFBQSxDQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQTtBQUFBLFNBQUEsd0JBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxVQUFBLFNBQUEsQ0FBQSxlQUFBLENBQUEsdUJBQUEsQ0FBQSx5QkFBQSxDQUFBLFdBQUEsT0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsd0JBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxTQUFBLFVBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsQ0FBQSxJQUFBLENBQUEsb0JBQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLHdCQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsVUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxD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LENBQUQsRUFBQTtNQUFHLElBQUMsQ0FBQSxLQUFBLEdBQUEsTUFBQTtNQUFPLElBQUMsQ0FBQSxLQUFBLEdBQUEsTUFBQTtJQUFaO0lBU2IsS0FBTyxDQUFBLEVBQUE7TUFDVCxJQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQTtNQUFJLEtBQUEsR0FBUSxLQUFLLENBQUMsS0FBTixDQUFZLElBQUMsQ0FBQSxLQUFiLENBQUE7TUFDUixLQUFBLEdBQUEsWUFBQTs7UUFBVSxHQUFBLEdBQUEsSUFBQSxDQUFBLEtBQUE7UUFBQSxPQUFBLEdBQUEsRUFBQTtRQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxHQUFBLEdBQUEsR0FBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLEdBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBOzt1QkFBQSxJQUFJLENBQUMsS0FBTCxDQUFBLENBQUEsQ0FBQTtRQUFBOzs7YUFDVixJQUFJLE1BQUosQ0FBVztRQUFFLEtBQUY7UUFBUztNQUFULENBQVgsQ0FBQTtJQUhLO0VBVlQ7RUFBQTtFQUdFLElBQUksQ0FBQyxLQUFMLENBQVcsTUFBQyxDQUFBLFNBQVosRUFBZ0IsQ0FDZCxJQUFJLENBQUMsT0FBTCxDQUFhLENBQUEsQ0FBYixDQURjLENBQWhCLENBQUE7RUFJQSxNQUFDLENBQUEsTUFBRCxHQUFTLE9BQUEsQ0FBUSxNQUFSLENBQUE7RUFDVCxNQUFDLENBQUEsTUFBRCxHQUFTLElBQUksQ0FBQyxNQUFMLENBQVksTUFBWixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTWV0YSBmcm9tIFwiQGRhc2hraXRlL2pveS9tZXRhY2xhc3NcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIFZhbHVlIGZyb20gXCJAZGFzaGtpdGUvam95L3ZhbHVlXCJcbmltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcbmltcG9ydCB7IG9uZU9mIH0gZnJvbSBcIi4uL2hlbHBlcnNcIlxuaW1wb3J0IHsgRWRnZSB9IGZyb20gXCIuL2VkZ2VcIlxuXG5cbmlzU3RhdGUgPSBvbmVPZiBbXG4gIFR5cGUuaXNTdHJpbmdcbiAgVHlwZS5pc1N5bWJvbFxuXVxuXG5fY3JlYXRlID0gKCB0eXBlICkgLT5cbiAgY3JlYXRlID0gZ2VuZXJpYyBcbiAgICBuYW1lOiBcInZlcnRleCBjcmVhdGVcIlxuICAgIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgICAgdGhyb3cgbmV3IEVycm9yIFwiVmVydGV4LmNyZWF0ZTogaW5wdXQgaXMgbWFsZm9ybWVkICN7SlNPTi5zdHJpbmdpZnkgYXJnc31cIlxuXG4gIGdlbmVyaWMgY3JlYXRlLCBpc1N0YXRlLCBUeXBlLmlzQXJyYXksICggc3RhdGUsIGVkZ2VzICkgLT5cbiAgICBuZXcgVmVydGV4XG4gICAgICBzdGF0ZTogc3RhdGVcbiAgICAgIGVkZ2VzOiAoIEVkZ2UuY3JlYXRlIGVkZ2UgZm9yIGVkZ2UgaW4gZWRnZXMgKVxuXG4gIGdlbmVyaWMgY3JlYXRlLCBpc1N0YXRlLCBUeXBlLmlzT2JqZWN0LCAoIHN0YXRlLCBfdmVydGV4ICkgLT5cbiAgICBjcmVhdGUgc3RhdGUsIF92ZXJ0ZXguZWRnZXNcblxuICBnZW5lcmljIGNyZWF0ZSwgaXNTdGF0ZSwgVHlwZS5pc1VuZGVmaW5lZCAoIHN0YXRlLCBfbnVsbCApIC0+XG4gICAgY3JlYXRlIHN0YXRlLCBbXVxuXG4gIGdlbmVyaWMgY3JlYXRlLCBpc1N0YXRlLCAoIHN0YXRlICkgLT5cbiAgICBjcmVhdGUgc3RhdGUsIFtdXG5cbiAgZ2VuZXJpYyBjcmVhdGUsIHR5cGUuaXNUeXBlLCAoIHZlcnRleCApIC0+XG4gICAgdmVydGV4LmNsb25lKClcblxuICBnZW5lcmljIGNyZWF0ZSwgaXNTdGF0ZSwgdHlwZS5pc1R5cGUsICggc3RhdGUsIF92ZXJ0ZXggKSAtPlxuICAgIHZlcnRleCA9IF92ZXJ0ZXguY2xvbmUoKVxuICAgIHZlcnRleC5zdGF0ZSA9IHN0YXRlXG4gICAgdmVydGV4XG5cbiAgY3JlYXRlXG5cblxuY2xhc3MgVmVydGV4XG4gIGNvbnN0cnVjdG9yOiAoeyBAc3RhdGUsIEBlZGdlcyB9KSAtPlxuXG4gIE1ldGEubWl4aW4gQDo6LCBbXG4gICAgTWV0YS5nZXR0ZXJzIHt9XG4gIF1cblxuICBAY3JlYXRlOiBfY3JlYXRlIEBcbiAgQGlzVHlwZTogVHlwZS5pc1R5cGUgQFxuXG4gIGNsb25lOiAtPlxuICAgIHN0YXRlID0gVmFsdWUuY2xvbmUgQHN0YXRlXG4gICAgZWRnZXMgPSAoIGVkZ2UuY2xvbmUoKSBmb3IgZWRnZSBpbiBAZWRnZXMgKVxuICAgIG5ldyBWZXJ0ZXggeyBzdGF0ZSwgZWRnZXMgfVxuXG5cbmV4cG9ydCB7XG4gIGlzU3RhdGVcbiAgVmVydGV4XG59Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=src/containers/vertex.coffee