var A, B, C, target, test;
import { Machine } from "../../src";
import * as h from "../helpers";
import util from "node:util";
A = function() {
    return "beta";
};
B = function() {
    return "gamma";
};
C = function() {
    return "delta";
};
target = [
    {
        when: A
    }
];
test = function() {
    return [
        h.test("edge expansion", h.target("edge", function() {
            var machine;
            machine = Machine.make({
                start: {
                    beta: true
                },
                beta: {
                    ignore: false,
                    gamma: "gamma"
                },
                gamma: {
                    delta: function(talos, event) {
                        return event === "delta";
                    }
                },
                delta: {
                    epsilon: {
                        when: "epsilon",
                        move: "omicron"
                    }
                },
                ignore: {
                    doesnt: "matter"
                },
                omicron: [
                    {
                        when: false,
                        move: "eta"
                    },
                    {
                        when: true,
                        move: "rho"
                    }
                ],
                rho: function(x) {
                    return console.log("running default");
                }
            });
            return console.log(util.inspect(machine, {
                depth: null,
                colors: true
            }));
        }))
    ];
};
export { // console.log machine
test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9tYWNoaW5lL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQTs7QUFBQSxPQUFBO0VBQVMsT0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFDQSxPQUFPLElBQVAsTUFBQTs7QUFFQSxDQUFBLEdBQUksUUFBQSxDQUFBLENBQUE7U0FBRztBQUFIOztBQUNKLENBQUEsR0FBSSxRQUFBLENBQUEsQ0FBQTtTQUFHO0FBQUg7O0FBQ0osQ0FBQSxHQUFJLFFBQUEsQ0FBQSxDQUFBO1NBQUc7QUFBSDs7QUFFSixNQUFBLEdBQVM7RUFDTDtJQUFBLElBQUEsRUFBTTtFQUFOLENBREs7OztBQUtULElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQTtTQUNMO0lBQ0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxnQkFBUDtJQUF5QixDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQ7SUFBaUIsUUFBQSxDQUFBLENBQUE7QUFDOUMsVUFBQTtNQUFNLE9BQUEsR0FBVSxPQUFPLENBQUMsSUFBUixDQUNSO1FBQUEsS0FBQSxFQUNFO1VBQUEsSUFBQSxFQUFNO1FBQU4sQ0FERjtRQUVBLElBQUEsRUFDRTtVQUFBLE1BQUEsRUFBUSxLQUFSO1VBQ0EsS0FBQSxFQUFPO1FBRFAsQ0FIRjtRQUtBLEtBQUEsRUFDRTtVQUFBLEtBQUEsRUFBTyxRQUFBLENBQUUsS0FBRjtJQUFTLEtBQVQsQ0FBQTttQkFBb0IsS0FBQSxLQUFTO1VBQTdCO1FBQVAsQ0FORjtRQU9BLEtBQUEsRUFDRTtVQUFBLE9BQUEsRUFDRTtZQUFBLElBQUEsRUFBTSxTQUFOO1lBQ0EsSUFBQSxFQUFNO1VBRE47UUFERixDQVJGO1FBV0EsTUFBQSxFQUNFO1VBQUEsTUFBQSxFQUFRO1FBQVIsQ0FaRjtRQWFBLE9BQUEsRUFBUztVQUNMO1lBQUEsSUFBQSxFQUFNLEtBQU47WUFDQSxJQUFBLEVBQU07VUFETixDQURLO1VBSUw7WUFBQSxJQUFBLEVBQU0sSUFBTjtZQUNBLElBQUEsRUFBTTtVQUROLENBSks7U0FiVDtRQW9CQSxHQUFBLEVBQUssUUFBQSxDQUFFLENBQUYsQ0FBQTtpQkFBUyxPQUFPLENBQUMsR0FBUixDQUFZLGlCQUFaO1FBQVQ7TUFwQkwsQ0FEUTthQXVCVixPQUFPLENBQUMsR0FBUixDQUFZLElBQUksQ0FBQyxPQUFMLENBQWEsT0FBYjtJQUFzQjtRQUFBLEtBQUEsRUFBTyxJQUFQO1FBQWEsTUFBQSxFQUFRO01BQXJCLENBQXRCLENBQVo7SUF4QndDLENBQWpCLENBQXpCLENBREY7O0FBREs7O0FBZ0NQLE9BQUE7O0VBQVMsSUFBQSxTQUFUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5pbXBvcnQgdXRpbCBmcm9tIFwibm9kZTp1dGlsXCJcblxuQSA9IC0+IFwiYmV0YVwiXG5CID0gLT4gXCJnYW1tYVwiXG5DID0gLT4gXCJkZWx0YVwiXG5cbnRhcmdldCA9IFtcbiAgICB3aGVuOiBBXG5dXG5cblxudGVzdCA9IC0+XG4gIFtcbiAgICBoLnRlc3QgXCJlZGdlIGV4cGFuc2lvblwiLCBoLnRhcmdldCBcImVkZ2VcIiwgLT5cbiAgICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2VcbiAgICAgICAgc3RhcnQ6XG4gICAgICAgICAgYmV0YTogdHJ1ZVxuICAgICAgICBiZXRhOlxuICAgICAgICAgIGlnbm9yZTogZmFsc2VcbiAgICAgICAgICBnYW1tYTogXCJnYW1tYVwiXG4gICAgICAgIGdhbW1hOlxuICAgICAgICAgIGRlbHRhOiAoIHRhbG9zLCBldmVudCApIC0+IGV2ZW50ID09IFwiZGVsdGFcIlxuICAgICAgICBkZWx0YTpcbiAgICAgICAgICBlcHNpbG9uOlxuICAgICAgICAgICAgd2hlbjogXCJlcHNpbG9uXCJcbiAgICAgICAgICAgIG1vdmU6IFwib21pY3JvblwiXG4gICAgICAgIGlnbm9yZTpcbiAgICAgICAgICBkb2VzbnQ6IFwibWF0dGVyXCJcbiAgICAgICAgb21pY3JvbjogW1xuICAgICAgICAgICAgd2hlbjogZmFsc2VcbiAgICAgICAgICAgIG1vdmU6IFwiZXRhXCJcbiAgICAgICAgICAsXG4gICAgICAgICAgICB3aGVuOiB0cnVlXG4gICAgICAgICAgICBtb3ZlOiBcInJob1wiXG4gICAgICAgIF1cbiAgICAgICAgcmhvOiAoIHggKSAtPiBjb25zb2xlLmxvZyBcInJ1bm5pbmcgZGVmYXVsdFwiXG5cbiAgICAgIGNvbnNvbGUubG9nIHV0aWwuaW5zcGVjdCBtYWNoaW5lLCBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlXG4gICAgICAjIGNvbnNvbGUubG9nIG1hY2hpbmVcbiAgICAgICAgXG5cbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXX0=
 //# sourceURL=test/machine/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbWFjaGluZS9iYXNpYy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5pbXBvcnQgdXRpbCBmcm9tIFwibm9kZTp1dGlsXCJcblxuQSA9IC0+IFwiYmV0YVwiXG5CID0gLT4gXCJnYW1tYVwiXG5DID0gLT4gXCJkZWx0YVwiXG5cbnRhcmdldCA9IFtcbiAgICB3aGVuOiBBXG5dXG5cblxudGVzdCA9IC0+XG4gIFtcbiAgICBoLnRlc3QgXCJlZGdlIGV4cGFuc2lvblwiLCBoLnRhcmdldCBcImVkZ2VcIiwgLT5cbiAgICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2VcbiAgICAgICAgc3RhcnQ6XG4gICAgICAgICAgYmV0YTogdHJ1ZVxuICAgICAgICBiZXRhOlxuICAgICAgICAgIGlnbm9yZTogZmFsc2VcbiAgICAgICAgICBnYW1tYTogXCJnYW1tYVwiXG4gICAgICAgIGdhbW1hOlxuICAgICAgICAgIGRlbHRhOiAoIHRhbG9zLCBldmVudCApIC0+IGV2ZW50ID09IFwiZGVsdGFcIlxuICAgICAgICBkZWx0YTpcbiAgICAgICAgICBlcHNpbG9uOlxuICAgICAgICAgICAgd2hlbjogXCJlcHNpbG9uXCJcbiAgICAgICAgICAgIG1vdmU6IFwib21pY3JvblwiXG4gICAgICAgIGlnbm9yZTpcbiAgICAgICAgICBkb2VzbnQ6IFwibWF0dGVyXCJcbiAgICAgICAgb21pY3JvbjogW1xuICAgICAgICAgICAgd2hlbjogZmFsc2VcbiAgICAgICAgICAgIG1vdmU6IFwiZXRhXCJcbiAgICAgICAgICAsXG4gICAgICAgICAgICB3aGVuOiB0cnVlXG4gICAgICAgICAgICBtb3ZlOiBcInJob1wiXG4gICAgICAgIF1cbiAgICAgICAgcmhvOiAoIHggKSAtPiBjb25zb2xlLmxvZyBcInJ1bm5pbmcgZGVmYXVsdFwiXG5cbiAgICAgIGNvbnNvbGUubG9nIHV0aWwuaW5zcGVjdCBtYWNoaW5lLCBkZXB0aDogbnVsbCwgY29sb3JzOiB0cnVlXG4gICAgICAjIGNvbnNvbGUubG9nIG1hY2hpbmVcbiAgICAgICAgXG5cbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXSwibmFtZXMiOlsiQSIsIkIiLCJDIiwidGFyZ2V0IiwidGVzdCIsIk1hY2hpbmUiLCJoIiwidXRpbCIsIndoZW4iLCJtYWNoaW5lIiwibWFrZSIsInN0YXJ0IiwiYmV0YSIsImlnbm9yZSIsImdhbW1hIiwiZGVsdGEiLCJ0YWxvcyIsImV2ZW50IiwiZXBzaWxvbiIsIm1vdmUiLCJkb2VzbnQiLCJvbWljcm9uIiwicmhvIiwieCIsImNvbnNvbGUiLCJsb2ciLCJpbnNwZWN0IiwiZGVwdGgiLCJjb2xvcnMiLCJiYXNpYyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUEsR0FBQUMsR0FBQUMsR0FBQUMsUUFBQUM7QUFBQSxTQUFTQyxPQUFULFFBQUEsWUFBQTtBQUNBLFlBQU9DLE9BQVAsYUFBQTtBQUNBLE9BQU9DLFVBQVAsWUFBQTtBQUVBUCxJQUFJO1dBQUc7QUFBSDtBQUNKQyxJQUFJO1dBQUc7QUFBSDtBQUNKQyxJQUFJO1dBQUc7QUFBSDtBQUVKQyxTQUFTO0lBQ0w7UUFBQUssTUFBTVI7SUFBTjs7QUFJSkksT0FBTztXQUNMO1FBQ0VFLEVBQUVGLElBQUYsQ0FBTyxrQkFBa0JFLEVBQUVILE1BQUYsQ0FBUyxRQUFRO1lBQzlDLElBQUFNO1lBQU1BLFVBQVVKLFFBQVFLLElBQVIsQ0FDUjtnQkFBQUMsT0FDRTtvQkFBQUMsTUFBTTtnQkFBTjtnQkFDRkEsTUFDRTtvQkFBQUMsUUFBUTtvQkFDUkMsT0FBTztnQkFEUDtnQkFFRkEsT0FDRTtvQkFBQUMsT0FBTyxTQUFFQyxLQUFGLEVBQVNDLEtBQVQ7K0JBQW9CQSxVQUFTO29CQUE3QjtnQkFBUDtnQkFDRkYsT0FDRTtvQkFBQUcsU0FDRTt3QkFBQVYsTUFBTTt3QkFDTlcsTUFBTTtvQkFETjtnQkFERjtnQkFHRk4sUUFDRTtvQkFBQU8sUUFBUTtnQkFBUjtnQkFDRkMsU0FBUztvQkFDTDt3QkFBQWIsTUFBTTt3QkFDTlcsTUFBTTtvQkFETjtvQkFHQTt3QkFBQVgsTUFBTTt3QkFDTlcsTUFBTTtvQkFETjtpQkFqQko7Z0JBb0JBRyxLQUFLLFNBQUVDLENBQUY7MkJBQVNDLFFBQVFDLEdBQVIsQ0FBWTtnQkFBckI7WUFwQkw7bUJBc0JGRCxRQUFRQyxHQUFSLENBQVlsQixLQUFLbUIsT0FBTCxDQUFhakIsU0FBUztnQkFBQWtCLE9BQU87Z0JBQU1DLFFBQVE7WUFBckI7UUF4Qk07O0FBRnZDO0FBZ0NQO0FBQVN4QixRQUFBeUIsS0FBVCJ9