"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "basic", {
    enumerable: true,
    get: function() {
        return test;
    }
});
const _async = require("../../src/async");
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _helpers = /*#__PURE__*/ _interop_require_wildcard(require("../helpers"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var add, grow, test;
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = async function(talos) {
    return talos.context.product *= await 2;
};
test = function() {
    var A, B;
    A = _async.Machine.make({
        graph: {
            start: {
                hold: {
                    run: add
                }
            },
            hold: {
                hold: {
                    run: add
                }
            }
        }
    });
    B = _async.Machine.make({
        graph: {
            start: {
                first: {
                    run: grow
                }
            },
            first: {
                second: {
                    run: grow
                }
            },
            second: {
                end: {
                    run: grow
                }
            }
        }
    });
    return [
        _helpers.test("start", _helpers.target("async", function() {
            return _helpers.assert(_type.isReactor((0, _async.start)(A)));
        })),
        _helpers.test("run while consuming events", _helpers.target("async", async function() {
            var events, ref, talos;
            events = [
                new Promise(function(resolve, reject) {
                    return resolve(1);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(2);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(3);
                })
            ];
            talos = await (0, _async.run)(A, {
                sum: 0
            }, events);
            return _helpers.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        _helpers.test("run without events and reconsume context", _helpers.target("async", async function() {
            var ref, talos;
            talos = await (0, _async.run)(B, {
                product: 1
            });
            return _helpers.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        _helpers.test("flow functional composition", _helpers.target("async", async function() {
            var a, b, b2, c, context, error, f, g;
            a = async function(talos) {
                return talos.context.sum = await 1;
            };
            b = async function(talos) {
                return talos.context.sum += await 2;
            };
            b2 = async function() {
                await null;
                throw new Error("b2");
            };
            c = async function(talos) {
                return talos.context.sum += await 3;
            };
            f = (0, _async.flow)([
                a,
                b,
                b,
                c
            ]);
            _helpers.assert(_type.isFunction(f));
            context = await f();
            _helpers.assert.equal(8, context != null ? context.sum : void 0);
            g = (0, _async.flow)([
                a,
                b,
                b2,
                c
            ]);
            try {
                await g();
                throw new Error("did not throw");
            } catch (error1) {
                error = error1;
                return _helpers.assert(error.message === "b2");
            }
        }))
    ];
};
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy90ZXN0L2FzeW5jL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsS0FBbEI7RUFBeUIsTUFBekI7RUFBaUMsSUFBakM7RUFDRSxLQURGO0VBQ1MsR0FEVDtFQUNjLElBRGQ7Q0FBQSxNQUFBOztBQUVBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFFQSxHQUFBLEdBQU0sUUFBQSxDQUFFLEtBQUYsRUFBUyxLQUFULENBQUE7U0FDSixLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsSUFBcUI7QUFEakI7O0FBRU4sSUFBQSxHQUFPLE1BQUEsUUFBQSxDQUFFLEtBQUYsQ0FBQTtTQUNMLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBZCxJQUF5QixDQUFBLE1BQU0sQ0FBTjtBQURwQjs7QUFJUCxJQUFBLEdBQU8sUUFBQSxDQUFBLENBQUE7QUFDUCxNQUFBLENBQUEsRUFBQTtFQUFFLENBQUEsR0FBSSxPQUFPLENBQUMsSUFBUixDQUFhO0lBQUEsS0FBQSxFQUNmO01BQUEsS0FBQSxFQUNFO1FBQUEsSUFBQSxFQUNFO1VBQUEsR0FBQSxFQUFLO1FBQUw7TUFERixDQURGO01BR0EsSUFBQSxFQUNFO1FBQUEsSUFBQSxFQUNFO1VBQUEsR0FBQSxFQUFLO1FBQUw7TUFERjtJQUpGO0VBRGUsQ0FBYjtFQVFKLENBQUEsR0FBSSxPQUFPLENBQUMsSUFBUixDQUFhO0lBQUEsS0FBQSxFQUNmO01BQUEsS0FBQSxFQUNFO1FBQUEsS0FBQSxFQUNFO1VBQUEsR0FBQSxFQUFLO1FBQUw7TUFERixDQURGO01BR0EsS0FBQSxFQUNFO1FBQUEsTUFBQSxFQUNFO1VBQUEsR0FBQSxFQUFLO1FBQUw7TUFERixDQUpGO01BTUEsTUFBQSxFQUNFO1FB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QUFULENBQWUsQ0FBZjtzQkFBa0IsT0FBTyxDQUFFLFlBQTNCO01BRUEsQ0FBQSxHQUFJLElBQUEsQ0FBSyxDQUFFLENBQUY7SUFBSyxDQUFMO0lBQVEsRUFBUjtJQUFZLENBQVosQ0FBTDtBQUNKO1FBQ0UsTUFBTSxDQUFBLENBQUE7UUFDTixNQUFNLElBQUksS0FBSixDQUFVLGVBQVYsRUFGUjtPQUdBLGNBQUE7UUFBTTtlQUNKLENBQUMsQ0FBQyxNQUFGLENBQVMsS0FBSyxDQUFDLE9BQU4sS0FBaUIsSUFBMUIsRUFERjs7SUFmc0QsQ0FBbEIsQ0FBdEMsQ0FqQkY7O0FBckJLOztBQTBEUCxPQUFBO0VBQVMsSUFBQSxTQUFUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCxcbiAgc3RhcnQsIHJ1biwgZmxvdyB9IGZyb20gXCIuLi8uLi9zcmMvYXN5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSBhd2FpdCAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2UgZ3JhcGg6XG4gICAgc3RhcnQ6XG4gICAgICBob2xkOiBcbiAgICAgICAgcnVuOiBhZGRcbiAgICBob2xkOlxuICAgICAgaG9sZDpcbiAgICAgICAgcnVuOiBhZGRcblxuICBCID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc1JlYWN0b3Igc3RhcnQgQVxuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIGNvbnN1bWluZyBldmVudHNcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyBcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDFcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDJcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDNcbiAgICAgIF1cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEEsIHN1bTogMCwgZXZlbnRzXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcy5jb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcInJ1biB3aXRob3V0IGV2ZW50cyBhbmQgcmVjb25zdW1lIGNvbnRleHRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gQiwgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiZmxvdyBmdW5jdGlvbmFsIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGEgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gPSBhd2FpdCAxXG4gICAgICBiID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IGF3YWl0IDJcbiAgICAgIGIyID0gLT4gYXdhaXQgbnVsbDsgdGhyb3cgbmV3IEVycm9yIFwiYjJcIlxuICAgICAgYyA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSBhd2FpdCAzIFxuXG4gICAgICBmID0gZmxvdyBbIGEsIGIsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBhd2FpdCBmKClcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIGNvbnRleHQ/LnN1bVxuXG4gICAgICBnID0gZmxvdyBbIGEsIGIsIGIyLCBjIF1cbiAgICAgIHRyeVxuICAgICAgICBhd2FpdCBnKClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiZGlkIG5vdCB0aHJvd1wiXG4gICAgICBjYXRjaCBlcnJvclxuICAgICAgICBoLmFzc2VydCBlcnJvci5tZXNzYWdlID09IFwiYjJcIlxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBiYXNpYyB9Il19
 //# sourceURL=/@dashkite/talos/test/async/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9hc3luYy9iYXNpYy5jb2ZmZWUiLCI8YW5vbj4iXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCxcbiAgc3RhcnQsIHJ1biwgZmxvdyB9IGZyb20gXCIuLi8uLi9zcmMvYXN5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSBhd2FpdCAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2UgZ3JhcGg6XG4gICAgc3RhcnQ6XG4gICAgICBob2xkOiBcbiAgICAgICAgcnVuOiBhZGRcbiAgICBob2xkOlxuICAgICAgaG9sZDpcbiAgICAgICAgcnVuOiBhZGRcblxuICBCID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc1JlYWN0b3Igc3RhcnQgQVxuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIGNvbnN1bWluZyBldmVudHNcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyBcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDFcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDJcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDNcbiAgICAgIF1cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEEsIHN1bTogMCwgZXZlbnRzXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcy5jb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcInJ1biB3aXRob3V0IGV2ZW50cyBhbmQgcmVjb25zdW1lIGNvbnRleHRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gQiwgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiZmxvdyBmdW5jdGlvbmFsIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGEgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gPSBhd2FpdCAxXG4gICAgICBiID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IGF3YWl0IDJcbiAgICAgIGIyID0gLT4gYXdhaXQgbnVsbDsgdGhyb3cgbmV3IEVycm9yIFwiYjJcIlxuICAgICAgYyA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSBhd2FpdCAzIFxuXG4gICAgICBmID0gZmxvdyBbIGEsIGIsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBhd2FpdCBmKClcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIGNvbnRleHQ/LnN1bVxuXG4gICAgICBnID0gZmxvdyBbIGEsIGIsIGIyLCBjIF1cbiAgICAgIHRyeVxuICAgICAgICBhd2FpdCBnKClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiZGlkIG5vdCB0aHJvd1wiXG4gICAgICBjYXRjaCBlcnJvclxuICAgICAgICBoLmFzc2VydCBlcnJvci5tZXNzYWdlID09IFwiYjJcIlxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBiYXNpYyB9IixudWxsXSwibmFtZXMiOlsiYmFzaWMiLCJ0ZXN0IiwiYWRkIiwiZ3JvdyIsInRhbG9zIiwiZXZlbnQiLCJjb250ZXh0Iiwic3VtIiwicHJvZHVjdCIsIkEiLCJCIiwiTWFjaGluZSIsIm1ha2UiLCJncmFwaCIsInN0YXJ0IiwiaG9sZCIsInJ1biIsImZpcnN0Iiwic2Vjb25kIiwiZW5kIiwiaCIsInRhcmdldCIsImFzc2VydCIsIlR5cGUiLCJpc1JlYWN0b3IiLCJldmVudHMiLCJyZWYiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVxdWFsIiwiYSIsImIiLCJiMiIsImMiLCJlcnJvciIsImYiLCJnIiwiRXJyb3IiLCJmbG93IiwiaXNGdW5jdGlvbiIsImVycm9yMSIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7K0JBcUVTQTs7O2VBQUFDOzs7dUJBckVUOzhEQUVBO2lFQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSEEsSUFBQUMsS0FBQUMsTUFBQUY7QUFLQUMsTUFBTSxTQUFFRSxLQUFGLEVBQVNDLEtBQVQ7V0FDSkQsTUFBTUUsT0FBTyxDQUFDQyxHQUFkLElBQXFCRjtBQURqQjtBQUVORixPQUFPLGVBQUVDLEtBQUY7V0FDTEEsTUFBTUUsT0FBTyxDQUFDRSxPQUFkLElBQXlCLE1BQU07QUFEMUI7QUFJUFAsT0FBTztJQUNQLElBQUFRLEdBQUFDO0lBQUVELElBQUlFLGNBQU8sQ0FBQ0MsSUFBUixDQUFhO1FBQUFDLE9BQ2Y7WUFBQUMsT0FDRTtnQkFBQUMsTUFDRTtvQkFBQUMsS0FBS2Q7Z0JBQUw7WUFERjtZQUVGYSxNQUNFO2dCQUFBQSxNQUNFO29CQUFBQyxLQUFLZDtnQkFBTDtZQURGO1FBSkY7SUFEZTtJQVFqQlEsSUFBSUMsY0FBTyxDQUFDQyxJQUFSLENBQWE7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