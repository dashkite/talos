var test;
import { Machine, $start, $end } from "../../src";
import * as h from "../helpers";
test = function() {
    return [
        h.test("compact + booleans", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: {
                    alpha: true
                },
                alpha: {
                    ignore: false,
                    end: true
                }
            });
            h.assert(machine.graph[$start] != null);
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run == null);
            h.assert(edge.move({}) === "alpha");
            edge = machine.graph["alpha"].edges[0];
            h.assert(edge.when() === false);
            h.assert(edge.move({}) === "ignore");
            edge = machine.graph["alpha"].edges[1];
            return h.assert(edge.move({}) === $end);
        })),
        h.test("compact + functions", h.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = Machine.make({
                start: {
                    alpha: A
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when === A);
            h.assert(edge.run == null);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("objects + booleans", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: {
                    alpha: {
                        when: true,
                        run: function() {
                            return 1 + 1;
                        },
                        move: "alpha"
                    }
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("objects + functions", h.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = Machine.make({
                start: {
                    alpha: {
                        when: A,
                        run: function() {
                            return 1 + 1;
                        },
                        move: function(talos) {
                            return talos.state = "alpha";
                        }
                    }
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when === A);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("objects - when and move", h.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = Machine.make({
                start: {
                    alpha: {
                        run: function() {
                            return 1 + 1;
                        }
                    }
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("object + shorthand edges", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: {
                    run: function(talos) {},
                    move: "alpha"
                },
                alpha: {
                    move: $end
                }
            });
            h.assert(machine.graph[$start] != null);
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run != null);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("arrays + booleans", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: [
                    {
                        when: true,
                        move: "alpha"
                    }
                ]
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run == null);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("arrays + functions", h.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = Machine.make({
                start: [
                    {
                        when: A,
                        run: function() {
                            return 1 + 1;
                        },
                        move: function(talos) {
                            return talos.state = "alpha";
                        }
                    }
                ]
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when === A);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("compact with default", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: {
                    ignore: false,
                    default: "alpha",
                    alsoIgnore: false
                }
            });
            edge = machine.graph[$start].edges.at(-1);
            h.assert(edge.when() === true);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("terminal function", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: function() {
                    return 1 + 1;
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === $end);
        })),
        h.test("expansion from linear composition", h.target("machine", function() {
            var A, B, C, machine;
            A = function() {};
            B = function() {};
            C = function() {};
            machine = Machine.make([
                A,
                B,
                C
            ]);
            h.assert(machine.graph[$start].edges[0].move({}) === "A");
            h.assert(machine.graph["A"].edges[0].run === A);
            return h.assert(machine.graph["C"].edges[0].move({}) === $end);
        })),
        h.test("expansion from annotated linear composition", h.target("machine", function() {
            var A, B, C, machine;
            A = function() {};
            B = function() {};
            C = function() {};
            machine = Machine.make([
                "first",
                A,
                "second",
                B,
                "third",
                C
            ]);
            h.assert(machine.graph[$start].edges[0].move({}) === "first");
            h.assert(machine.graph["first"].edges[0].run === A);
            return h.assert(machine.graph["third"].edges[0].move({}) === $end);
        })),
        h.test("named machine :: arguments", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make("custom name", {
                start: function() {
                    return 1 + 1;
                }
            });
            h.assert.equal("custom name", machine.name);
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === $end);
        })),
        h.test("named machine :: interface", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                name: "custom name",
                graph: {
                    start: function() {
                        return 1 + 1;
                    }
                }
            });
            h.assert.equal("custom name", machine.name);
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === $end);
        })),
        h.test("named machine :: linear composition", h.target("machine", function() {
            var A, B, C, machine;
            A = function() {};
            B = function() {};
            C = function() {};
            machine = Machine.make("custom name", [
                A,
                B,
                C
            ]);
            h.assert.equal("custom name", machine.name);
            h.assert(machine.graph[$start].edges[0].move({}) === "A");
            h.assert(machine.graph["A"].edges[0].run === A);
            return h.assert(machine.graph["C"].edges[0].move({}) === $end);
        }))
    ];
};
export { test as expansions }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=/@dashkite/talos/test/machine/expansions.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9tYWNoaW5lL2V4cGFuc2lvbnMuY29mZmVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsICRzdGFydCwgJGVuZCB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cblxudGVzdCA9IC0+XG4gIFtcbiAgICBoLnRlc3QgXCJjb21wYWN0ICsgYm9vbGVhbnNcIiwgaC50YXJnZXQgXCJtYWNoaW5lXCIsIC0+XG4gICAgICBtYWNoaW5lID0gTWFjaGluZS5tYWtlXG4gICAgICAgIHN0YXJ0OlxuICAgICAgICAgIGFscGhhOiB0cnVlXG4gICAgICAgIGFscGhhOlxuICAgICAgICAgIGlnbm9yZTogZmFsc2VcbiAgICAgICAgICBlbmQ6IHRydWVcblxuICAgICAgaC5hc3NlcnQgbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0/XG4gICAgICBlZGdlID0gbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXNbMF1cbiAgICAgIGguYXNzZXJ0IGVkZ2Uud2hlbigpID09IHRydWVcbiAgICAgIGguYXNzZXJ0ICFlZGdlLnJ1bj9cbiAgICAgIGguYXNzZXJ0ICggZWRnZS5tb3ZlIHt9ICkgPT0gXCJhbHBoYVwiXG5cbiAgICAgIGVkZ2UgPSBtYWNoaW5lLmdyYXBoWyBcImFscGhhXCIgXS5lZGdlc1swXVxuICAgICAgaC5hc3NlcnQgZWRnZS53aGVuKCkgPT0gZmFsc2VcbiAgICAgIGguYXNzZXJ0ICggZWRnZS5tb3ZlIHt9ICkgPT0gXCJpZ25vcmVcIlxuXG4gICAgICBlZGdlID0gbWFjaGluZS5ncmFwaFsgXCJhbHBoYVwiIF0uZWRnZXNbMV1cbiAgICAgIGguYXNzZXJ0ICggZWRnZS5tb3ZlIHt9ICkgPT0gJGVuZFxuXG5cbiAgICBoLnRlc3QgXCJjb21wYWN0ICsgZnVuY3Rpb25zXCIsIGgudGFyZ2V0IFwibWFjaGluZVwiLCAtPlxuICAgICAgQSA9IC0+IHRydWVcblxuICAgICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZVxuICAgICAgICBzdGFydDpcbiAgICAgICAgICBhbHBoYTogQVxuXG4gICAgICBlZGdlID0gbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXNbMF1cbiAgICAgIGguYXNzZXJ0IGVkZ2Uud2hlbiA9PSBBXG4gICAgICBoLmFzc2VydCAhZWRnZS5ydW4/XG4gICAgICBoLmFzc2VydCAoIGVkZ2UubW92ZSB7fSApID09IFwiYWxwaGFcIlxuXG5cbiAgICBoLnRlc3QgXCJvYmplY3RzICsgYm9vbGVhbnNcIiwgaC50YXJnZXQgXCJtYWNoaW5lXCIsIC0+XG4gICAgICBtYWNoaW5lID0gTWFjaGluZS5tYWtlXG4gICAgICAgIHN0YXJ0OlxuICAgICAgICAgIGFscGhhOlxuICAgICAgICAgICAgd2hlbjogdHJ1ZVxuICAgICAgICAgICAgcnVuOiAtPiAxICsgMVxuICAgICAgICAgICAgbW92ZTogXCJhbHBoYVwiXG5cbiAgICAgIGVkZ2UgPSBtYWNoaW5lLmdyYXBoWyAkc3RhcnQgXS5lZGdlc1swXVxuICAgICAgaC5hc3NlcnQgZWRnZS53aGVuKCkgPT0gdHJ1ZVxuICAgICAgaC5hc3NlcnQgZWRnZS5ydW4oKSA9PSAyXG4gICAgICBoLmFzc2VydCAoIGVkZ2UubW92ZSB7fSApID09IFwiYWxwaGFcIlxuXG5cbiAgICBoLnRlc3QgXCJvYmplY3RzICsgZnVuY3Rpb25zXCIsIGgudGFyZ2V0IFwibWFjaGluZVwiLCAtPlxuICAgICAgQSA9IC0+IHRydWVcblxuICAgICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZVxuICAgICAgICBzdGFydDpcbiAgICAgICAgICBhbHBoYTpcbiAgICAgICAgICAgIHdoZW46IEFcbiAgICAgICAgICAgIHJ1bjogLT4gMSArIDFcbiAgICAgICAgICAgIG1vdmU6ICggdGFsb3MgKSAtPiB0YWxvcy5zdGF0ZSA9IFwiYWxwaGFcIlxuXG4gICAgICBlZGdlID0gbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXNbMF1cbiAgICAgIGguYXNzZXJ0IGVkZ2Uud2hlbiA9PSBBXG4gICAgICBoLmFzc2VydCBlZGdlLnJ1bigpID09IDJcbiAgICAgIGguYXNzZXJ0ICggZWRnZS5tb3ZlIHt9ICkgPT0gXCJhbHBoYVwiXG5cbiAgICBoLnRlc3QgXCJvYmplY3RzIC0gd2hlbiBhbmQgbW92ZVwiLCBoLnRhcmdldCBcIm1hY2hpbmVcIiwgLT5cbiAgICAgIEEgPSAtPiB0cnVlXG5cbiAgICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2VcbiAgICAgICAgc3RhcnQ6XG4gICAgICAgICAgYWxwaGE6IHJ1bjogLT4gMSArIDFcblxuICAgICAgZWRnZSA9IG1hY2hpbmUuZ3JhcGhbICRzdGFydCBdLmVkZ2VzWzBdXG4gICAgICBoLmFzc2VydCBlZGdlLndoZW4oKSA9PSB0cnVlXG4gICAgICBoLmFzc2VydCBlZGdlLnJ1bigpID09IDJcbiAgICAgIGguYXNzZXJ0ICggZWRnZS5tb3ZlIHt9ICkgPT0gXCJhbHBoYVwiXG5cbiAgICBoLnRlc3QgXCJvYmplY3QgKyBzaG9ydGhhbmQgZWRnZXNcIiwgaC50YXJnZXQgXCJtYWNoaW5lXCIsIC0+XG4gICAgICBtYWNoaW5lID0gTWFjaGluZS5tYWtlXG4gICAgICAgIHN0YXJ0OlxuICAgICAgICAgIHJ1bjogKCB0YWxvcyApIC0+XG4gICAgICAgICAgbW92ZTogXCJhbHBoYVwiXG4gICAgICAgIGFscGhhOlxuICAgICAgICAgIG1vdmU6ICRlbmRcblxuICAgICAgaC5hc3NlcnQgbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0/XG4gICAgICBlZGdlID0gbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXNbMF1cbiAgICAgIGguYXNzZXJ0IGVkZ2Uud2hlbigpID09IHRydWVcbiAgICAgIGguYXNzZXJ0IGVkZ2UucnVuP1xuICAgICAgaC5hc3NlcnQgKCBlZGdlLm1vdmUge30gKSA9PSBcImFscGhhXCJcblxuXG4gICAgaC50ZXN0IFwiYXJyYXlzICsgYm9vbGVhbnNcIiwgaC50YXJnZXQgXCJtYWNoaW5lXCIsIC0+XG4gICAgICBtYWNoaW5lID0gTWFjaGluZS5tYWtlXG4gICAgICAgIHN0YXJ0OiBbXG4gICAgICAgICAgd2hlbjogdHJ1ZVxuICAgICAgICAgIG1vdmU6IFwiYWxwaGFcIlxuICAgICAgICBdXG5cbiAgICAgIGVkZ2UgPSBtYWNoaW5lLmdyYXBoWyAkc3RhcnQgXS5lZGdlc1swXVxuICAgICAgaC5hc3NlcnQgZWRnZS53aGVuKCkgPT0gdHJ1ZVxuICAgICAgaC5hc3NlcnQgIWVkZ2UucnVuP1xuICAgICAgaC5hc3NlcnQgKCBlZGdlLm1vdmUge30gKSA9PSBcImFscGhhXCJcblxuXG4gICAgaC50ZXN0IFwiYXJyYXlzICsgZnVuY3Rpb25zXCIsIGgudGFyZ2V0IFwibWFjaGluZVwiLCAtPlxuICAgICAgQSA9IC0+IHRydWVcblxuICAgICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZVxuICAgICAgICBzdGFydDogW1xuICAgICAgICAgIHdoZW46IEFcbiAgICAgICAgICBydW46IC0+IDEgKyAxXG4gICAgICAgICAgbW92ZTogKCB0YWxvcyApIC0+IHRhbG9zLnN0YXRlID0gXCJhbHBoYVwiXG4gICAgICAgIF1cblxuICAgICAgZWRnZSA9IG1hY2hpbmUuZ3JhcGhbICRzdGFydCBdLmVkZ2VzWzBdXG4gICAgICBoLmFzc2VydCBlZGdlLndoZW4gPT0gQVxuICAgICAgaC5hc3NlcnQgZWRnZS5ydW4oKSA9PSAyXG4gICAgICBoLmFzc2VydCAoIGVkZ2UubW92ZSB7fSApID09IFwiYWxwaGFcIlxuXG5cbiAgICBoLnRlc3QgXCJjb21wYWN0IHdpdGggZGVmYXVsdFwiLCBoLnRhcmdldCBcIm1hY2hpbmVcIiwgLT5cbiAgICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2VcbiAgICAgICAgc3RhcnQ6XG4gICAgICAgICAgaWdub3JlOiBmYWxzZVxuICAgICAgICAgIGRlZmF1bHQ6IFwiYWxwaGFcIlxuICAgICAgICAgIGFsc29JZ25vcmU6IGZhbHNlXG5cbiAgICAgIGVkZ2UgPSBtYWNoaW5lLmdyYXBoWyAkc3RhcnQgXS5lZGdlcy5hdCAtMVxuICAgICAgaC5hc3NlcnQgZWRnZS53aGVuKCkgPT0gdHJ1ZVxuICAgICAgaC5hc3NlcnQgKCBlZGdlLm1vdmUge30gKSA9PSBcImFscGhhXCJcblxuXG4gICAgaC50ZXN0IFwidGVybWluYWwgZnVuY3Rpb25cIiwgaC50YXJnZXQgXCJtYWNoaW5lXCIsIC0+XG4gICAgICBtYWNoaW5lID0gTWFjaGluZS5tYWtlXG4gICAgICAgIHN0YXJ0OiAtPiAxICsgMVxuXG4gICAgICBlZGdlID0gbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXNbMF1cbiAgICAgIGguYXNzZXJ0IGVkZ2Uud2hlbigpID09IHRydWVcbiAgICAgIGguYXNzZXJ0IGVkZ2UucnVuKCkgPT0gMlxuICAgICAgaC5hc3NlcnQgKCBlZGdlLm1vdmUge30gKSA9PSAkZW5kXG5cblxuICAgIGgudGVzdCBcImV4cGFuc2lvbiBmcm9tIGxpbmVhciBjb21wb3NpdGlvblwiLCBoLnRhcmdldCBcIm1hY2hpbmVcIiwgLT5cbiAgICAgIEEgPSAtPlxuICAgICAgQiA9IC0+XG4gICAgICBDID0gLT5cbiAgICAgIFxuICAgICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZSBbIEEsIEIsIEMgXVxuXG4gICAgICBoLmFzc2VydCBtYWNoaW5lLmdyYXBoWyAkc3RhcnQgXS5lZGdlc1swXS5tb3ZlKHt9KSA9PSBcIkFcIlxuICAgICAgaC5hc3NlcnQgbWFjaGluZS5ncmFwaFsgXCJBXCIgXS5lZGdlc1swXS5ydW4gPT0gQVxuICAgICAgaC5hc3NlcnQgbWFjaGluZS5ncmFwaFsgXCJDXCIgXS5lZGdlc1swXS5tb3ZlKHt9KSA9PSAkZW5kXG5cbiAgICBoLnRlc3QgXCJleHBhbnNpb24gZnJvbSBhbm5vdGF0ZWQgbGluZWFyIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwibWFjaGluZVwiLCAtPlxuICAgICAgQSA9IC0+XG4gICAgICBCID0gLT5cbiAgICAgIEMgPSAtPlxuICAgICAgXG4gICAgICBtYWNoaW5lID0gTWFjaGluZS5tYWtlIFsgXG4gICAgICAgIFwiZmlyc3RcIiwgQVxuICAgICAgICBcInNlY29uZFwiLCBCXG4gICAgICAgIFwidGhpcmRcIiwgQ1xuICAgICAgXVxuXG4gICAgICBoLmFzc2VydCBtYWNoaW5lLmdyYXBoWyAkc3RhcnQgXS5lZGdlc1swXS5tb3ZlKHt9KSA9PSBcImZpcnN0XCJcbiAgICAgIGguYXNzZXJ0IG1hY2hpbmUuZ3JhcGhbIFwiZmlyc3RcIiBdLmVkZ2VzWzBdLnJ1biA9PSBBXG4gICAgICBoLmFzc2VydCBtYWNoaW5lLmdyYXBoWyBcInRoaXJkXCIgXS5lZGdlc1swXS5tb3ZlKHt9KSA9PSAkZW5kXG5cbiAgICBoLnRlc3QgXCJuYW1lZCBtYWNoaW5lIDo6IGFyZ3VtZW50c1wiLCBoLnRhcmdldCBcIm1hY2hpbmVcIiwgLT5cbiAgICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2UgXCJjdXN0b20gbmFtZVwiLFxuICAgICAgICBzdGFydDogLT4gMSArIDFcblxuICAgICAgaC5hc3NlcnQuZXF1YWwgXCJjdXN0b20gbmFtZVwiLCBtYWNoaW5lLm5hbWVcbiAgICAgIGVkZ2UgPSBtYWNoaW5lLmdyYXBoWyAkc3RhcnQgXS5lZGdlc1swXVxuICAgICAgaC5hc3NlcnQgZWRnZS53aGVuKCkgPT0gdHJ1ZVxuICAgICAgaC5hc3NlcnQgZWRnZS5ydW4oKSA9PSAyXG4gICAgICBoLmFzc2VydCAoIGVkZ2UubW92ZSB7fSApID09ICRlbmRcblxuICAgIGgudGVzdCBcIm5hbWVkIG1hY2hpbmUgOjogaW50ZXJmYWNlXCIsIGgudGFyZ2V0IFwibWFjaGluZVwiLCAtPlxuICAgICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZSBcbiAgICAgICAgbmFtZTogXCJjdXN0b20gbmFtZVwiXG4gICAgICAgIGdyYXBoOlxuICAgICAgICAgIHN0YXJ0OiAtPiAxICsgMVxuXG4gICAgICBoLmFzc2VydC5lcXVhbCBcImN1c3RvbSBuYW1lXCIsIG1hY2hpbmUubmFtZVxuICAgICAgZWRnZSA9IG1hY2hpbmUuZ3JhcGhbICRzdGFydCBdLmVkZ2VzWzBdXG4gICAgICBoLmFzc2VydCBlZGdlLndoZW4oKSA9PSB0cnVlXG4gICAgICBoLmFzc2VydCBlZGdlLnJ1bigpID09IDJcbiAgICAgIGguYXNzZXJ0ICggZWRnZS5tb3ZlIHt9ICkgPT0gJGVuZFxuXG4gICAgaC50ZXN0IFwibmFtZWQgbWFjaGluZSA6OiBsaW5lYXIgY29tcG9zaXRpb25cIiwgaC50YXJnZXQgXCJtYWNoaW5lXCIsIC0+XG4gICAgICBBID0gLT5cbiAgICAgIEIgPSAtPlxuICAgICAgQyA9IC0+XG4gICAgICBcbiAgICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2UgXCJjdXN0b20gbmFtZVwiLCBbIEEsIEIsIEMgXVxuXG4gICAgICBoLmFzc2VydC5lcXVhbCBcImN1c3RvbSBuYW1lXCIsIG1hY2hpbmUubmFtZVxuICAgICAgaC5hc3NlcnQgbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXNbMF0ubW92ZSh7fSkgPT0gXCJBXCJcbiAgICAgIGguYXNzZXJ0IG1hY2hpbmUuZ3JhcGhbIFwiQVwiIF0uZWRnZXNbMF0ucnVuID09IEFcbiAgICAgIGguYXNzZXJ0IG1hY2hpbmUuZ3JhcGhbIFwiQ1wiIF0uZWRnZXNbMF0ubW92ZSh7fSkgPT0gJGVuZFxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBleHBhbnNpb25zIH0iXSwibmFtZXMiOlsidGVzdCIsIk1hY2hpbmUiLCIkc3RhcnQiLCIkZW5kIiwiaCIsInRhcmdldCIsImVkZ2UiLCJtYWNoaW5lIiwibWFrZSIsInN0YXJ0IiwiYWxwaGEiLCJpZ25vcmUiLCJlbmQiLCJhc3NlcnQiLCJncmFwaCIsImVkZ2VzIiwid2hlbiIsInJ1biIsIm1vdmUiLCJBIiwidGFsb3MiLCJzdGF0ZSIsImRlZmF1bHQiLCJhbHNvSWdub3JlIiwiYXQiLCJCIiwiQyIsImVxdWFsIiwibmFtZSIsImV4cGFuc2lvbnMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUFBO0FBQUEsU0FBU0MsT0FBVCxFQUFrQkMs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