var add, grow, test;
import { Machine, Talos, $start, $end, start, run, flow } from "../../src/async";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = async function(talos) {
    return talos.context.product *= await 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        graph: {
            start: {
                hold: {
                    run: add
                }
            },
            hold: {
                hold: {
                    run: add
                }
            }
        }
    });
    B = Machine.make({
        graph: {
            start: {
                first: {
                    run: grow
                }
            },
            first: {
                second: {
                    run: grow
                }
            },
            second: {
                end: {
                    run: grow
                }
            }
        }
    });
    return [
        h.test("start", h.target("async", function() {
            return h.assert(Type.isReactor(start(A)));
        })),
        h.test("run while consuming events", h.target("async", async function() {
            var events, ref, talos;
            events = [
                new Promise(function(resolve, reject) {
                    return resolve(1);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(2);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(3);
                })
            ];
            talos = await run(A, {
                sum: 0
            }, events);
            return h.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        h.test("run without events and reconsume context", h.target("async", async function() {
            var ref, talos;
            talos = await run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("flow functional composition", h.target("async", async function() {
            var a, b, b2, c, context, error, f, g;
            a = async function(talos) {
                return talos.context.sum = await 1;
            };
            b = async function(talos) {
                return talos.context.sum += await 2;
            };
            b2 = async function() {
                await null;
                throw new Error("b2");
            };
            c = async function(talos) {
                return talos.context.sum += await 3;
            };
            f = flow([
                a,
                b,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = await f();
            h.assert.equal(8, context != null ? context.sum : void 0);
            g = flow([
                a,
                b,
                b2,
                c
            ]);
            try {
                await g();
                throw new Error("did not throw");
            } catch (error1) {
                error = error1;
                return h.assert(error.message === "b2");
            }
        })),
        h.test("handles error", h.target("async", async function() {
            var a, b, c, talos;
            a = async function(talos) {
                return talos.context.sum = await 1;
            };
            b = function(talos) {
                throw new Error("b");
            };
            c = async function(talos) {
                return talos.context.sum += await 3;
            };
            talos = await run(start([
                a,
                b,
                c
            ]));
            h.assert(talos.failure);
            h.assert.equal($end, talos.state);
            return h.assert.equal("b", talos.previousState);
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9hc3luYy9iYXNpYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0VBQWtCLEtBQWxCO0VBQXlCLE1BQXpCO0VBQWlDLElBQWpDO0VBQXVDLEtBQXZDO0VBQThDLEdBQTlDO0VBQW1ELElBQW5EO0NBQUEsTUFBQTs7QUFDQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxLQUFQLE1BQUE7O0FBRUEsR0FBQSxHQUFNLFFBQUEsQ0FBRSxLQUFGLEVBQVMsS0FBVCxDQUFBO1NBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFkLElBQXFCO0FBRGpCOztBQUVOLElBQUEsR0FBTyxNQUFBLFFBQUEsQ0FBRSxLQUFGLENBQUE7U0FDTCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQWQsSUFBeUIsQ0FBQSxNQUFNLENBQU47QUFEcEI7O0FBSVAsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxDQUFBLEVBQUE7RUFBRSxDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FBYTtJQUFBLEtBQUEsRUFDZjtNQUFBLEtBQUEsRUFDRTtRQUFBLElBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FERjtNQUdBLElBQUEsRUFDRTtRQUFBLElBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREY7SUFKRjtFQURlLENBQWI7RUFRSixDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FBYTtJQUFBLEtBQUEsRUFDZjtNQUFBLEtBQUEsRUFDRTtRQUFBLEtBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FERjtNQUdBLEtBQUEsRUFDRTtRQUFBLE1BQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FKRjtNQU1BLE1BQUEsRUFDRTtRQUFBLEdBQUEsRUFD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O0lBUndDLENBQWxCLENBQXhCLENBbkNGOztBQXJCSzs7QUFtRVAsT0FBQTtFQUFTLElBQUEsU0FBVCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsIFRhbG9zLCAkc3RhcnQsICRlbmQsIHN0YXJ0LCBydW4sIGZsb3cgfSBmcm9tIFwiLi4vLi4vc3JjL2FzeW5jXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuYWRkID0gKCB0YWxvcywgZXZlbnQgKSAtPlxuICB0YWxvcy5jb250ZXh0LnN1bSArPSBldmVudFxuZ3JvdyA9ICggdGFsb3MgKSAtPlxuICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gYXdhaXQgMlxuXG5cbnRlc3QgPSAtPlxuICBBID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZSBncmFwaDpcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNSZWFjdG9yIHN0YXJ0IEFcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAxXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAyXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAzXG4gICAgICBdXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImZsb3cgZnVuY3Rpb25hbCBjb21wb3NpdGlvblwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSBhd2FpdCAyXG4gICAgICBiMiA9IC0+IGF3YWl0IG51bGw7IHRocm93IG5ldyBFcnJvciBcImIyXCJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgZiA9IGZsb3cgWyBhLCBiLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gYXdhaXQgZigpXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCBjb250ZXh0Py5zdW1cblxuICAgICAgZyA9IGZsb3cgWyBhLCBiLCBiMiwgYyBdXG4gICAgICB0cnlcbiAgICAgICAgYXdhaXQgZygpXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcImRpZCBub3QgdGhyb3dcIlxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgaC5hc3NlcnQgZXJyb3IubWVzc2FnZSA9PSBcImIyXCJcblxuICAgIGgudGVzdCBcImhhbmRsZXMgZXJyb3JcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IGF3YWl0IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGhyb3cgbmV3IEVycm9yIFwiYlwiXG4gICAgICBjID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IGF3YWl0IDMgXG5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIHN0YXJ0IFsgYSwgYiwgYyBdXG4gICAgICBoLmFzc2VydCB0YWxvcy5mYWlsdXJlXG4gICAgICBoLmFzc2VydC5lcXVhbCAkZW5kLCB0YWxvcy5zdGF0ZVxuICAgICAgaC5hc3NlcnQuZXF1YWwgXCJiXCIsIHRhbG9zLnByZXZpb3VzU3RhdGVcbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXX0=
 //# sourceURL=test/async/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYXN5bmMvYmFzaWMuY29mZmVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsIFRhbG9zLCAkc3RhcnQsICRlbmQsIHN0YXJ0LCBydW4sIGZsb3cgfSBmcm9tIFwiLi4vLi4vc3JjL2FzeW5jXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuYWRkID0gKCB0YWxvcywgZXZlbnQgKSAtPlxuICB0YWxvcy5jb250ZXh0LnN1bSArPSBldmVudFxuZ3JvdyA9ICggdGFsb3MgKSAtPlxuICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gYXdhaXQgMlxuXG5cbnRlc3QgPSAtPlxuICBBID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZSBncmFwaDpcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNSZWFjdG9yIHN0YXJ0IEFcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAxXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAyXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAzXG4gICAgICBdXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImZsb3cgZnVuY3Rpb25hbCBjb21wb3NpdGlvblwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSBhd2FpdCAyXG4gICAgICBiMiA9IC0+IGF3YWl0IG51bGw7IHRocm93IG5ldyBFcnJvciBcImIyXCJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgZiA9IGZsb3cgWyBhLCBiLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gYXdhaXQgZigpXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCBjb250ZXh0Py5zdW1cblxuICAgICAgZyA9IGZsb3cgWyBhLCBiLCBiMiwgYyBdXG4gICAgICB0cnlcbiAgICAgICAgYXdhaXQgZygpXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcImRpZCBub3QgdGhyb3dcIlxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgaC5hc3NlcnQgZXJyb3IubWVzc2FnZSA9PSBcImIyXCJcblxuICAgIGgudGVzdCBcImhhbmRsZXMgZXJyb3JcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IGF3YWl0IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGhyb3cgbmV3IEVycm9yIFwiYlwiXG4gICAgICBjID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IGF3YWl0IDMgXG5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIHN0YXJ0IFsgYSwgYiwgYyBdXG4gICAgICBoLmFzc2VydCB0YWxvcy5mYWlsdXJlXG4gICAgICBoLmFzc2VydC5lcXVhbCAkZW5kLCB0YWxvcy5zdGF0ZVxuICAgICAgaC5hc3NlcnQuZXF1YWwgXCJiXCIsIHRhbG9zLnByZXZpb3VzU3RhdGVcbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXSwibmFtZXMiOlsiYWRkIiwiZ3JvdyIsInRlc3QiLCJNYWNoaW5lIiwiVGFsb3MiLCIkc3RhcnQiLCIkZW5kIiwic3RhcnQiLCJydW4iLCJmbG93IiwiVHlwZSIsImgiLCJ0YWxvcyIsImV2ZW50IiwiY29udGV4dCIsInN1bSIsInByb2R1Y3QiLCJBIiwiQiIsIm1ha2UiLCJncmFwaCIsImhvbGQiLCJmaXJzdCIsInNlY29uZCIsImVuZCIsInRhcmdldCIsImFzc2VydCIsImlzUmVhY3RvciIsImV2ZW50cyIsInJlZiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXF1YWwiLCJhIiwiYiIsImIyIiwiYyIsImVycm9yIiwiZiIsImciLCJFcnJvciIsImlzRnVuY3Rpb24iLCJlcnJvcjEiLCJtZXNzYWdlIiwiZmFpbHVyZSIsInN0YXRlIiwicHJldmlvdXNTdGF0ZSIsImJhc2ljIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSxLQUFBQyxNQUFBQztBQUFBLFNBQVNDLE9BQVQsRUFBa0JDLEtBQWxCLEVBQXlCQyxN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