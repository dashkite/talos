"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "expansions", {
    enumerable: true,
    get: function() {
        return test;
    }
});
const _src = require("../../src");
const _helpers = /*#__PURE__*/ _interop_require_wildcard(require("../helpers"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var test;
test = function() {
    return [
        _helpers.test("compact + booleans", _helpers.target("machine", function() {
            var edge, machine;
            machine = _src.Machine.make({
                graph: {
                    start: {
                        alpha: true
                    },
                    alpha: {
                        ignore: false,
                        end: true
                    }
                }
            });
            _helpers.assert(machine.graph[_src.$start] != null);
            edge = machine.graph[_src.$start].edges[0];
            _helpers.assert(edge.when() === true);
            _helpers.assert(edge.run == null);
            _helpers.assert(edge.move({}) === "alpha");
            edge = machine.graph["alpha"].edges[0];
            _helpers.assert(edge.when() === false);
            _helpers.assert(edge.move({}) === "ignore");
            edge = machine.graph["alpha"].edges[1];
            return _helpers.assert(edge.move({}) === _src.$end);
        })),
        _helpers.test("compact + functions", _helpers.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = _src.Machine.make({
                graph: {
                    start: {
                        alpha: A
                    }
                }
            });
            edge = machine.graph[_src.$start].edges[0];
            _helpers.assert(edge.when === A);
            _helpers.assert(edge.run == null);
            return _helpers.assert(edge.move({}) === "alpha");
        })),
        _helpers.test("objects + booleans", _helpers.target("machine", function() {
            var edge, machine;
            machine = _src.Machine.make({
                graph: {
                    start: {
                        alpha: {
                            when: true,
                            run: function() {
                                return 1 + 1;
                            },
                            move: "alpha"
                        }
                    }
                }
            });
            edge = machine.graph[_src.$start].edges[0];
            _helpers.assert(edge.when() === true);
            _helpers.assert(edge.run() === 2);
            return _helpers.assert(edge.move({}) === "alpha");
        })),
        _helpers.test("objects + functions", _helpers.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = _src.Machine.make({
                graph: {
                    start: {
                        alpha: {
                            when: A,
                            run: function() {
                                return 1 + 1;
                            },
                            move: function(talos) {
                                return talos.state = "alpha";
                            }
                        }
                    }
                }
            });
            edge = machine.graph[_src.$start].edges[0];
            _helpers.assert(edge.when === A);
            _helpers.assert(edge.run() === 2);
            return _helpers.assert(edge.move({}) === "alpha");
        })),
        _helpers.test("objects - when and move", _helpers.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = _src.Machine.make({
                graph: {
                    start: {
                        alpha: {
                            run: function() {
                                return 1 + 1;
                            }
                        }
                    }
                }
            });
            edge = machine.graph[_src.$start].edges[0];
            _helpers.assert(edge.when() === true);
            _helpers.assert(edge.run() === 2);
            return _helpers.assert(edge.move({}) === "alpha");
        })),
        _helpers.test("arrays + booleans", _helpers.target("machine", function() {
            var edge, machine;
            machine = _src.Machine.make({
                graph: {
                    start: [
                        {
                            when: true,
                            move: "alpha"
                        }
                    ]
                }
            });
            edge = machine.graph[_src.$start].edges[0];
            _helpers.assert(edge.when() === true);
            _helpers.assert(edge.run == null);
            return _helpers.assert(edge.move({}) === "alpha");
        })),
        _helpers.test("arrays + functions", _helpers.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = _src.Machine.make({
                graph: {
                    start: [
                        {
                            when: A,
                            run: function() {
                                return 1 + 1;
                            },
                            move: function(talos) {
                                return talos.state = "alpha";
                            }
                        }
                    ]
                }
            });
            edge = machine.graph[_src.$start].edges[0];
            _helpers.assert(edge.when === A);
            _helpers.assert(edge.run() === 2);
            return _helpers.assert(edge.move({}) === "alpha");
        })),
        _helpers.test("compact with default", _helpers.target("machine", function() {
            var edge, machine;
            machine = _src.Machine.make({
                graph: {
                    start: {
                        ignore: false,
                        default: "alpha",
                        alsoIgnore: false
                    }
                }
            });
            edge = machine.graph[_src.$start].edges.at(-1);
            _helpers.assert(edge.when() === true);
            return _helpers.assert(edge.move({}) === "alpha");
        })),
        _helpers.test("terminal function", _helpers.target("machine", function() {
            var edge, machine;
            machine = _src.Machine.make({
                graph: {
                    start: function() {
                        return 1 + 1;
                    }
                }
            });
            edge = machine.graph[_src.$start].edges[0];
            _helpers.assert(edge.when() === true);
            _helpers.assert(edge.run() === 2);
            return _helpers.assert(edge.move({}) === _src.$end);
        })),
        _helpers.test("expansion from linear composition", _helpers.target("machine", function() {
            var A, B, C, machine;
            A = function() {};
            B = function() {};
            C = function() {};
            machine = _src.Machine.make([
                A,
                B,
                C
            ]);
            _helpers.assert(machine.graph[_src.$start].edges[0].move({}) === "A");
            _helpers.assert(machine.graph["A"].edges[0].run === A);
            return _helpers.assert(machine.graph["C"].edges[0].move({}) === _src.$end);
        }))
    ];
};
 //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=/@dashkite/talos/test/machine/expansions.coffee

//# sourceMappingURL=data:application/json;base64,