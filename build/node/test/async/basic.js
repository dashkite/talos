"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "basic", {
    enumerable: true,
    get: function() {
        return test;
    }
});
const _src = require("../../src");
const _async = require("../../src/async");
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _helpers = /*#__PURE__*/ _interop_require_wildcard(require("../helpers"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var add, grow, test;
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = _src.Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = _src.Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        _helpers.test("start", _helpers.target("async", function() {
            var cycle;
            cycle = (0, _async.start)(A);
            return _helpers.assert(_type.isAsyncIterator(cycle));
        })),
        _helpers.test("run while consuming events", _helpers.target("async", async function() {
            var events, ref, talos;
            events = [
                new Promise(function(resolve, reject) {
                    return resolve(1);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(2);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(3);
                })
            ];
            talos = await (0, _async.run)(A, {
                sum: 0
            }, events);
            return _helpers.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        _helpers.test("run without events and reconsume context", _helpers.target("async", async function() {
            var ref, talos;
            talos = await (0, _async.run)(B, {
                product: 1
            });
            return _helpers.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        _helpers.test("functional composition", _helpers.target("async", async function() {
            var a, b, c, ref, talos;
            a = async function(talos, context) {
                return context.sum = await 1;
            };
            b = async function(talos, context) {
                return context.sum += await 2;
            };
            c = async function(talos, context) {
                return context.sum += await 3;
            };
            talos = await (0, _async.run)([
                a,
                b,
                c
            ]);
            return _helpers.assert.equal(6, talos != null ? (ref = talos.context) != null ? ref.sum : void 0 : void 0);
        }))
    ];
};
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy90ZXN0L2FzeW5jL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsS0FBbEI7RUFBeUIsTUFBekI7RUFBaUMsSUFBakM7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0VBQWdCLEdBQWhCO0NBQUEsTUFBQTs7QUFDQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxLQUFQLE1BQUE7O0FBRUEsR0FBQSxHQUFNLFFBQUEsQ0FBRSxLQUFGLEVBQVMsS0FBVCxDQUFBO1NBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFkLElBQXFCO0FBRGpCOztBQUVOLElBQUEsR0FBTyxRQUFBLENBQUUsS0FBRixDQUFBO1NBQ0wsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFkLElBQXlCO0FBRHBCOztBQUlQLElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQTtBQUNQLE1BQUEsQ0FBQSxFQUFBO0VBQUUsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQ0Y7SUFBQSxLQUFBLEVBQ0U7TUFBQSxJQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBREY7SUFHQSxJQUFBLEVBQ0U7TUFBQSxJQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGO0VBSkYsQ0FERTtFQVFKLENBQUEsR0FBSSxPQUFPLENBQUMsSUFBUixDQUNGO0lBQUEsS0FBQSxFQUNFO01BQUEsS0FBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERixDQURGO0lBR0EsS0FBQSxFQUNFO01BQUEsTUFBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERixDQUpGO0lBTUEsTUFBQSxFQUNFO01BQUEsR0FBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERjtFQVBGLENBREU7U0FZSjtJQUNFLENBQUMsQ0FBQyxJQUFGLENBQU8sT0FBUDtJQUFnQixDQUFDLENBQUMsTUFBRixDQUFTLE9BQVQ7SUFBa0IsUUFBQSxDQUFBLENBQUE7QUFDdEMsVUFBQTtNQUFNLEtBQUEsR0FBUSxLQUFBLENBQU0sQ0FBTjthQUNSLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBSSxDQUFDLGVBQUwsQ0FBcUIsS0FBckIsQ0FBVDtJQUZnQyxDQUFsQixDQUFoQixDQURGO0lBS0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyw0QkFBUDtJQUFxQyxDQUFDLENBQUMsTUFBRixDQUFTLE9BQVQ7SUFBa0IsTUFBQSxRQUFBLENBQUEsQ0FBQTtBQUMzRCxVQUFBLE1BQUE7SUFBQSxHQUFBO0lBQUE7TUFBTSxNQUFBLEdBQVM7UUFDUCxJQUFJLE9BQUosQ0FBWSxRQUFBLENBQUUsT0FBRjtRQUFXLE1BQVgsQ0FBQTtpQkFBdUIsT0FBQSxDQUFRLENBQVI7UUFBdkIsQ0FBWixDQURPO1FBRVAsSUFBSSxPQUFKLENBQVksUUFBQSxDQUFFLE9BQUY7UUFBVyxNQUFYLENBQUE7aUJBQXVCLE9BQUEsQ0FBUSxDQUFSO1FBQXZCLENBQVosQ0FGTztRQUdQLElBQUksT0FBSixDQUFZLFFBQUEsQ0FBRSxPQUFGO1FBQVcsTUFBWCxDQUFBO2lCQUF1QixPQUFBLENBQVEsQ0FBUjtRQUF2QixDQUFaLENBSE87O01BS1QsS0FBQSxHQUFRLENBQUEsTUFBTSxHQUFBLENBQUksQ0FBSjtJQUFPO1FBQUEsR0FBQSxFQUFLO01BQUwsQ0FBUDtJQUFlLE1BQWYsQ0FBTjthQUNSLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQWY7dUNBQStCLENBQUUsWUFBakM7SUFQcUQsQ0FBbEIsQ0FBckMsQ0FMRjtJQWNFLENBQUMsQ0FBQyxJQUFGLENBQU8sMENBQVA7SUFBbUQsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxPQUFUO0lBQWtCLE1BQUEsUUFBQSxDQUFBLENBQUE7QUFDekUsVUFBQSxHQUFBO0lBQUE7TUFBTSxLQUFBLEdBQVEsQ0FBQSxNQUFNLEdBQUEsQ0FBSSxDQUFKO0lBQU87UUFBQSxPQUFBLEVBQVM7TUFBVCxDQUFQLENBQU47YUFDUixDQUFDLENBQUMsTUFBTSxDQUFDLEtBQVQsQ0FBZSxDQUFmO3VDQUErQixDQUFFLGdCQUFqQztJQUZtRSxDQUFsQixDQUFuRCxDQWRGO0lBa0JFLENBQUMsQ0FBQyxJQUFGLENBQU8sd0JBQVA7SUFBaUMsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxPQUFUO0lBQWtCLE1BQUEsUUFBQSxDQUFBLENBQUE7QUFDdkQsVUFBQSxDQUFBO0lBQUEsQ0FBQTtJQUFBLENBQUE7SUFBQSxHQUFBO0lBQUE7TUFBTSxDQUFBLEdBQUksTUFBQSxRQUFBLENBQUUsS0FBRjtJQUFTLE9BQVQsQ0FBQTtlQUFzQixPQUFPLENBQUMsR0FBUixHQUFjLENBQUEsTUFBTSxDQUFOO01BQXBDO01BQ0osQ0FBQSxHQUFJLE1BQUEsUUFBQSxDQUFFLEtBQUY7SUFBUyxPQUFULENBQUE7ZUFBc0IsT0FBTyxDQUFDLEdBQVIsSUFBZSxDQUFBLE1BQU0sQ0FBTjtNQUFyQztNQUNKLENBQUEsR0FBSSxNQUFBLFFBQUEsQ0FBRSxLQUFGO0lBQVMsT0FBVCxDQUFBO2VBQXNCLE9BQU8sQ0FBQyxHQUFSLElBQWUsQ0FBQSxNQUFNLENBQU47TUFBckM7TUFFSixLQUFBLEdBQVEsQ0FBQSxNQUFNLEdBQUEsQ0FBSSxDQUFFLENBQUY7SUFBSyxDQUFMO0lBQVEsQ0FBUixDQUFKLENBQU47YUFDUixDQUFDLENBQUMsTUFBTSxDQUFDLEtBQVQsQ0FBZSxDQUFmO3VEQUFnQyxDQUFFLHFCQUFsQztJQU5pRCxDQUFsQixDQUFqQyxDQWxCRjs7QUFyQks7O0FBaURQLE9BQUE7RUFBUyxJQUFBLFNBQVQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWNoaW5lLCBUYWxvcywgJHN0YXJ0LCAkZW5kIH0gZnJvbSBcIi4uLy4uL3NyY1wiXG5pbXBvcnQgeyBzdGFydCwgcnVuIH0gZnJvbSBcIi4uLy4uL3NyYy9hc3luY1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbmFkZCA9ICggdGFsb3MsIGV2ZW50ICkgLT5cbiAgdGFsb3MuY29udGV4dC5zdW0gKz0gZXZlbnRcbmdyb3cgPSAoIHRhbG9zICkgLT5cbiAgdGFsb3MuY29udGV4dC5wcm9kdWN0ICo9IDJcblxuXG50ZXN0ID0gLT5cbiAgQSA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgY3ljbGUgPSBzdGFydCBBXG4gICAgICBoLmFzc2VydCBUeXBlLmlzQXN5bmNJdGVyYXRvciBjeWNsZVxuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIGNvbnN1bWluZyBldmVudHNcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyBcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDFcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDJcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDNcbiAgICAgIF1cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEEsIHN1bTogMCwgZXZlbnRzXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcy5jb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcInJ1biB3aXRob3V0IGV2ZW50cyBhbmQgcmVjb25zdW1lIGNvbnRleHRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gQiwgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiZnVuY3Rpb25hbCBjb21wb3NpdGlvblwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSArPSBhd2FpdCAyXG4gICAgICBjID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtICs9IGF3YWl0IDMgXG5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIFsgYSwgYiwgYyBdXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcz8uY29udGV4dD8uc3VtXG5cbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXX0=
 //# sourceURL=/@dashkite/talos/test/async/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9hc3luYy9iYXNpYy5jb2ZmZWUiLCI8YW5vbj4iXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0IHsgc3RhcnQsIHJ1biB9IGZyb20gXCIuLi8uLi9zcmMvYXN5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGN5Y2xlID0gc3RhcnQgQVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0FzeW5jSXRlcmF0b3IgY3ljbGVcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAxXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAyXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAzXG4gICAgICBdXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImZ1bmN0aW9uYWwgY29tcG9zaXRpb25cIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSA9IGF3YWl0IDFcbiAgICAgIGIgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gKz0gYXdhaXQgMlxuICAgICAgYyA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSArPSBhd2FpdCAzIFxuXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBbIGEsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3M/LmNvbnRleHQ/LnN1bVxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBiYXNpYyB9IixudWxsXSwibmFtZXMiOlsiYmFzaWMiLCJ0ZXN0IiwiYWRkIiwiZ3JvdyIsInRhbG9zIiwiZXZlbnQiLCJjb250ZXh0Iiwic3VtIiwicHJvZHVjdCIsIkEiLCJCIiwiTWFjaGluZSIsIm1ha2UiLCJzdGFydCIsImhvbGQiLCJydW4iLCJmaXJzdCIsInNlY29uZCIsImVuZCIsImgiLCJ0YXJnZXQiLCJjeWNsZSIsImFzc2VydCIsIlR5cGUiLCJpc0FzeW5jSXRlcmF0b3IiLCJldmVudHMiLCJyZWYiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVxdWFsIiwiYSIsImIiLCJjIl0sIm1hcHBpbmdzIjoiOzs7OytCQTREU0E7OztlQUFBQzs7O3FCQTVEVDt1QkFDQTs4REFDQTtpRUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUhBLElBQUFDLEtBQUFDLE1BQUFGO0FBS0FDLE1BQU0sU0FBRUUsS0FBRixFQUFTQyxLQUFUO1dBQ0pELE1BQU1FLE9BQU8sQ0FBQ0MsR0FBZCxJQUFxQkY7QUFEakI7QUFFTkYsT0FBTyxTQUFFQyxLQUFGO1dBQ0xBLE1BQU1FLE9BQU8sQ0FBQ0UsT0FBZCxJQUF5QjtBQURwQjtBQUlQUCxPQUFPO0lBQ1AsSUFBQVEsR0FBQUM7SUFBRUQsSUFBSUUsWUFBTyxDQUFDQyxJQUFSLENBQ0Y7UUFBQUMsT0FDRTtZQUFBQyxNQUNFO2dCQUFBQyxLQUFLYjtZQUFMO1FBREY7UUFFRlksTUFDRTtZQUFBQSxNQUNFO2dCQUFBQyxLQUFLYjtZQUFMO1FBREY7SUFKRjtJQU9GUSxJQUFJQyxZQUFPLENBQUNDLElBQVIsQ0FDRjtRQUFBQyxPQUNFO1lBQUFHLE9BQ0U7Z0JBQUFELEtBQUtaO1lBQUw7UUFERjtRQUVGYSxPQUNFO1lBQUFDLFFBQ0U7Z0JBQUFGLEtBQUtaO1lBQUw7UUFERjtRQUVGYyxRQUNFO1lBQUFDLEtBQ0U7Z0JBQUFILEtBQUtaO1lBQUw7UUFERjtJQVBGO1dBV0Y7UUFDRWdCLFNBQUVsQixJQUFGLENBQU8sU0FBU2tCLFNBQUVDLE1BQUYsQ0FBUyxTQUFTO1lBQ3RDLElBQUFDO1lBQU1BLFFBQVFSLElBQUFBLFlBQUEsRUFBTUo7bUJBQ2RVLFNBQUVHLE1BQUYsQ0FBU0MsTUFBS0MsZUFBTCxDQUFxQkg7UUFGRTtRQUlsQ0YsU0FBRWxCLElBQUYsQ0FBTyw4QkFBOEJrQixTQUFFQyxNQUFGLENBQVMsU0FBUztZQUMzRCxJQUFBSyxRQUFBQyxLQUFBdEI7WUFBTXFCLFNBQVM7Z0JBQ1AsSUFBSUUsUUFBUSxTQUFFQyxPQUFGLEVBQVdDLE1BQVg7MkJBQXVCRCxRQUFRO2dCQUEvQjtnQkFDWixJQUFJRCxRQUFRLFNBQUVDLE9BQUYsRUFBV0MsTUFBWDsyQkFBdUJELFFBQVE7Z0JBQS9CO2dCQUNaLElBQUlELFFBQVEsU0FBRUMsT0FBRixFQUFXQyxNQUFYOzJCQUF1QkQsUUFBUTtnQkFBL0I7O1lBRWR4QixRQUFRLE1BQU1XLElBQUFBLFVBQUEsRUFBSU4sR0FBRztnQkFBQUYsS0FBSztZQUFMLEdBQVFrQjttQkFDN0JOLFNBQUVHLE1BQU0sQ0FBQ1EsS0FBVCxDQUFlLHVDQUFrQnZCLEdBQUEsR0FBQSxLQUFBO1FBUG9CO1FBU3ZEWSxTQUFFbEIsSUFBRixDQUFPLDRDQUE0Q2tCLFNBQUVDLE1BQUYsQ0FBUyxTQUFTO1lBQ3pFLElBQUFNLEtBQUF0QjtZQUFNQSxRQUFRLE1BQU1XLElBQUFBLFVBQUEsRUFBSUwsR0FBRztnQkFBQUYsU0FBUztZQUFUO21CQUNyQlcsU0FBRUcsTUFBTSxDQUFDUSxLQUFULENBQWUsdUNBQWtCdEIsT0FBQSxHQUFBLEtBQUE7UUFGa0M7UUFJckVXLFNBQUVsQixJQUFGLENBQU8sMEJBQTBCa0IsU0FBRUMsTUFBRixDQUFTLFNBQVM7WUFDdkQsSUFBQVcsR0FBQUMsR0FBQUMsR0FBQVAsS0FBQXRCO1lBQU0yQixJQUFJLGVBQUUzQixLQUFGLEVBQVNFLE9BQVQ7dUJBQXNCQSxRQUFRQyxHQUFSLEdBQWMsTUFBTTtZQUExQztZQUNKeUIsSUFBSSxlQUFFNUIsS0FBRixFQUFTRSxPQUFUO3VCQUFzQkEsUUFBUUMsR0FBUixJQUFlLE1BQU07WUFBM0M7WUFDSjBCLElBQUksZUFBRTdCLEtBQUYsRUFBU0UsT0FBVDt1QkFBc0JBLFFBQVFDLEdBQVIsSUFBZSxNQUFNO1lBQTNDO1lBRUpILFFBQVEsTUFBTVcsSUFBQUEsVUFBQSxFQUFJO2dCQUFFZ0I7Z0JBQUdDO2dCQUFHQzthQUFaO21CQUNkZCxTQUFFRyxNQUFNLENBQUNRLEtBQVQsQ0FBZSx1REFBbUJ2QixHQUFBLEdBQUEsS0FBQSxJQUFBLEtBQUE7UUFOZTs7QUF2Q2hEIn0=