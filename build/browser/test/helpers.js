var Confidential, doesMatch, now, random, target, targets, test;
import assert from "@dashkite/assert";
import { test as amenTest } from "@dashkite/amen";
import { confidential } from "panda-confidential";
Confidential = confidential();
test = function(name, value) {
    if (Array.isArray(value)) {
        return amenTest(name, value);
    } else {
        return amenTest({
            description: name,
            wait: false
        }, value);
    }
};
targets = function() {
    var _targets, ref, ref1;
    _targets = (ref = (ref1 = process.env.targets) != null ? ref1.split(/\s+/) : void 0) != null ? ref : [
        "all"
    ];
    return _targets;
}();
doesMatch = function(name) {
    var i, len, target;
    for(i = 0, len = targets.length; i < len; i++){
        target = targets[i];
        if (name.startsWith(target)) {
            return true;
        }
    }
    return false;
};
target = function(name, value) {
    if (targets.includes("all")) {
        return value;
    } else if (doesMatch(name)) {
        return value;
    } else {
        return null;
    }
};
random = async function() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var encoding, length;
    ({ length = 16, encoding = "base36" } = options);
    return Confidential.convert({
        from: "bytes",
        to: encoding
    }, await Confidential.randomBytes(length));
};
now = function() {
    return new Date().toISOString();
};
export { target, random, now, test, assert }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9oZWxwZXJzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLFlBQUEsRUFBQSxTQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBOztBQUFBLE9BQU8sTUFBUCxNQUFBOztBQUNBLE9BQUE7RUFBUyxJQUFBLFlBQVQ7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxZQUFUO0NBQUEsTUFBQTs7QUFFQSxZQUFBLEdBQWUsWUFBQSxDQUFBOztBQUVmLElBQUEsR0FBTyxRQUFBLENBQUUsSUFBRixFQUFRLEtBQVIsQ0FBQTtFQUNMLElBQUcsS0FBSyxDQUFDLE9BQU4sQ0FBYyxLQUFkLENBQUg7V0FDRSxRQUFBLENBQVMsSUFBVCxFQUFlLEtBQWYsRUFERjtHQUFBLE1BQUE7V0FHRSxRQUFBLENBQVM7TUFBQSxXQUFBLEVBQWEsSUFBYjtNQUFtQixJQUFBLEVBQU07SUFBekIsQ0FBVCxFQUF5QyxLQUF6QyxFQUhGOztBQURLOztBQU1QLE9BQUEsR0FBYSxDQUFBLFFBQUEsQ0FBQSxDQUFBO0FBQ2IsTUFBQSxRQUFBLEVBQUEsR0FBQSxFQUFBO0VBQUUsUUFBQSw2RkFBa0QsQ0FBRSxLQUFGO1NBQ2xEO0FBRlcsQ0FBQTs7QUFJYixTQUFBLEdBQVksUUFBQSxDQUFFLElBQUYsQ0FBQTtBQUNaLE1BQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFFLEtBQUEseUNBQUE7O0lBQ0UsSUFBRyxJQUFJLENBQUMsVUFBTCxDQUFnQixNQUFoQixDQUFIO0FBQ0UsYUFBTyxLQURUOztFQURGO1NBR0E7QUFKVTs7QUFNWixNQUFBLEdBQVMsUUFBQSxDQUFFLElBQUYsRUFBUSxLQUFSLENBQUE7RUFDUCxJQUFHLE9BQU8sQ0FBQyxRQUFSLENBQWlCLEtBQWpCLENBQUg7V0FDRSxNQURGO0dBQUEsTUFFSyxJQUFHLFNBQUEsQ0FBVSxJQUFWLENBQUg7V0FDSCxNQURHO0dBQUEsTUFBQTtXQUdILEtBSEc7O0FBSEU7O0FBU1QsTUFBQSxHQUFTLE1BQUEsUUFBQSxDQUFFLFVBQVUsQ0FBQSxDQUFaLENBQUE7QUFDVCxNQUFBLFFBQUEsRUFBQTtFQUFFLENBQUEsQ0FBRSxNQUFBLEdBQVMsRUFBWCxFQUFlLFFBQUEsR0FBVyxRQUExQixDQUFBLEdBQXVDLE9BQXZDO1NBQ0EsWUFBWSxDQUFDLE9BQWIsQ0FBcUI7SUFBQSxJQUFBLEVBQU0sT0FBTjtJQUFlLEVBQUEsRUFBSTtFQUFuQixDQUFyQixFQUNFLENBQUEsTUFBTSxZQUFZLENBQUMsV0FBYixDQUF5QixNQUF6QixDQUFOLENBREY7QUFGTzs7QUFLVCxHQUFBLEdBQU0sUUFBQSxDQUFBLENBQUE7U0FBRyxDQUFFLElBQUksSUFBSixDQUFBLENBQUYsQ0FBWSxDQUFDLFdBQWIsQ0FBQTtBQUFIOztBQUlOLE9BQUE7RUFDRSxNQURGO0VBRUUsTUFGRjtFQUdFLEdBSEY7RUFJRSxJQUpGO0VBS0UsTUFMRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcIkBkYXNoa2l0ZS9hc3NlcnRcIlxuaW1wb3J0IHsgdGVzdCBhcyBhbWVuVGVzdCB9IGZyb20gXCJAZGFzaGtpdGUvYW1lblwiXG5pbXBvcnQgeyBjb25maWRlbnRpYWwgfSBmcm9tIFwicGFuZGEtY29uZmlkZW50aWFsXCI7XG5cbkNvbmZpZGVudGlhbCA9IGNvbmZpZGVudGlhbCgpXG5cbnRlc3QgPSAoIG5hbWUsIHZhbHVlICkgLT5cbiAgaWYgQXJyYXkuaXNBcnJheSB2YWx1ZVxuICAgIGFtZW5UZXN0IG5hbWUsIHZhbHVlXG4gIGVsc2VcbiAgICBhbWVuVGVzdCBkZXNjcmlwdGlvbjogbmFtZSwgd2FpdDogZmFsc2UsIHZhbHVlXG5cbnRhcmdldHMgPSBkbyAtPlxuICBfdGFyZ2V0cyA9ICggcHJvY2Vzcy5lbnYudGFyZ2V0cz8uc3BsaXQgL1xccysvICkgPyBbIFwiYWxsXCIgXVxuICBfdGFyZ2V0c1xuXG5kb2VzTWF0Y2ggPSAoIG5hbWUgKSAtPlxuICBmb3IgdGFyZ2V0IGluIHRhcmdldHNcbiAgICBpZiBuYW1lLnN0YXJ0c1dpdGggdGFyZ2V0XG4gICAgICByZXR1cm4gdHJ1ZVxuICBmYWxzZVxuXG50YXJnZXQgPSAoIG5hbWUsIHZhbHVlICkgLT5cbiAgaWYgdGFyZ2V0cy5pbmNsdWRlcyBcImFsbFwiXG4gICAgdmFsdWVcbiAgZWxzZSBpZiBkb2VzTWF0Y2ggbmFtZVxuICAgIHZhbHVlXG4gIGVsc2VcbiAgICBudWxsXG5cblxucmFuZG9tID0gKCBvcHRpb25zID0ge30gKSAtPlxuICB7IGxlbmd0aCA9IDE2LCBlbmNvZGluZyA9IFwiYmFzZTM2XCIgfSA9IG9wdGlvbnNcbiAgQ29uZmlkZW50aWFsLmNvbnZlcnQgZnJvbTogXCJieXRlc1wiLCB0bzogZW5jb2RpbmcsXG4gICAgYXdhaXQgQ29uZmlkZW50aWFsLnJhbmRvbUJ5dGVzIGxlbmd0aFxuXG5ub3cgPSAtPiAoIG5ldyBEYXRlICkudG9JU09TdHJpbmcoKVxuXG5cblxuZXhwb3J0IHtcbiAgdGFyZ2V0XG4gIHJhbmRvbVxuICBub3dcbiAgdGVzdFxuICBhc3NlcnRcbn1cbiJdfQ==
 //# sourceURL=test/helpers.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaGVscGVycy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tIFwiQGRhc2hraXRlL2Fzc2VydFwiXG5pbXBvcnQgeyB0ZXN0IGFzIGFtZW5UZXN0IH0gZnJvbSBcIkBkYXNoa2l0ZS9hbWVuXCJcbmltcG9ydCB7IGNvbmZpZGVudGlhbCB9IGZyb20gXCJwYW5kYS1jb25maWRlbnRpYWxcIjtcblxuQ29uZmlkZW50aWFsID0gY29uZmlkZW50aWFsKClcblxudGVzdCA9ICggbmFtZSwgdmFsdWUgKSAtPlxuICBpZiBBcnJheS5pc0FycmF5IHZhbHVlXG4gICAgYW1lblRlc3QgbmFtZSwgdmFsdWVcbiAgZWxzZVxuICAgIGFtZW5UZXN0IGRlc2NyaXB0aW9uOiBuYW1lLCB3YWl0OiBmYWxzZSwgdmFsdWVcblxudGFyZ2V0cyA9IGRvIC0+XG4gIF90YXJnZXRzID0gKCBwcm9jZXNzLmVudi50YXJnZXRzPy5zcGxpdCAvXFxzKy8gKSA/IFsgXCJhbGxcIiBdXG4gIF90YXJnZXRzXG5cbmRvZXNNYXRjaCA9ICggbmFtZSApIC0+XG4gIGZvciB0YXJnZXQgaW4gdGFyZ2V0c1xuICAgIGlmIG5hbWUuc3RhcnRzV2l0aCB0YXJnZXRcbiAgICAgIHJldHVybiB0cnVlXG4gIGZhbHNlXG5cbnRhcmdldCA9ICggbmFtZSwgdmFsdWUgKSAtPlxuICBpZiB0YXJnZXRzLmluY2x1ZGVzIFwiYWxsXCJcbiAgICB2YWx1ZVxuICBlbHNlIGlmIGRvZXNNYXRjaCBuYW1lXG4gICAgdmFsdWVcbiAgZWxzZVxuICAgIG51bGxcblxuXG5yYW5kb20gPSAoIG9wdGlvbnMgPSB7fSApIC0+XG4gIHsgbGVuZ3RoID0gMTYsIGVuY29kaW5nID0gXCJiYXNlMzZcIiB9ID0gb3B0aW9uc1xuICBDb25maWRlbnRpYWwuY29udmVydCBmcm9tOiBcImJ5dGVzXCIsIHRvOiBlbmNvZGluZyxcbiAgICBhd2FpdCBDb25maWRlbnRpYWwucmFuZG9tQnl0ZXMgbGVuZ3RoXG5cbm5vdyA9IC0+ICggbmV3IERhdGUgKS50b0lTT1N0cmluZygpXG5cblxuXG5leHBvcnQge1xuICB0YXJnZXRcbiAgcmFuZG9tXG4gIG5vd1xuICB0ZXN0XG4gIGFzc2VydFxufVxuIl0sIm5hbWVzIjpbIkNvbmZpZGVudGlhbCIsImRvZXNNYXRjaCIsIm5vdyIsInJhbmRvbSIsInRhcmdldCIsInRhcmdldHMiLCJ0ZXN0IiwiYXNzZXJ0IiwiYW1lblRlc3QiLCJjb25maWRlbnRpYWwiLCJuYW1lIiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJkZXNjcmlwdGlvbiIsIndhaXQiLCJfdGFyZ2V0cyIsInJlZiIsInJlZjEiLCJwcm9jZXNzIiwiZW52Iiwic3BsaXQiLCJpIiwibGVuIiwibGVuZ3RoIiwic3RhcnRzV2l0aCIsImluY2x1ZGVzIiwib3B0aW9ucyIsImVuY29kaW5nIiwiY29udmVydCIsImZyb20iLCJ0byIsInJhbmRvbUJ5dGVzIiwiRGF0ZSIsInRvSVNPU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSxjQUFBQyxXQUFBQyxLQUFBQyxRQUFBQyxRQUFBQyxTQUFBQztBQUFBLE9BQU9DLFlBQVAsbUJBQUE7QUFDQSxTQUFTRCxRQUFBRSxRQUFULFFBQUEsaUJBQUE7QUFDQSxTQUFTQyxZQUFULFFBQUEscUJBQUE7QUFFQVQsZUFBZVM7QUFFZkgsT0FBTyxTQUFFSSxJQUFGLEVBQVFDLEtBQVI7SUFDTCxJQUFHQyxNQUFNQyxPQUFOLENBQWNGLFFBQWpCO2VBQ0VILFNBQVNFLE1BQU1DO1dBRGpCO2VBR0VILFNBQVM7WUFBQU0sYUFBYUo7WUFBTUssTUFBTTtRQUF6QixHQUFnQ0o7O0FBSnRDO0FBTVBOLFVBQWE7SUFDYixJQUFBVyxVQUFBQyxLQUFBQztJQUFFRixXQUFBLEFBQUFDLENBQUFBLE1BQUEsQUFBQUMsQ0FBQUEsT0FBQUMsUUFBQUMsR0FBQSxDQUFBZixPQUFBLEtBQUEsT0FBQWEsS0FBQUcsS0FBQSxDQUFBLFNBQUEsS0FBQSxDQUFBLEtBQUEsT0FBQUosTUFBa0Q7UUFBRTtLQUFGO1dBQ2xERDtBQUZXO0FBSWJmLFlBQVksU0FBRVMsSUFBRjtJQUNaLElBQUFZLEdBQUFDLEtBQUFuQjtJQUFFLElBQUFrQixJQUFBLEdBQUFDLE1BQUFsQixRQUFBbUIsTUFBQSxFQUFBRixJQUFBQyxLQUFBRCxJQUFBOztRQUNFLElBQUdaLEtBQUtlLFVBQUwsQ0FBZ0JyQixTQUFuQjtZQUNFLE9BQU87O0lBRlg7V0FHQTtBQUpVO0FBTVpBLFNBQVMsU0FBRU0sSUFBRixFQUFRQyxLQUFSO0lBQ1AsSUFBR04sUUFBUXFCLFFBQVIsQ0FBaUIsUUFBcEI7ZUFDRWY7V0FDRyxJQUFHVixVQUFVUyxPQUFiO2VBQ0hDO1dBREc7ZUFHSDs7QUFOSztBQVNUUixTQUFTO1FBQUV3QixVQUFBQSxpRUFBVSxDQUFBO0lBQ3JCLElBQUFDLFVBQUFKO0lBQUUsQ0FBQSxFQUFFQSxTQUFTLEVBQVgsRUFBZUksV0FBVyxRQUExQixFQUFBLEdBQXVDRCxPQUFBO1dBQ3ZDM0IsYUFBYTZCLE9BQWIsQ0FBcUI7UUFBQUMsTUFBTTtRQUFTQyxJQUFJSDtJQUFuQixHQUNuQixNQUFNNUIsYUFBYWdDLFdBQWIsQ0FBeUJSO0FBSDFCO0FBS1R0QixNQUFNO1dBQUcsQUFBRSxJQUFJK0IsT0FBT0MsV0FBYjtBQUFIO0FBSU4sU0FDRTlCLE1BREYsRUFFRUQsTUFGRixFQUdFRCxHQUhGLEVBSUVJLElBSkYsRUFLRUMsTUFMRiJ9