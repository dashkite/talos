"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "basic", {
    enumerable: true,
    get: function() {
        return test;
    }
});
const _src = require("../../src");
const _sync = require("../../src/sync");
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _helpers = /*#__PURE__*/ _interop_require_wildcard(require("../helpers"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var add, grow, test;
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = _src.Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = _src.Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        _helpers.test("start", _helpers.target("sync", function() {
            var cycle;
            cycle = (0, _sync.start)(A);
            return _helpers.assert(_type.isIterator(cycle));
        })),
        _helpers.test("run while consuming on events", _helpers.target("sync", function() {
            var cycle, events, ref, talos;
            events = [
                1,
                2,
                3
            ];
            cycle = (0, _sync.start)(A, {
                sum: 0
            }, events);
            talos = (0, _sync.run)(cycle);
            return _helpers.assert.equal(6, talos != null ? (ref = talos.context) != null ? ref.sum : void 0 : void 0);
        })),
        _helpers.test("run without events and reconsume context", _helpers.target("sync", function() {
            var cycle, ref, talos;
            cycle = (0, _sync.start)(B, {
                product: 1
            });
            talos = (0, _sync.run)(cycle);
            return _helpers.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        _helpers.test("build", _helpers.target("sync", function() {
            var f, ref, talos;
            f = (0, _sync.build)(B);
            _helpers.assert(_type.isFunction(f));
            talos = f({
                product: 1
            });
            return _helpers.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        _helpers.test("pipe", _helpers.target("sync", function() {
            var a, b, c, context, f;
            a = function(talos) {
                return talos.context.sum = 1;
            };
            b = function(talos) {
                return talos.context.sum += 2;
            };
            c = function(talos) {
                return talos.context.sum += 3;
            };
            f = (0, _sync.pipe)([
                a,
                b,
                c
            ]);
            _helpers.assert(_type.isFunction(f));
            context = f({});
            return _helpers.assert.equal(6, context != null ? context.sum : void 0);
        })),
        _helpers.test("pipeWith", _helpers.target("sync", function() {
            var a, b, c, context, f, log;
            a = function(talos) {
                return talos.context.sum = 1;
            };
            b = function(talos) {
                return talos.context.sum += 2;
            };
            c = function(talos) {
                return talos.context.sum += 3;
            };
            log = function(talos) {
                var base;
                if ((base = talos.context).product == null) {
                    base.product = 1;
                }
                return talos.context.product *= talos.context.sum;
            };
            // console.log talos.context.product
            f = (0, _sync.pipeWith)(log, [
                a,
                b,
                c
            ]);
            _helpers.assert(_type.isFunction(f));
            context = f({});
            _helpers.assert.equal(6, context != null ? context.sum : void 0);
            return _helpers.assert.equal(18, context != null ? context.product : void 0);
        }))
    ];
};
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy90ZXN0L3N5bmMvYmFzaWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsR0FBQSxFQUFBLElBQUEsRUFBQTs7QUFBQSxPQUFBO0VBQVMsT0FBVDtFQUFrQixLQUFsQjtFQUF5QixNQUF6QjtFQUFpQyxJQUFqQztDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLEtBQVQ7RUFBZ0IsR0FBaEI7RUFBcUIsS0FBckI7RUFBNEIsSUFBNUI7RUFBa0MsUUFBbEM7Q0FBQSxNQUFBOztBQUNBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFFQSxHQUFBLEdBQU0sUUFBQSxDQUFFLEtBQUYsRUFBUyxLQUFULENBQUE7U0FDSixLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsSUFBcUI7QUFEakI7O0FBRU4sSUFBQSxHQUFPLFFBQUEsQ0FBRSxLQUFGLENBQUE7U0FDTCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQWQsSUFBeUI7QUFEcEI7O0FBSVAsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxDQUFBLEVBQUE7RUFBRSxDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FDRjtJQUFBLEtBQUEsRUFDRTtNQUFBLElBQUEsRUFDRTtRQUFBLEdBQUEsRUFBSztNQUFMO0lBREYsQ0FERjtJQUdBLElBQUEsRUFDRTtNQUFBLElBQUEsRUFDRTtRQUFBLEdBQUEsRUFBSztNQUFMO0lBREY7RUFKRixDQURFO0VBUUosQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQ0Y7SUFBQSxLQUFBLEVBQ0U7TUFBQSxLQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBREY7SUFHQSxLQUFBLEVBQ0U7TUFBQSxNQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBSkY7SUFNQSxNQUFBLEVBQ0U7TUFBQSxHQUFB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cG9ydCB7IE1hY2hpbmUsIFRhbG9zLCAkc3RhcnQsICRlbmQgfSBmcm9tIFwiLi4vLi4vc3JjXCJcbmltcG9ydCB7IHN0YXJ0LCBydW4sIGJ1aWxkLCBwaXBlLCBwaXBlV2l0aCB9IGZyb20gXCIuLi8uLi9zcmMvc3luY1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbmFkZCA9ICggdGFsb3MsIGV2ZW50ICkgLT5cbiAgdGFsb3MuY29udGV4dC5zdW0gKz0gZXZlbnRcbmdyb3cgPSAoIHRhbG9zICkgLT5cbiAgdGFsb3MuY29udGV4dC5wcm9kdWN0ICo9IDJcblxuXG50ZXN0ID0gLT5cbiAgQSA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBjeWNsZSA9IHN0YXJ0IEFcbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNJdGVyYXRvciBjeWNsZVxuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIGNvbnN1bWluZyBvbiBldmVudHNcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBldmVudHMgPSBbIDEsIDIsIDMgXVxuICAgICAgY3ljbGUgPSBzdGFydCBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgdGFsb3MgPSBydW4gY3ljbGVcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIHRhbG9zPy5jb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcInJ1biB3aXRob3V0IGV2ZW50cyBhbmQgcmVjb25zdW1lIGNvbnRleHRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBjeWNsZSA9IHN0YXJ0IEIsIHByb2R1Y3Q6IDFcbiAgICAgIHRhbG9zID0gcnVuIGN5Y2xlXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJidWlsZFwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGYgPSBidWlsZCBCXG4gICAgICBoLmFzc2VydCBUeXBlLmlzRnVuY3Rpb24gZlxuICAgICAgdGFsb3MgPSBmIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcInBpcGVcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSAyXG4gICAgICBjID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IDMgXG5cbiAgICAgIGYgPSBwaXBlIFsgYSwgYiwgYyBdXG4gICAgICBoLmFzc2VydCBUeXBlLmlzRnVuY3Rpb24gZlxuICAgICAgY29udGV4dCA9IGYge31cbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIGNvbnRleHQ/LnN1bVxuXG4gICAgaC50ZXN0IFwicGlwZVdpdGhcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSAyXG4gICAgICBjID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IDMgXG4gICAgICBsb2cgPSAoIHRhbG9zICkgLT5cbiAgICAgICAgdGFsb3MuY29udGV4dC5wcm9kdWN0ID89IDEgXG4gICAgICAgIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSB0YWxvcy5jb250ZXh0LnN1bVxuICAgICAgICAjIGNvbnNvbGUubG9nIHRhbG9zLmNvbnRleHQucHJvZHVjdFxuXG4gICAgICBmID0gcGlwZVdpdGggbG9nLCBbIGEsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBmIHt9XG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCBjb250ZXh0Py5zdW1cbiAgICAgIGguYXNzZXJ0LmVxdWFsIDE4LCBjb250ZXh0Py5wcm9kdWN0XG5cbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXX0=
 //# sourceURL=/@dashkite/talos/test/sync/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9zeW5jL2Jhc2ljLmNvZmZlZSIsIjxhbm9uPiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWNoaW5lLCBUYWxvcywgJHN0YXJ0LCAkZW5kIH0gZnJvbSBcIi4uLy4uL3NyY1wiXG5pbXBvcnQgeyBzdGFydCwgcnVuLCBidWlsZCwgcGlwZSwgcGlwZVdpdGggfSBmcm9tIFwiLi4vLi4vc3JjL3N5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgY3ljbGUgPSBzdGFydCBBXG4gICAgICBoLmFzc2VydCBUeXBlLmlzSXRlcmF0b3IgY3ljbGVcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgb24gZXZlbnRzXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyAxLCAyLCAzIF1cbiAgICAgIGN5Y2xlID0gc3RhcnQgQSwgc3VtOiAwLCBldmVudHNcbiAgICAgIHRhbG9zID0gcnVuIGN5Y2xlXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcz8uY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgY3ljbGUgPSBzdGFydCBCLCBwcm9kdWN0OiAxXG4gICAgICB0YWxvcyA9IHJ1biBjeWNsZVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiYnVpbGRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBmID0gYnVpbGQgQlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIHRhbG9zID0gZiBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJwaXBlXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMlxuICAgICAgYyA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSAzIFxuXG4gICAgICBmID0gcGlwZSBbIGEsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBmIHt9XG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCBjb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcInBpcGVXaXRoXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMlxuICAgICAgYyA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSAzIFxuICAgICAgbG9nID0gKCB0YWxvcyApIC0+XG4gICAgICAgIHRhbG9zLmNvbnRleHQucHJvZHVjdCA/PSAxIFxuICAgICAgICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gdGFsb3MuY29udGV4dC5zdW1cbiAgICAgICAgIyBjb25zb2xlLmxvZyB0YWxvcy5jb250ZXh0LnByb2R1Y3RcblxuICAgICAgZiA9IHBpcGVXaXRoIGxvZywgWyBhLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gZiB7fVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgY29udGV4dD8uc3VtXG4gICAgICBoLmFzc2VydC5lcXVhbCAxOCwgY29udGV4dD8ucHJvZHVjdFxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBiYXNpYyB9IixudWxsXSwibmFtZXMiOlsiYmFzaWMiLCJ0ZXN0IiwiYWRkIiwiZ3JvdyIsInRhbG9zIiwiZXZlbnQiLCJjb250ZXh0Iiwic3VtIiwicHJvZHVjdCIsIkEiLCJCIiwiTWFjaGluZSIsIm1ha2UiLCJzdGFydCIsImhvbGQiLCJydW4iLCJmaXJzdCIsInNlY29uZCIsImVuZCIsImgiLCJ0YXJnZXQiLCJjeWNsZSIsImFzc2VydCIsIlR5cGUiLCJpc0l0ZXJhdG9yIiwiZXZlbnRzIiwicmVmIiwiZXF1YWwiLCJmIiwiYnVpbGQiLCJpc0Z1bmN0aW9uIiwiYSIsImIiLCJjIiwicGlwZSIsImxvZyIsImJhc2UiLCJwaXBlV2l0aCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFpRlNBOzs7ZUFBQUM7OztxQkFqRlQ7c0JBQ0E7OERBQ0E7aUVBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFIQSxJQUFBQyxLQUFBQyxNQUFBRjtBQUtBQyxNQUFNLFNBQUVFLEtBQUYsRUFBU0MsS0FBVDtXQUNKRCxNQUFNRSxPQUFPLENBQUNDLEdBQWQsSUFBcUJGO0FBRGpCO0FBRU5GLE9BQU8sU0FBRUMsS0FBRjtXQUNMQSxNQUFNRSxPQUFPLENBQUNFLE9BQWQsSUFBeUI7QUFEcEI7QUFJUFAsT0FBTztJQUNQLElBQUFRLEdBQUFDO0lBQUVELElBQUlFLFlBQU8sQ0FBQ0MsSUFBUixDQUNGO1FBQUFDLE9BQ0U7WUFBQUMsTUFDRTtnQkFBQUMsS0FBS2I7WUFBTDtRQURGO1FBRUZZLE1BQ0U7WUFBQUEsTUFDRTtnQkFBQUMsS0FBS2I7WUFBTDtRQURGO0lBSkY7SUFPRlEsSUFBSUMsWUFBTyxDQUFDQyxJQUFSLENBQ0Y7UUFBQUMsT0FDRTtZQUFBRyxPQUNFO2dCQUFBRCxLQUFLWjtZQUFMO1FBREY7UUFFRmEsT0FDRTtZQUFBQyxRQUNFO2dCQUFBRixLQUFLWjtZQUFMO1FBREY7UUFFRmMsUUFDRTtZQUFBQyxLQUNFO2dCQUFBSCxLQUFLWjtZQUFMO1FBREY7SUFQRjtXQVdGO1FBQ0VnQixTQUFFbEIsSUFBRixDQUFPLFNBQVNrQixTQUFFQyxNQUFGLENBQVMsUUFBUTtZQUNyQyxJQUFBQztZQUFNQSxRQUFRUixJQUFBQSxXQUFBLEVBQU1KO21CQUNkVSxTQUFFRyxNQUFGLENBQVNDLE1BQUtDLFVBQUwsQ0FBZ0JIO1FBRk07UUFJakNGLFNBQUVsQixJQUFGLENBQU8saUNBQWlDa0IsU0FBRUMsTUFBRixDQUFTLFFBQVE7WUFDN0QsSUFBQUMsT0FBQUksUUFBQUMsS0FBQXRCO1lBQU1xQixTQUFTO2dCQUFFO2dCQUFHO2dCQUFHO2FBQVI7WUFDVEosUUFBUVIsSUFBQUEsV0FBQSxFQUFNSixHQUFHO2dCQUFBRixLQUFLO1lBQUwsR0FBUWtCO1lBQ3pCckIsUUFBUVcsSUFBQUEsU0FBQSxFQUFJTTttQkFDWkYsU0FBRUcsTUFBTSxDQUFDSyxLQUFULENBQWUsdURBQW1CcEIsR0FBQSxHQUFBLEtBQUEsSUFBQSxLQUFBO1FBSnFCO1FBTXpEWSxTQUFFbEIsSUFBRixDQUFPLDRDQUE0Q2tCLFNBQUVDLE1BQUYsQ0FBUyxRQUFRO1lBQ3hFLElBQUFDLE9BQUFLLEtBQUF0QjtZQUFNaUIsUUFBUVIsSUFBQUEsV0FBQSxFQUFNSCxHQUFHO2dCQUFBRixTQUFTO1lBQVQ7WUFDakJKLFFBQVFXLElBQUFBLFNBQUEsRUFBSU07bUJBQ1pGLFNBQUVHLE1BQU0sQ0FBQ0ssS0FBVCxDQUFlLHVDQUFrQm5CLE9BQUEsR0FBQSxLQUFBO1FBSGlDO1FBS3BFVyxTQUFFbEIsSUFBRixDQUFPLFNBQVNrQixTQUFFQyxNQUFGLENBQVMsUUFBUTtZQUNyQyxJQUFBUSxHQUFBRixLQUFBdEI7WUFBTXdCLElBQUlDLElBQUFBLFdBQUEsRUFBTW5CO1lBQ1ZTLFNBQUVHLE1BQUYsQ0FBU0MsTUFBS08sVUFBTCxDQUFnQkY7WUFDekJ4QixRQUFRd0IsRUFBRTtnQkFBQXBCLFNBQVM7WUFBVDttQkFDVlcsU0FBRUcsTUFBTSxDQUFDSyxLQUFULENBQWUsdUNBQWtCbkIsT0FBQSxHQUFBLEtBQUE7UUFKRjtRQU1qQ1csU0FBRWxCLElBQUYsQ0FBTyxRQUFRa0IsU0FBRUMsTUFBRixDQUFTLFFBQVE7WUFDcEMsSUFBQVcsR0FBQUMsR0FBQUMsR0FBQTNCLFNBQUFzQjtZQUFNRyxJQUFJLFNBQUUzQixLQUFGO3VCQUFhQSxNQUFNRSxPQUFPLENBQUNDLEdBQWQsR0FBb0I7WUFBakM7WUFDSnlCLElBQUksU0FBRTVCLEtBQUY7dUJBQWFBLE1BQU1FLE9BQU8sQ0FBQ0MsR0FBZCxJQUFxQjtZQUFsQztZQUNKMEIsSUFBSSxTQUFFN0IsS0FBRjt1QkFBYUEsTUFBTUUsT0FBTyxDQUFDQyxHQUFkLElBQXFCO1lBQWxDO1lBRUpxQixJQUFJTSxJQUFBQSxVQUFBLEVBQUs7Z0JBQUVIO2dCQUFHQztnQkFBR0M7YUFBYjtZQUNKZCxTQUFFRyxNQUFGLENBQVNDLE1BQUtPLFVBQUwsQ0FBZ0JGO1lBQ3pCdEIsVUFBVXNCLEVBQUUsQ0FBQTttQkFDWlQsU0FBRUcsTUFBTSxDQUFDSyxLQUFULENBQWUscUJBQUdyQixRQUFTQyxHQUFBLEdBQUEsS0FBQTtRQVJHO1FBVWhDWSxTQUFFbEIsSUFBRixDQUFPLFlBQVlrQixTQUFFQyxNQUFGLENBQVMsUUFBUTtZQUN4QyxJQUFBVyxHQUFBQyxHQUFBQyxHQUFBM0IsU0FBQXNCLEdBQUFPO1lBQU1KLElBQUksU0FBRTNCLEtBQUY7dUJBQWFBLE1BQU1FLE9BQU8sQ0FBQ0MsR0FBZCxHQUFvQjtZQUFqQztZQUNKeUIsSUFBSSxTQUFFNUIsS0FBRjt1QkFBYUEsTUFBTUUsT0FBTyxDQUFDQyxHQUFkLElBQXFCO1lBQWxDO1lBQ0owQixJQUFJLFNBQUU3QixLQUFGO3VCQUFhQSxNQUFNRSxPQUFPLENBQUNDLEdBQWQsSUFBcUI7WUFBbEM7WUFDSjRCLE1BQU0sU0FBRS9CLEtBQUY7Z0JBQ1osSUFBQWdDOzt5QkFBc0I1QixPQUFBLEdBQVc7O3VCQUN6QkosTUFBTUUsT0FBTyxDQUFDRSxPQUFkLElBQXlCSixNQUFNRSxPQUFPLENBQUNDLEdBQUE7WUFGbkM7O1lBS05xQixJQUFJUyxJQUFBQSxjQUFBLEVBQVNGLEtBQUs7Z0JBQUVKO2dCQUFHQztnQkFBR0M7YUFBdEI7WUFDSmQsU0FBRUcsTUFBRixDQUFTQyxNQUFLTyxVQUFMLENBQWdCRjtZQUN6QnRCLFVBQVVzQixFQUFFLENBQUE7WUFDWlQsU0FBRUcsTUFBTSxDQUFDSyxLQUFULENBQWUscUJBQUdyQixRQUFTQyxHQUFBLEdBQUEsS0FBQTttQkFDM0JZLFNBQUVHLE1BQU0sQ0FBQ0ssS0FBVCxDQUFlLHNCQUFJckIsUUFBU0UsT0FBQSxHQUFBLEtBQUE7UUFiTTs7QUFyRGpDIn0=