"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    step: function() {
        return step;
    },
    debug: function() {
        return debug;
    },
    matchVertex: function() {
        return matchVertex;
    },
    matchEdge: function() {
        return matchEdge;
    },
    run: function() {
        return run;
    },
    move: function() {
        return move;
    }
});
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _predicate = require("@dashkite/joy/predicate");
const _generic = require("@dashkite/joy/generic");
const _containers = require("../containers");
const _errors = /*#__PURE__*/ _interop_require_wildcard(require("../containers/errors"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var _debug, _step, debug, matchEdge, matchVertex, move, run, step;
matchVertex = function(graph, talos) {
    var vertex;
    vertex = graph.get(talos);
    if (vertex == null) {
        talos.throw(_errors.InvalidState.make("talos state is not in graph"));
    }
    return vertex;
};
matchEdge = async function(vertex, talos, transforms) {
    var edge, i, len, ref;
    ref = vertex.edges;
    for(i = 0, len = ref.length; i < len; i++){
        edge = ref[i];
        if (await edge.accept(talos, ...transforms) === true) {
            return edge;
        }
    }
};
run = async function(edge, talos, transforms) {
    var error;
    if (edge.run != null) {
        try {
            return await edge.run(talos, ...transforms);
        } catch (error1) {
            error = error1;
            return talos.throw(_errors.FailedRun.make(error, "encountered an error while running edge function"));
        }
    }
};
move = async function(edge, talos, transforms) {
    var error;
    try {
        return await edge.move(talos, ...transforms);
    } catch (error1) {
        error = error1;
        return talos.throw(_errors.FailedMove.make(error, "encountered an error while moving states"));
    }
};
step = (0, _generic.generic)({
    name: "step talos",
    default: function(...args) {
        throw new Error(`step: input is malformed ${JSON.stringify(args)}`);
    }
});
(0, _generic.generic)(step, _containers.Graph.isType, _containers.Talos.isType, _type.isAny, function(graph, talos, ...transforms) {
    return _step(graph, talos, transforms);
});
(0, _generic.generic)(step, _containers.Graph.isType, _containers.Talos.isType, function(graph, talos) {
    return _step(graph, talos, []);
});
(0, _generic.generic)(step, _containers.Graph.isType, (0, _predicate.negate)(_containers.Talos.isType), function(graph, ...transforms) {
    return _step(graph, _containers.Talos.make(), transforms);
});
_step = async function(graph, talos, transforms) {
    var edge, vertex;
    vertex = matchVertex(graph, talos);
    if (talos.halted) {
        return talos;
    }
    edge = await matchEdge(vertex, talos, transforms);
    if (edge == null) {
        return talos;
    }
    if (talos.halted) {
        return talos;
    }
    await run(edge, talos, transforms);
    if (talos.halted) {
        return talos;
    }
    await move(edge, talos, transforms);
    return talos;
};
debug = (0, _generic.generic)({
    name: "debug step talos",
    default: function(...args) {
        throw new Error(`debug step: input is malformed ${JSON.stringify(args)}`);
    }
});
(0, _generic.generic)(debug, _containers.Graph.isType, _containers.Talos.isType, _type.isAny, function(graph, talos, ...transforms) {
    return _debug(graph, talos, transforms);
});
(0, _generic.generic)(debug, _containers.Graph.isType, _containers.Talos.isType, function(graph, talos) {
    return _debug(graph, talos, []);
});
(0, _generic.generic)(debug, _containers.Graph.isType, (0, _predicate.negate)(_containers.Talos.isType), function(graph, ...transforms) {
    return _debug(graph, _containers.Talos.make(), transforms);
});
_debug = async function(graph, talos, transforms) {
    var edge, vertex;
    console.log("starting step", {
        graph,
        talos,
        transforms
    });
    vertex = matchVertex(graph, talos);
    if (talos.halted) {
        console.error("encountered error matching vertex", talos.error.error, talos);
        return talos;
    } else {
        console.log("vertex matched", {
            vertex,
            talos
        });
    }
    edge = await matchEdge(vertex, talos, transforms);
    if (edge == null) {
        console.log("no edge match, ignoring transforms");
        return talos;
    }
    if (talos.halted) {
        console.error("encountered error matching edge", talos.error.error, talos);
        return talos;
    } else {
        console.log("edge matched", {
            edge,
            talos
        });
    }
    await run(edge, talos, transforms);
    if (talos.halted) {
        console.error("encountered error running edge function", talos.error.error, talos);
        return talos;
    } else {
        console.log("edge function complete", {
            talos
        });
    }
    await move(edge, talos, transforms);
    if (talos.halted) {
        console.error("encountered error running move function", talos.error.error, talos);
        return talos;
    } else {
        console.log("talos move complete", {
            talos
        });
    }
    return talos;
};
 //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=/@dashkite/talos/src/stable/async.coffee

//# sourceMappingURL=data:application/json;base64,