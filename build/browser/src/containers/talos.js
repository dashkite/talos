var Talos, isError, isState, make;
import * as Meta from "@dashkite/joy/metaclass";
import * as Type from "@dashkite/joy/type";
import * as Value from "@dashkite/joy/value";
import { $start, $halt, atStart, atHalt, atPause } from "../states";
import { generic } from "@dashkite/joy/generic";
import { oneOf } from "../helpers";
import { TalosError } from "./errors";
isState = oneOf([
    Type.isString,
    Type.isSymbol
]);
isError = oneOf([
    Type.isUndefined,
    TalosError.isType
]);
make = generic({
    name: "talos make",
    default: function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        throw new Error(`Talos.make: input is malformed ${JSON.stringify(args)}`);
    }
});
generic(make, isState, Type.isObject, isError, function(state, context, error) {
    return new Talos({
        state,
        context,
        error
    });
});
generic(make, function() {
    return make($start, {}, null);
});
generic(make, isState, Type.isObject, function(state, context) {
    return make(state, context, null);
});
generic(make, isState, function(state) {
    return make(state, {}, null);
});
generic(make, Type.isObject, function(context) {
    return make($start, context, null);
});
Talos = (function() {
    class Talos {
        constructor({ state: state1, context: context1, error: error1 }){
            this.state = state1;
            this.context = context1;
            this.error = error1;
        }
        halt() {
            return this.state = $halt;
        }
        throw(error) {
            this.halt();
            return this.error = error != null ? error : TalosError.make();
        }
        reset(state) {
            this.state = state != null ? state : $start;
            this.context = {};
            return this.error = null;
        }
        clone() {
            var context;
            context = Value.clone(this.context);
            return new Talos({
                state: this.state,
                context,
                error: this.error
            });
        }
    }
    ;
    Meta.mixin(Talos.prototype, [
        Meta.getters({
            starting: function() {
                return atStart(this.state);
            },
            halted: function() {
                return atHalt(this.state);
            },
            paused: function() {
                return atPause(this.state);
            },
            success: function() {
                return this.halted && this.error == null;
            },
            failure: function() {
                return this.halted && this.error != null;
            },
            running: function() {
                return !this.halted && !this.paused;
            }
        })
    ]);
    Talos.make = make;
    Talos.isType = Type.isType(Talos);
    return Talos;
}).call(this);
export { Talos }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL2NvbnRhaW5lcnMvdGFsb3MuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUE7O0FBQUEsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxTQUFQLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE1BQVQ7RUFBaUIsS0FBakI7RUFBd0IsT0FBeEI7RUFBaUMsTUFBakM7RUFBeUMsT0FBekM7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsS0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLFVBQVQ7Q0FBQSxNQUFBOztBQUdBLE9BQUEsR0FBVSxLQUFBLENBQU0sQ0FDZCxJQUFJLENBQUMsUUFEUyxFQUVkLElBQUksQ0FBQyxRQUZTLENBQU47O0FBS1YsT0FBQSxHQUFVLEtBQUEsQ0FBTSxDQUNkLElBQUksQ0FBQyxXQURTLEVBRWQsVUFBVSxDQUFDLE1BRkcsQ0FBTjs7QUFLVixJQUFBLEdBQU8sT0FBQSxDQUNMO0VBQUEsSUFBQSxFQUFNLFlBQU47RUFDQSxPQUFBLEVBQVMsUUFBQSxDQUFBLEdBQUUsSUFBRixDQUFBO0lBQ1AsTUFBTSxJQUFJLEtBQUosQ0FBVSxDQUFBLCtCQUFBLENBQUEsQ0FBa0MsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFmLENBQWxDLENBQUEsQ0FBVjtFQURDO0FBRFQsQ0FESzs7QUFLUCxPQUFBLENBQVEsSUFBUixFQUFjLE9BQWQsRUFBdUIsSUFBSSxDQUFDLFFBQTVCLEVBQXNDLE9BQXRDLEVBQStDLFFBQUEsQ0FBRSxLQUFGLEVBQVMsT0FBVCxFQUFrQixLQUFsQixDQUFBO1NBQzdDLElBQUksS0FBSixDQUFVLENBQUUsS0FBRixFQUFTLE9BQVQsRUFBa0IsS0FBbEIsQ0FBVjtBQUQ2QyxDQUEvQzs7QUFHQSxPQUFBLENBQVEsSUFBUixFQUFjLFFBQUEsQ0FBQSxDQUFBO1NBQ1osSUFBQSxDQUFLLE1BQUwsRUFBYSxDQUFBLENBQWIsRUFBaUIsSUFBakI7QUFEWSxDQUFkOztBQUdBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsT0FBZCxFQUF1QixJQUFJLENBQUMsUUFBNUIsRUFBc0MsUUFBQSxDQUFFLEtBQUYsRUFBUyxPQUFULENBQUE7U0FDcEMsSUFBQSxDQUFLLEtBQUwsRUFBWSxPQUFaLEVBQXFCLElBQXJCO0FBRG9DLENBQXRDOztBQUdBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsT0FBZCxFQUF1QixRQUFBLENBQUUsS0FBRixDQUFBO1NBQ3JCLElBQUEsQ0FBSyxLQUFMLEVBQVksQ0FBQSxDQUFaLEVBQWdCLElBQWhCO0FBRHFCLENBQXZCOztBQUdBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsSUFBSSxDQUFDLFFBQW5CLEVBQTZCLFFBQUEsQ0FBRSxPQUFGLENBQUE7U0FDM0IsSUFBQSxDQUFLLE1BQUwsRUFBYSxPQUFiLEVBQXNCLElBQXRCO0FBRDJCLENBQTdCOztBQUdNO0VBQU4sTUFBQSxNQUFBO0lBQ0UsV0FBYSxDQUFDO1FBQUcsYUFBSDtRQUFXLGlCQUFYO1FBQXFCO01BQXJCLENBQUQsQ0FBQTtNQUFHLElBQUMsQ0FBQTtNQUFPLElBQUMsQ0FBQTtNQUFTLElBQUMsQ0FBQTtJQUF0Qjs7SUFlYixJQUFNLENBQUEsQ0FBQTthQUNKLElBQUMsQ0FBQSxLQUFELEdBQVM7SUFETDs7SUFHTixLQUFPLENBQUUsS0FBRixDQUFBO01BQ0wsSUFBQyxDQUFBLElBQUQsQ0FBQTthQUNBLElBQUMsQ0FBQSxLQUFELG1CQUFTLFFBQVEsVUFBVSxDQUFDLElBQVgsQ0FBQTtJQUZaOztJQUlQLEtBQU8sQ0FBRSxLQUFGLENBQUE7TUFDTCxJQUFDLENBQUEsS0FBRCxtQkFBUyxRQUFRO01BQ2pCLElBQUMsQ0FBQSxPQUFELEdBQVcsQ0FBQTthQUNYLElBQUMsQ0FBQSxLQUFELEdBQVM7SUFISjs7SUFLUCxLQUFPLENBQUEsQ0FBQTtBQUNULFVBQUE7TUFBSSxPQUFBLEdBQVUsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFDLENBQUEsT0FBYjthQUNWLElBQUksS0FBSixDQUFVLENBQUcsT0FBRCxJQUFDLENBQUEsS0FBSCxFQUFVLE9BQVYsRUFBb0IsT0FBRCxJQUFDLENBQUEsS0FBcEIsQ0FBVjtJQUZLOztFQTVCVDs7RUFHRSxJQUFJLENBQUMsS0FBTCxDQUFXLEtBQUMsQ0FBQSxTQUFaLEVBQWdCO0lBQ2QsSUFBSSxDQUFDLE9BQUwsQ0FDRTtNQUFBLFFBQUEsRUFBVSxRQUFBLENBQUEsQ0FBQTtlQUFHLE9BQUEsQ0FBUSxJQUFDLENBQUEsS0FBVDtNQUFILENBQVY7TUFDQSxNQUFBLEVBQVEsUUFBQSxDQUFBLENBQUE7ZUFBRyxNQUFBLENBQU8sSUFBQyxDQUFBLEtBQVI7TUFBSCxDQURSO01BRUEsTUFBQSxFQUFRLFFBQUEsQ0FBQSxDQUFBO2VBQUcsT0FBQSxDQUFRLElBQUMsQ0FBQSxLQUFUO01BQUgsQ0FGUjtNQUdBLE9BQUEsRUFBUyxRQUFBLENBQUEsQ0FBQTtlQUFHLElBQUMsQ0FBQSxNQUFELElBQVk7TUFBZixDQUhUO01BSUEsT0FBQSxFQUFTLFFBQUEsQ0FBQSxDQUFBO2VBQUcsSUFBQyxDQUFBLE1BQUQsSUFBVztNQUFkLENBSlQ7TUFLQSxPQUFBLEVBQVMsUUFBQSxDQUFBLENBQUE7ZUFBRyxDQUFDLElBQUMsQ0FBQSxNQUFGLElBQVksQ0FBQyxJQUFDLENBQUE7TUFBakI7SUFMVCxDQURGLENBRGM7R0FBaEI7O0VBVUEsS0FBQyxDQUFBLElBQUQsR0FBTzs7RUFDUCxLQUFDLENBQUEsTUFBRCxHQUFTLElBQUksQ0FBQyxNQUFMLENBQVksS0FBWjs7Ozs7O0FBbUJYLE9BQUE7RUFDRSxLQURGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTWV0YSBmcm9tIFwiQGRhc2hraXRlL2pveS9tZXRhY2xhc3NcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIFZhbHVlIGZyb20gXCJAZGFzaGtpdGUvam95L3ZhbHVlXCJcbmltcG9ydCB7ICRzdGFydCwgJGhhbHQsIGF0U3RhcnQsIGF0SGFsdCwgYXRQYXVzZSB9IGZyb20gXCIuLi9zdGF0ZXNcIlxuaW1wb3J0IHsgZ2VuZXJpYyB9IGZyb20gXCJAZGFzaGtpdGUvam95L2dlbmVyaWNcIlxuaW1wb3J0IHsgb25lT2YgfSBmcm9tIFwiLi4vaGVscGVyc1wiXG5pbXBvcnQgeyBUYWxvc0Vycm9yIH0gZnJvbSBcIi4vZXJyb3JzXCJcblxuXG5pc1N0YXRlID0gb25lT2YgW1xuICBUeXBlLmlzU3RyaW5nXG4gIFR5cGUuaXNTeW1ib2xcbl1cblxuaXNFcnJvciA9IG9uZU9mIFtcbiAgVHlwZS5pc1VuZGVmaW5lZFxuICBUYWxvc0Vycm9yLmlzVHlwZVxuXVxuXG5tYWtlID0gZ2VuZXJpYyBcbiAgbmFtZTogXCJ0YWxvcyBtYWtlXCJcbiAgZGVmYXVsdDogKCBhcmdzLi4uICkgLT4gXG4gICAgdGhyb3cgbmV3IEVycm9yIFwiVGFsb3MubWFrZTogaW5wdXQgaXMgbWFsZm9ybWVkICN7SlNPTi5zdHJpbmdpZnkgYXJnc31cIlxuXG5nZW5lcmljIG1ha2UsIGlzU3RhdGUsIFR5cGUuaXNPYmplY3QsIGlzRXJyb3IsICggc3RhdGUsIGNvbnRleHQsIGVycm9yICkgLT5cbiAgbmV3IFRhbG9zIHsgc3RhdGUsIGNvbnRleHQsIGVycm9yIH1cblxuZ2VuZXJpYyBtYWtlLCAtPlxuICBtYWtlICRzdGFydCwge30sIG51bGxcblxuZ2VuZXJpYyBtYWtlLCBpc1N0YXRlLCBUeXBlLmlzT2JqZWN0LCAoIHN0YXRlLCBjb250ZXh0ICkgLT5cbiAgbWFrZSBzdGF0ZSwgY29udGV4dCwgbnVsbFxuXG5nZW5lcmljIG1ha2UsIGlzU3RhdGUsICggc3RhdGUgKSAtPlxuICBtYWtlIHN0YXRlLCB7fSwgbnVsbFxuXG5nZW5lcmljIG1ha2UsIFR5cGUuaXNPYmplY3QsICggY29udGV4dCApIC0+XG4gIG1ha2UgJHN0YXJ0LCBjb250ZXh0LCBudWxsXG5cbmNsYXNzIFRhbG9zXG4gIGNvbnN0cnVjdG9yOiAoeyBAc3RhdGUsIEBjb250ZXh0LCBAZXJyb3IgfSkgLT5cblxuICBNZXRhLm1peGluIEA6OiwgW1xuICAgIE1ldGEuZ2V0dGVyc1xuICAgICAgc3RhcnRpbmc6IC0+IGF0U3RhcnQgQHN0YXRlXG4gICAgICBoYWx0ZWQ6IC0+IGF0SGFsdCBAc3RhdGVcbiAgICAgIHBhdXNlZDogLT4gYXRQYXVzZSBAc3RhdGVcbiAgICAgIHN1Y2Nlc3M6IC0+IEBoYWx0ZWQgJiYgIUBlcnJvcj9cbiAgICAgIGZhaWx1cmU6IC0+IEBoYWx0ZWQgJiYgQGVycm9yP1xuICAgICAgcnVubmluZzogLT4gIUBoYWx0ZWQgJiYgIUBwYXVzZWRcbiAgXVxuXG4gIEBtYWtlOiBtYWtlXG4gIEBpc1R5cGU6IFR5cGUuaXNUeXBlIEBcblxuICBoYWx0OiAtPlxuICAgIEBzdGF0ZSA9ICRoYWx0XG5cbiAgdGhyb3c6ICggZXJyb3IgKSAtPlxuICAgIEBoYWx0KClcbiAgICBAZXJyb3IgPSBlcnJvciA/IFRhbG9zRXJyb3IubWFrZSgpXG5cbiAgcmVzZXQ6ICggc3RhdGUgKSAtPlxuICAgIEBzdGF0ZSA9IHN0YXRlID8gJHN0YXJ0XG4gICAgQGNvbnRleHQgPSB7fVxuICAgIEBlcnJvciA9IG51bGxcblxuICBjbG9uZTogLT5cbiAgICBjb250ZXh0ID0gVmFsdWUuY2xvbmUgQGNvbnRleHRcbiAgICBuZXcgVGFsb3MgeyBAc3RhdGUsIGNvbnRleHQsIEBlcnJvciB9XG4gICAgICBcblxuZXhwb3J0IHtcbiAgVGFsb3Ncbn0iXX0=
 //# sourceURL=src/containers/talos.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250YWluZXJzL3RhbG9zLmNvZmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBNZXRhIGZyb20gXCJAZGFzaGtpdGUvam95L21ldGFjbGFzc1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgVmFsdWUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdmFsdWVcIlxuaW1wb3J0IHsgJHN0YXJ0LCAkaGFsdCwgYXRTdGFydCwgYXRIYWx0LCBhdFBhdXNlIH0gZnJvbSBcIi4uL3N0YXRlc1wiXG5pbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgeyBvbmVPZiB9IGZyb20gXCIuLi9oZWxwZXJzXCJcbmltcG9ydCB7IFRhbG9zRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnNcIlxuXG5cbmlzU3RhdGUgPSBvbmVPZiBbXG4gIFR5cGUuaXNTdHJpbmdcbiAgVHlwZS5pc1N5bWJvbFxuXVxuXG5pc0Vycm9yID0gb25lT2YgW1xuICBUeXBlLmlzVW5kZWZpbmVkXG4gIFRhbG9zRXJyb3IuaXNUeXBlXG5dXG5cbm1ha2UgPSBnZW5lcmljIFxuICBuYW1lOiBcInRhbG9zIG1ha2VcIlxuICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJUYWxvcy5tYWtlOiBpbnB1dCBpcyBtYWxmb3JtZWQgI3tKU09OLnN0cmluZ2lmeSBhcmdzfVwiXG5cbmdlbmVyaWMgbWFrZSwgaXNTdGF0ZSwgVHlwZS5pc09iamVjdCwgaXNFcnJvciwgKCBzdGF0ZSwgY29udGV4dCwgZXJyb3IgKSAtPlxuICBuZXcgVGFsb3MgeyBzdGF0ZSwgY29udGV4dCwgZXJyb3IgfVxuXG5nZW5lcmljIG1ha2UsIC0+XG4gIG1ha2UgJHN0YXJ0LCB7fSwgbnVsbFxuXG5nZW5lcmljIG1ha2UsIGlzU3RhdGUsIFR5cGUuaXNPYmplY3QsICggc3RhdGUsIGNvbnRleHQgKSAtPlxuICBtYWtlIHN0YXRlLCBjb250ZXh0LCBudWxsXG5cbmdlbmVyaWMgbWFrZSwgaXNTdGF0ZSwgKCBzdGF0ZSApIC0+XG4gIG1ha2Ugc3RhdGUsIHt9LCBudWxsXG5cbmdlbmVyaWMgbWFrZSwgVHlwZS5pc09iamVjdCwgKCBjb250ZXh0ICkgLT5cbiAgbWFrZSAkc3RhcnQsIGNvbnRleHQsIG51bGxcblxuY2xhc3MgVGFsb3NcbiAgY29uc3RydWN0b3I6ICh7IEBzdGF0ZSwgQGNvbnRleHQsIEBlcnJvciB9KSAtPlxuXG4gIE1ldGEubWl4aW4gQDo6LCBbXG4gICAgTWV0YS5nZXR0ZXJzXG4gICAgICBzdGFydGluZzogLT4gYXRTdGFydCBAc3RhdGVcbiAgICAgIGhhbHRlZDogLT4gYXRIYWx0IEBzdGF0ZVxuICAgICAgcGF1c2VkOiAtPiBhdFBhdXNlIEBzdGF0ZVxuICAgICAgc3VjY2VzczogLT4gQGhhbHRlZCAmJiAhQGVycm9yP1xuICAgICAgZmFpbHVyZTogLT4gQGhhbHRlZCAmJiBAZXJyb3I/XG4gICAgICBydW5uaW5nOiAtPiAhQGhhbHRlZCAmJiAhQHBhdXNlZFxuICBdXG5cbiAgQG1ha2U6IG1ha2VcbiAgQGlzVHlwZTogVHlwZS5pc1R5cGUgQFxuXG4gIGhhbHQ6IC0+XG4gICAgQHN0YXRlID0gJGhhbHRcblxuICB0aHJvdzogKCBlcnJvciApIC0+XG4gICAgQGhhbHQoKVxuICAgIEBlcnJvciA9IGVycm9yID8gVGFsb3NFcnJvci5tYWtlKClcblxuICByZXNldDogKCBzdGF0ZSApIC0+XG4gICAgQHN0YXRlID0gc3RhdGUgPyAkc3RhcnRcbiAgICBAY29udGV4dCA9IHt9XG4gICAgQGVycm9yID0gbnVsbFxuXG4gIGNsb25lOiAtPlxuICAgIGNvbnRleHQgPSBWYWx1ZS5jbG9uZSBAY29udGV4dFxuICAgIG5ldyBUYWxvcyB7IEBzdGF0ZSwgY29udGV4dCwgQGVycm9yIH1cbiAgICAgIFxuXG5leHBvcnQge1xuICBUYWxvc1xufSJdLCJuYW1lcyI6WyJUYWxvcyIsImlzRXJyb3IiLCJpc1N0YXRlIiwibWFrZSIsIk1ldGEiLCJUeXBlIiwiVmFsdWUiLCIkc3RhcnQiLCIkaGFsdCIsImF0U3RhcnQiLCJhdEhhbHQiLCJhdFBhdXNlIiwiZ2VuZXJpYyIsIm9uZU9mIiwiVGFsb3NFcnJvciIsImlzU3RyaW5nIiwiaXNTeW1ib2wiLCJpc1VuZGVmaW5lZCIsImlzVHlwZSIsIm5hbWUiLCJkZWZhdWx0IiwiYXJncyIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImlzT2JqZWN0Iiwic3RhdGUiLCJjb250ZXh0IiwiZXJyb3IiLCJjb25zdHJ1Y3RvciIsInN0YXRlMSIsImNvbnRleHQxIiwiZXJyb3IxIiwiaGFsdCIsInRocm93IiwicmVzZXQiLCJjbG9uZSIsIm1peGluIiwicHJvdG90eXBlIiwiZ2V0dGVycyIsInN0YXJ0aW5nIiwiaGFsdGVkIiwicGF1c2VkIiwic3VjY2VzcyIsImZhaWx1cmUiLCJydW5uaW5nIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSxPQUFBQyxTQUFBQyxTQUFBQztBQUFBLFlBQU9DLFVBQVAsMEJBQUE7QUFDQSxZQUFPQyxVQUFQLHFCQUFBO0FBQ0EsWUFBT0MsV0FBUCxzQkFBQTtBQUNBLFNBQVNDLE1BQVQsRUFBaUJDLEtBQWpCLEVBQXdCQyxPQUF4QixFQUFpQ0MsTUFBakMsRUFBeUNDLE9BQXpDLFFBQUEsWUFBQTtBQUNBLFNBQVNDLE9BQVQsUUFBQSx3QkFBQTtBQUNBLFNBQVNDLEtBQVQsUUFBQSxhQUFBO0FBQ0EsU0FBU0MsVUFBVCxRQUFBLFdBQUE7QUFHQVosVUFBVVcsTUFBTTtJQUNkUixLQUFLVSxRQURTO0lBRWRWLEtBQUtXLFFBRlM7Q0FBTjtBQUtWZixVQUFVWSxNQUFNO0lBQ2RSLEtBQUtZLFdBRFM7SUFFZEgsV0FBV0ksTUFGRztDQUFOO0FBS1ZmLE9BQU9TLFFBQ0w7SUFBQU8sTUFBTTtJQUNOQyxTQUFTO1FBQUEsSUFBQSxJQUFBLE9BQUEsVUFBQSxRQUFBLEFBQUVDLE9BQUYsVUFBQSxPQUFBLE9B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