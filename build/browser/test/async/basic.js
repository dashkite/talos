var add, grow, test;
import { Machine, Talos, $start, $end, start, run, flow } from "../../src/async";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        graph: {
            start: {
                hold: {
                    run: add
                }
            },
            hold: {
                hold: {
                    run: add
                }
            }
        }
    });
    B = Machine.make({
        graph: {
            start: {
                first: {
                    run: grow
                }
            },
            first: {
                second: {
                    run: grow
                }
            },
            second: {
                end: {
                    run: grow
                }
            }
        }
    });
    return [
        h.test("start", h.target("async", function() {
            return h.assert(Type.isReactor(start(A)));
        })),
        h.test("run while consuming events", h.target("async", async function() {
            var events, ref, talos;
            events = [
                new Promise(function(resolve, reject) {
                    return resolve(1);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(2);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(3);
                })
            ];
            talos = await run(A, {
                sum: 0
            }, events);
            return h.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        h.test("run without events and reconsume context", h.target("async", async function() {
            var ref, talos;
            talos = await run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("flow functional composition", h.target("async", async function() {
            var a, b, b2, c, context, error, f, g;
            a = async function(talos) {
                return talos.context.sum = await 1;
            };
            b = async function(talos) {
                return talos.context.sum += await 2;
            };
            b2 = async function() {
                await null;
                throw new Error("b2");
            };
            c = async function(talos) {
                return talos.context.sum += await 3;
            };
            f = flow([
                a,
                b,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = await f();
            h.assert.equal(8, context != null ? context.sum : void 0);
            g = flow([
                a,
                b,
                b2,
                c
            ]);
            try {
                await g();
                throw new Error("did not throw");
            } catch (error1) {
                error = error1;
                return h.assert(error.message === "b2");
            }
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9hc3luYy9iYXNpYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0VBQWtCLEtBQWxCO0VBQXlCLE1BQXpCO0VBQWlDLElBQWpDO0VBQ0UsS0FERjtFQUNTLEdBRFQ7RUFDYyxJQURkO0NBQUEsTUFBQTs7QUFFQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxLQUFQLE1BQUE7O0FBRUEsR0FBQSxHQUFNLFFBQUEsQ0FBRSxLQUFGLEVBQVMsS0FBVCxDQUFBO1NBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFkLElBQXFCO0FBRGpCOztBQUVOLElBQUEsR0FBTyxRQUFBLENBQUUsS0FBRixDQUFBO1NBQ0wsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFkLElBQXlCO0FBRHBCOztBQUlQLElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQTtBQUNQLE1BQUEsQ0FBQSxFQUFBO0VBQUUsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQWE7SUFBQSxLQUFBLEVBQ2Y7TUFBQSxLQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQ0U7VUFBQSxHQUFBLEVBQUs7UUFBTDtNQURGLENBREY7TUFHQSxJQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQ0U7VUFBQSxHQUFBLEVBQUs7UUFBTDtNQURGO0lBSkY7RUFEZSxDQUFiO0VBUUosQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQWE7SUFBQSxLQUFBLEVBQ2Y7TUFBQSxLQUFBLEVBQ0U7UUFBQSxLQUFBLEVBQ0U7VUFBQSxHQUFBLEVBQUs7UUFBTDtNQURGLENBREY7TUFHQSxLQUFBLEVBQ0U7UUFBQSxNQUFBLEVBQ0U7VUFBQSxHQUFBLEVBQUs7UUFBTDtNQURGLENBSkY7TUFNQSxNQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQ0U7VUFBQSxHQUFBLEVBQUs7UUFBTDtNQURG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TUFFQSxDQUFBLEdBQUksSUFBQSxDQUFLLENBQUUsQ0FBRjtJQUFLLENBQUw7SUFBUSxFQUFSO0lBQVksQ0FBWixDQUFMO0FBQ0o7UUFDRSxNQUFNLENBQUEsQ0FBQTtRQUNOLE1BQU0sSUFBSSxLQUFKLENBQVUsZUFBVixFQUZSO09BR0EsY0FBQTtRQUFNO2VBQ0osQ0FBQyxDQUFDLE1BQUYsQ0FBUyxLQUFLLENBQUMsT0FBTixLQUFpQixJQUExQixFQURGOztJQWZzRCxDQUFsQixDQUF0QyxDQWpCRjs7QUFyQks7O0FBMERQLE9BQUE7RUFBUyxJQUFBLFNBQVQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWNoaW5lLCBUYWxvcywgJHN0YXJ0LCAkZW5kLFxuICBzdGFydCwgcnVuLCBmbG93IH0gZnJvbSBcIi4uLy4uL3NyYy9hc3luY1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbmFkZCA9ICggdGFsb3MsIGV2ZW50ICkgLT5cbiAgdGFsb3MuY29udGV4dC5zdW0gKz0gZXZlbnRcbmdyb3cgPSAoIHRhbG9zICkgLT5cbiAgdGFsb3MuY29udGV4dC5wcm9kdWN0ICo9IDJcblxuXG50ZXN0ID0gLT5cbiAgQSA9IE1hY2hpbmUubWFrZSBncmFwaDpcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2UgZ3JhcGg6XG4gICAgc3RhcnQ6XG4gICAgICBmaXJzdDogXG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIGZpcnN0OlxuICAgICAgc2Vjb25kOlxuICAgICAgICBydW46IGdyb3dcbiAgICBzZWNvbmQ6IFxuICAgICAgZW5kOlxuICAgICAgICBydW46IGdyb3dcblxuXG4gIFtcbiAgICBoLnRlc3QgXCJzdGFydFwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBoLmFzc2VydCBUeXBlLmlzUmVhY3RvciBzdGFydCBBXG5cbiAgICBoLnRlc3QgXCJydW4gd2hpbGUgY29uc3VtaW5nIGV2ZW50c1wiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBldmVudHMgPSBbIFxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgMVxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgMlxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgM1xuICAgICAgXVxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gQSwgc3VtOiAwLCBldmVudHNcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIHRhbG9zLmNvbnRleHQ/LnN1bVxuXG4gICAgaC50ZXN0IFwicnVuIHdpdGhvdXQgZXZlbnRzIGFuZCByZWNvbnN1bWUgY29udGV4dFwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBCLCBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJmbG93IGZ1bmN0aW9uYWwgY29tcG9zaXRpb25cIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IGF3YWl0IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gYXdhaXQgMlxuICAgICAgYjIgPSAtPiBhd2FpdCBudWxsOyB0aHJvdyBuZXcgRXJyb3IgXCJiMlwiXG4gICAgICBjID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IGF3YWl0IDMgXG5cbiAgICAgIGYgPSBmbG93IFsgYSwgYiwgYiwgYyBdXG4gICAgICBoLmFzc2VydCBUeXBlLmlzRnVuY3Rpb24gZlxuICAgICAgY29udGV4dCA9IGF3YWl0IGYoKVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgY29udGV4dD8uc3VtXG5cbiAgICAgIGcgPSBmbG93IFsgYSwgYiwgYjIsIGMgXVxuICAgICAgdHJ5XG4gICAgICAgIGF3YWl0IGcoKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IgXCJkaWQgbm90IHRocm93XCJcbiAgICAgIGNhdGNoIGVycm9yXG4gICAgICAgIGguYXNzZXJ0IGVycm9yLm1lc3NhZ2UgPT0gXCJiMlwiXG5cbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXX0=
 //# sourceURL=test/async/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYXN5bmMvYmFzaWMuY29mZmVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsIFRhbG9zLCAkc3RhcnQsICRlbmQsXG4gIHN0YXJ0LCBydW4sIGZsb3cgfSBmcm9tIFwiLi4vLi4vc3JjL2FzeW5jXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuYWRkID0gKCB0YWxvcywgZXZlbnQgKSAtPlxuICB0YWxvcy5jb250ZXh0LnN1bSArPSBldmVudFxuZ3JvdyA9ICggdGFsb3MgKSAtPlxuICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gMlxuXG5cbnRlc3QgPSAtPlxuICBBID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZSBncmFwaDpcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNSZWFjdG9yIHN0YXJ0IEFcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAxXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAyXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAzXG4gICAgICBdXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImZsb3cgZnVuY3Rpb25hbCBjb21wb3NpdGlvblwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSBhd2FpdCAyXG4gICAgICBiMiA9IC0+IGF3YWl0IG51bGw7IHRocm93IG5ldyBFcnJvciBcImIyXCJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgZiA9IGZsb3cgWyBhLCBiLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gYXdhaXQgZigpXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCBjb250ZXh0Py5zdW1cblxuICAgICAgZyA9IGZsb3cgWyBhLCBiLCBiMiwgYyBdXG4gICAgICB0cnlcbiAgICAgICAgYXdhaXQgZygpXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcImRpZCBub3QgdGhyb3dcIlxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgaC5hc3NlcnQgZXJyb3IubWVzc2FnZSA9PSBcImIyXCJcblxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSJdLCJuYW1lcyI6WyJhZGQiLCJncm93IiwidGVzdCIsIk1hY2hpbmUiLCJUYWxvcyIsIiRzdGFydCIsIiRlbmQiLCJzdGFydCIsInJ1biIsImZsb3ciLCJUeXBlIiwiaCIsInRhbG9zIiwiZXZlbnQiLCJjb250ZXh0Iiwic3VtIiwicHJvZHVjdCIsIkEiLCJCIiwibWFrZSIsImdyYXBoIiwiaG9sZCIsImZpcnN0Iiwic2Vjb25kIiwiZW5kIiwidGFyZ2V0IiwiYXNzZXJ0IiwiaXNSZWFjdG9yIiwiZXZlbnRzIiwicmVmIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcXVhbCIsImEiLCJiIiwiYjIiLCJjIiwiZXJyb3IiLCJmIiwiZyIsIkVycm9yIiwiaXNGdW5jdGlvbiIsImVycm9yMSIsIm1lc3NhZ2UiLCJiYXNpYyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUEsS0FBQUMsTUFBQUM7QUFBQSxTQUFTQyxPQUFULEVBQWtCQyxLQUFsQixFQUF5QkMsTUFBekIsRUFBaUNDLElBQWpDLEVBQ0VDLEtBREYsRUFDU0MsR0FEVCxFQUNjQyxJQURkLFFBQUEsa0JBQUE7QUFFQSxZQUFPQyxVQUFQLHFCQUFBO0FBQ0EsWUFBT0MsT0FBUCxhQUFBO0FBRUFYLE1BQU0sU0FBRVksS0FBRixFQUFTQyxLQUFUO1dBQ0pELE1BQU1FLE9BQU8sQ0FBQ0MsR0FBZCxJQUFxQkY7QUFEakI7QUFFTlosT0FBTyxTQUFFVyxLQUFGO1dBQ0xBLE1BQU1FLE9BQU8sQ0FBQ0UsT0FBZCxJQUF5QjtBQURwQjtBQUlQZCxPQUFPO0lBQ1AsSUFBQWUsR0FBQUM7SUFBRUQsSUFBSWQsUUFBUWdCLElBQVIsQ0FBYTtRQUFBQyxPQUNmO1lBQUFiLE9BQ0U7Z0JBQUFjLE1BQ0U7b0JBQUFiLEtBQUtSO2dCQUFMO1lBREY7WUFFRnFCLE1BQ0U7Z0JBQUFBLE1BQ0U7b0JBQUFiLEtBQUtSO2dCQUFMO1lBREY7UUFK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