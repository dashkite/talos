"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "pipe", {
    enumerable: true,
    get: function() {
        return pipe;
    }
});
const _function = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/function"));
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _generic = require("@dashkite/joy/generic");
const _containers = require("../containers");
const _sync = /*#__PURE__*/ _interop_require_wildcard(require("../strict/sync"));
const _helpers = /*#__PURE__*/ _interop_require_wildcard(require("./helpers"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var _pipe, debug, finished, pipe;
pipe = (0, _generic.generic)({
    name: "talos pipe",
    default: function(...args) {
        throw new Error(`pipe: input is malformed ${JSON.stringify(args)}`);
    }
});
(0, _generic.generic)(pipe, _helpers.isFunctionArray, function(fx) {
    return _pipe({}, fx);
});
(0, _generic.generic)(pipe, _type.isObject, _helpers.isFunctionArray, function(options, fx) {
    return _pipe(options, fx);
});
_pipe = function(options, fx) {
    var drive, f, graph, step, talos;
    if (fx.length === 0) {
        if (options.debug === true) {
            console.log("[ pipe ] empty function list, mapping to no-op");
        }
        return _function.identity;
    }
    f = fx[0];
    graph = _containers.Graph.make(_helpers.expand(fx));
    talos = _containers.Talos.make();
    step = options.debug === true ? debug : _sync.step;
    drive = _containers.Drive.make(graph, talos, step);
    return _function.arity(f.length, function(...args) {
        drive.update(...args);
        while(true){
            _helpers.check(talos);
            if (talos.halted) {
                return talos.context;
            }
            drive.update();
        }
    });
};
finished = _helpers.finished("pipe");
debug = function(graph, talos, ...transforms) {
    var edge, name, vertex;
    vertex = _sync.matchVertex(graph, talos);
    name = _helpers.nameVertex(vertex);
    if (finished(talos)) {
        return talos;
    }
    edge = _sync.matchEdge(vertex, talos, transforms);
    if (finished(talos)) {
        return talos;
    }
    console.log(`[ pipe ] starting step ${name}`, talos.context);
    if (transforms.length > 0) {
        console.log("arguments", ...transforms);
    }
    _sync.run(edge, talos, transforms);
    if (finished(talos)) {
        return talos;
    }
    console.log(`[ pipe ] finished step ${name}`);
    _sync.move(edge, talos, transforms);
    if (finished(talos)) {
        return talos;
    }
    return talos;
};
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy9zcmMvbGluZWFyL3BpcGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUE7O0FBQUEsT0FBTyxDQUFBLE1BQVAsTUFBQTs7QUFDQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsS0FBVDtFQUFnQixLQUFoQjtFQUF1QixLQUF2QjtDQUFBLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFPLENBQUEsS0FBUCxNQUFBOztBQUdBLElBQUEsR0FBTyxPQUFBLENBQ0w7RUFBQSxJQUFBLEVBQU0sWUFBTjtFQUNBLE9BQUEsRUFBUyxRQUFBLENBQUEsR0FBRSxJQUFGLENBQUE7SUFDUCxNQUFNLElBQUksS0FBSixDQUFVLENBQUEseUJBQUEsQ0FBQSxDQUE0QixJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsQ0FBNUIsQ0FBQSxDQUFWO0VBREM7QUFEVCxDQURLOztBQUtQLE9BQUEsQ0FBUSxJQUFSLEVBQWMsQ0FBQyxDQUFDLGVBQWhCLEVBQWlDLFFBQUEsQ0FBRSxFQUFGLENBQUE7U0FDL0IsS0FBQSxDQUFNLENBQUEsQ0FBTixFQUFVLEVBQVY7QUFEK0IsQ0FBakM7O0FBR0EsT0FBQSxDQUFRLElBQVIsRUFBYyxJQUFJLENBQUMsUUFBbkIsRUFBNkIsQ0FBQyxDQUFDLGVBQS9CLEVBQWdELFFBQUEsQ0FBRSxPQUFGLEVBQVcsRUFBWCxDQUFBO1NBQzlDLEtBQUEsQ0FBTSxPQUFOLEVBQWUsRUFBZjtBQUQ4QyxDQUFoRDs7QUFHQSxLQUFBLEdBQVEsUUFBQSxDQUFFLE9BQUYsRUFBVyxFQUFYLENBQUE7QUFDUixNQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQTtFQUFFLElBQUcsRUFBRSxDQUFDLE1BQUgsS0FBYSxDQUFoQjtJQUNFLElBQUcsT0FBTyxDQUFDLEtBQVIsS0FBaUIsSUFBcEI7TUFDRSxPQUFPLENBQUMsR0FBUixDQUFZLGdEQUFaLEVBREY7O0FBRUEsV0FBTyxFQUFFLENBQUMsU0FIWjs7RUFLQSxDQUFBLEdBQUksRUFBRSxDQUFFLENBQUY7RUFDTixLQUFBLEdBQVEsS0FBSyxDQUFDLElBQU4sQ0FBVyxDQUFDLENBQUMsTUFBRixDQUFTLEVBQVQsQ0FBWDtFQUNSLEtBQUEsR0FBUSxLQUFLLENBQUMsSUFBTixDQUFBO0VBQ1IsSUFBQSxHQUFVLE9BQU8sQ0FBQyxLQUFSLEtBQWlCLElBQXBCLEdBQThCLEtBQTlCLEdBQXlDLElBQUksQ0FBQztFQUNyRCxLQUFBLEdBQVEsS0FBSyxDQUFDLElBQU4sQ0FBVyxLQUFYLEVBQWtCLEtBQWxCLEVBQXlCLElBQXpCO1NBRVIsRUFBRSxDQUFDLEtBQUgsQ0FBUyxDQUFDLENBQUMsTUFBWCxFQUFtQixRQUFBLENBQUEsR0FBRSxJQUFGLENBQUE7SUFDakIsS0FBSyxDQUFDLE1BQU4sQ0FBYSxHQUFBLElBQWI7QUFDQSxXQUFBLElBQUE7TUFDRSxDQUFDLENBQUMsS0FBRixDQUFRLEtBQVI7TUFDQSxJQUF3QixLQUFLLENBQUMsTUFBOUI7QUFBQSxlQUFPLEtBQUssQ0FBQyxRQUFiOztNQUNBLEtBQUssQ0FBQyxNQUFOLENBQUE7SUFIRjtFQUZpQixDQUFuQjtBQVpNOztBQW9CUixRQUFBLEdBQVcsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxNQUFYOztBQUVYLEtBQUEsR0FBUSxRQUFBLENBQUUsS0FBRixFQUFTLEtBQVQsRUFBQSxHQUFnQixVQUFoQixDQUFBO0FBQ1IsTUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBO0VBQUUsTUFBQSxHQUFTLElBQUksQ0FBQyxXQUFMLENBQWlCLEtBQWpCLEVBQXdCLEtBQXhCO0VBQ1QsSUFBQSxHQUFPLENBQUMsQ0FBQyxVQUFGLENBQWEsTUFBYjtFQUNQLElBQWdCLFFBQUEsQ0FBUyxLQUFULENBQWhCO0FBQUEsV0FBTyxNQUFQOztFQUVBLElBQUEsR0FBTyxJQUFJLENBQUMsU0FBTCxDQUFlLE1BQWYsRUFBdUIsS0FBdkIsRUFBOEIsVUFBOUI7RUFDUCxJQUFnQixRQUFBLENBQVMsS0FBVCxDQUFoQjtBQUFBLFdBQU8sTUFBUDs7RUFFQSxPQUFPLENBQUMsR0FBUixDQUFZLENBQUEsdUJBQUEsQ0FBQSxDQUEyQixJQUEzQixDQUFBLENBQVosRUFBZ0QsS0FBSyxDQUFDLE9BQXREO0VBQ0EsSUFBRyxVQUFVLENBQUMsTUFBWCxHQUFvQixDQUF2QjtJQUNFLE9BQU8sQ0FBQyxHQUFSLENBQVksV0FBWixFQUF5QixHQUFBLFVBQXpCLEVBREY7O0VBRUEsSUFBSSxDQUFDLEdBQUwsQ0FBUyxJQUFULEVBQWUsS0FBZixFQUFzQixVQUF0QjtFQUNBLElBQWdCLFFBQUEsQ0FBUyxLQUFULENBQWhCO0FBQUEsV0FBTyxNQUFQOztFQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQSx1QkFBQSxDQUFBLENBQTJCLElBQTNCLENBQUEsQ0FBWjtFQUVBLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBVixFQUFnQixLQUFoQixFQUF1QixVQUF2QjtFQUNBLElBQWdCLFFBQUEsQ0FBUyxLQUFULENBQWhCO0FBQUEsV0FBTyxNQUFQOztTQUNBO0FBakJNOztBQXFCUixPQUFBO0VBQ0UsSUFERiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEZuIGZyb20gXCJAZGFzaGtpdGUvam95L2Z1bmN0aW9uXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgeyBHcmFwaCwgVGFsb3MsIERyaXZlIH0gZnJvbSBcIi4uL2NvbnRhaW5lcnNcIlxuaW1wb3J0ICogYXMgU3luYyBmcm9tIFwiLi4vc3RyaWN0L3N5bmNcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi9oZWxwZXJzXCJcblxuXG5waXBlID0gZ2VuZXJpYyBcbiAgbmFtZTogXCJ0YWxvcyBwaXBlXCJcbiAgZGVmYXVsdDogKCBhcmdzLi4uICkgLT4gXG4gICAgdGhyb3cgbmV3IEVycm9yIFwicGlwZTogaW5wdXQgaXMgbWFsZm9ybWVkICN7SlNPTi5zdHJpbmdpZnkgYXJnc31cIlxuXG5nZW5lcmljIHBpcGUsIGguaXNGdW5jdGlvbkFycmF5LCAoIGZ4ICkgLT5cbiAgX3BpcGUge30sIGZ4XG5cbmdlbmVyaWMgcGlwZSwgVHlwZS5pc09iamVjdCwgaC5pc0Z1bmN0aW9uQXJyYXksICggb3B0aW9ucywgZnggKSAtPlxuICBfcGlwZSBvcHRpb25zLCBmeFxuXG5fcGlwZSA9ICggb3B0aW9ucywgZnggKSAtPlxuICBpZiBmeC5sZW5ndGggPT0gMFxuICAgIGlmIG9wdGlvbnMuZGVidWcgPT0gdHJ1ZVxuICAgICAgY29uc29sZS5sb2cgXCJbIHBpcGUgXSBlbXB0eSBmdW5jdGlvbiBsaXN0LCBtYXBwaW5nIHRvIG5vLW9wXCJcbiAgICByZXR1cm4gRm4uaWRlbnRpdHlcbiAgXG4gIGYgPSBmeFsgMCBdXG4gIGdyYXBoID0gR3JhcGgubWFrZSBoLmV4cGFuZCBmeFxuICB0YWxvcyA9IFRhbG9zLm1ha2UoKVxuICBzdGVwID0gaWYgb3B0aW9ucy5kZWJ1ZyA9PSB0cnVlIHRoZW4gZGVidWcgZWxzZSBTeW5jLnN0ZXBcbiAgZHJpdmUgPSBEcml2ZS5tYWtlIGdyYXBoLCB0YWxvcywgc3RlcFxuXG4gIEZuLmFyaXR5IGYubGVuZ3RoLCAoIGFyZ3MuLi4gKSAtPlxuICAgIGRyaXZlLnVwZGF0ZSBhcmdzLi4uXG4gICAgbG9vcFxuICAgICAgaC5jaGVjayB0YWxvc1xuICAgICAgcmV0dXJuIHRhbG9zLmNvbnRleHQgaWYgdGFsb3MuaGFsdGVkXG4gICAgICBkcml2ZS51cGRhdGUoKVxuXG5cbmZpbmlzaGVkID0gaC5maW5pc2hlZCBcInBpcGVcIlxuXG5kZWJ1ZyA9ICggZ3JhcGgsIHRhbG9zLCB0cmFuc2Zvcm1zLi4uICkgLT5cbiAgdmVydGV4ID0gU3luYy5tYXRjaFZlcnRleCBncmFwaCwgdGFsb3NcbiAgbmFtZSA9IGgubmFtZVZlcnRleCB2ZXJ0ZXhcbiAgcmV0dXJuIHRhbG9zIGlmIGZpbmlzaGVkIHRhbG9zXG5cbiAgZWRnZSA9IFN5bmMubWF0Y2hFZGdlIHZlcnRleCwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgcmV0dXJuIHRhbG9zIGlmIGZpbmlzaGVkIHRhbG9zXG5cbiAgY29uc29sZS5sb2cgXCJbIHBpcGUgXSBzdGFydGluZyBzdGVwICN7IG5hbWUgfVwiLCB0YWxvcy5jb250ZXh0XG4gIGlmIHRyYW5zZm9ybXMubGVuZ3RoID4gMFxuICAgIGNvbnNvbGUubG9nIFwiYXJndW1lbnRzXCIsIHRyYW5zZm9ybXMuLi5cbiAgU3luYy5ydW4gZWRnZSwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgcmV0dXJuIHRhbG9zIGlmIGZpbmlzaGVkIHRhbG9zXG4gIGNvbnNvbGUubG9nIFwiWyBwaXBlIF0gZmluaXNoZWQgc3RlcCAjeyBuYW1lIH1cIlxuXG4gIFN5bmMubW92ZSBlZGdlLCB0YWxvcywgdHJhbnNmb3Jtc1xuICByZXR1cm4gdGFsb3MgaWYgZmluaXNoZWQgdGFsb3NcbiAgdGFsb3NcblxuXG5cbmV4cG9ydCB7XG4gIHBpcGVcbn0iXX0=
 //# sourceURL=/@dashkite/talos/src/linear/pipe.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3Mvc3JjL2xpbmVhci9waXBlLmNvZmZlZSIsIjxhbm9uPiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBGbiBmcm9tIFwiQGRhc2hraXRlL2pveS9mdW5jdGlvblwiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgZ2VuZXJpYyB9IGZyb20gXCJAZGFzaGtpdGUvam95L2dlbmVyaWNcIlxuaW1wb3J0IHsgR3JhcGgsIFRhbG9zLCBEcml2ZSB9IGZyb20gXCIuLi9jb250YWluZXJzXCJcbmltcG9ydCAqIGFzIFN5bmMgZnJvbSBcIi4uL3N0cmljdC9zeW5jXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4vaGVscGVyc1wiXG5cblxucGlwZSA9IGdlbmVyaWMgXG4gIG5hbWU6IFwidGFsb3MgcGlwZVwiXG4gIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgIHRocm93IG5ldyBFcnJvciBcInBpcGU6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuZ2VuZXJpYyBwaXBlLCBoLmlzRnVuY3Rpb25BcnJheSwgKCBmeCApIC0+XG4gIF9waXBlIHt9LCBmeFxuXG5nZW5lcmljIHBpcGUsIFR5cGUuaXNPYmplY3QsIGguaXNGdW5jdGlvbkFycmF5LCAoIG9wdGlvbnMsIGZ4ICkgLT5cbiAgX3BpcGUgb3B0aW9ucywgZnhcblxuX3BpcGUgPSAoIG9wdGlvbnMsIGZ4ICkgLT5cbiAgaWYgZngubGVuZ3RoID09IDBcbiAgICBpZiBvcHRpb25zLmRlYnVnID09IHRydWVcbiAgICAgIGNvbnNvbGUubG9nIFwiWyBwaXBlIF0gZW1wdHkgZnVuY3Rpb24gbGlzdCwgbWFwcGluZyB0byBuby1vcFwiXG4gICAgcmV0dXJuIEZuLmlkZW50aXR5XG4gIFxuICBmID0gZnhbIDAgXVxuICBncmFwaCA9IEdyYXBoLm1ha2UgaC5leHBhbmQgZnhcbiAgdGFsb3MgPSBUYWxvcy5tYWtlKClcbiAgc3RlcCA9IGlmIG9wdGlvbnMuZGVidWcgPT0gdHJ1ZSB0aGVuIGRlYnVnIGVsc2UgU3luYy5zdGVwXG4gIGRyaXZlID0gRHJpdmUubWFrZSBncmFwaCwgdGFsb3MsIHN0ZXBcblxuICBGbi5hcml0eSBmLmxlbmd0aCwgKCBhcmdzLi4uICkgLT5cbiAgICBkcml2ZS51cGRhdGUgYXJncy4uLlxuICAgIGxvb3BcbiAgICAgIGguY2hlY2sgdGFsb3NcbiAgICAgIHJldHVybiB0YWxvcy5jb250ZXh0IGlmIHRhbG9zLmhhbHRlZFxuICAgICAgZHJpdmUudXBkYXRlKClcblxuXG5maW5pc2hlZCA9IGguZmluaXNoZWQgXCJwaXBlXCJcblxuZGVidWcgPSAoIGdyYXBoLCB0YWxvcywgdHJhbnNmb3Jtcy4uLiApIC0+XG4gIHZlcnRleCA9IFN5bmMubWF0Y2hWZXJ0ZXggZ3JhcGgsIHRhbG9zXG4gIG5hbWUgPSBoLm5hbWVWZXJ0ZXggdmVydGV4XG4gIHJldHVybiB0YWxvcyBpZiBmaW5pc2hlZCB0YWxvc1xuXG4gIGVkZ2UgPSBTeW5jLm1hdGNoRWRnZSB2ZXJ0ZXgsIHRhbG9zLCB0cmFuc2Zvcm1zXG4gIHJldHVybiB0YWxvcyBpZiBmaW5pc2hlZCB0YWxvc1xuXG4gIGNvbnNvbGUubG9nIFwiWyBwaXBlIF0gc3RhcnRpbmcgc3RlcCAjeyBuYW1lIH1cIiwgdGFsb3MuY29udGV4dFxuICBpZiB0cmFuc2Zvcm1zLmxlbmd0aCA+IDBcbiAgICBjb25zb2xlLmxvZyBcImFyZ3VtZW50c1wiLCB0cmFuc2Zvcm1zLi4uXG4gIFN5bmMucnVuIGVkZ2UsIHRhbG9zLCB0cmFuc2Zvcm1zXG4gIHJldHVybiB0YWxvcyBpZiBmaW5pc2hlZCB0YWxvc1xuICBjb25zb2xlLmxvZyBcIlsgcGlwZSBdIGZpbmlzaGVkIHN0ZXAgI3sgbmFtZSB9XCJcblxuICBTeW5jLm1vdmUgZWRnZSwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgcmV0dXJuIHRhbG9zIGlmIGZpbmlzaGVkIHRhbG9zXG4gIHRhbG9zXG5cblxuXG5leHBvcnQge1xuICBwaXBlXG59IixudWxsXSwibmFtZXMiOlsicGlwZSIsIl9waXBlIiwiZGVidWciLCJmaW5pc2hlZCIsImdlbmVyaWMiLCJuYW1lIiwiZGVmYXVsdCIsImFyZ3MiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJoIiwiaXNGdW5jdGlvbkFycmF5IiwiZngiLCJUeXBlIiwiaXNPYmplY3QiLCJvcHRpb25zIiwiZHJpdmUiLCJmIiwiZ3JhcGgiLCJzdGVwIiwidGFsb3MiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwiRm4iLCJpZGVudGl0eSIsIkdyYXBoIiwibWFrZSIsImV4cGFuZCIsIlRhbG9zIiwiU3luYyIsIkRyaXZlIiwiYXJpdHkiLCJ1cGRhdGUiLCJjaGVjayIsImhhbHRlZCIsImNvbnRleHQiLCJ0cmFuc2Zvcm1zIiwiZWRnZSIsInZlcnRleCIsIm1hdGNoVmVydGV4IiwibmFtZVZlcnRleCIsIm1hdGNoRWRnZSIsInJ1biIsIm1vdmUiXSwibWFwcGluZ3MiOiI7Ozs7K0JBK0RFQTs7O2VBQUFBOzs7a0VBL0RGOzhEQUNBO3lCQUNBOzRCQUNBOzhEQUNBO2lFQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTEEsSUFBQUMsT0FBQUMsT0FBQUMsVUFBQUg7QUFRQUEsT0FBT0ksSUFBQUEsZ0JBQUEsRUFDTDtJQUFBQyxNQUFNO0lBQ05DLFNBQVMsU0FBQSxHQUFFQyxJQUFGO1FBQ1AsTUFBTSxJQUFJQyxNQUFNLENBQUEseUJBQUEsRUFBNEJDLEtBQUtDLFNBQUwsQ0FBZUgsTUFBM0MsQ0FBVjtJQURDO0FBRFQ7QUFJRkgsSUFBQUEsZ0JBQUEsRUFBUUosTUFBTVcsU0FBRUMsZUFBaEIsRUFBaUMsU0FBRUMsRUFBRjtXQUMvQlosTUFBTSxDQUFBLEdBQUlZO0FBRHFCO0FBR2pDVCxJQUFBQSxnQkFBQSxFQUFRSixNQUFNYyxNQUFLQyxRQUFuQixFQUE2QkosU0FBRUMsZUFBL0IsRUFBZ0QsU0FBRUksT0FBRixFQUFXSCxFQUFYO1dBQzlDWixNQUFNZSxTQUFTSDtBQUQrQjtBQUdoRFosUUFBUSxTQUFFZSxPQUFGLEVBQVdILEVBQVg7SUFDUixJQUFBSSxPQUFBQyxHQUFBQyxPQUFBQyxNQUFBQztJQUFFLElBQUdSLEdBQUdTLE1BQUgsS0FBYSxHQUFoQjtRQUNFLElBQUdOLFFBQVFkLEtBQVIsS0FBaUIsTUFBcEI7WUFDRXFCLFFBQVFDLEdBQVIsQ0FBWTs7UUFDZCxPQUFPQyxVQUFHQyxRQUFBOztJQUVaUixJQUFJTCxFQUFFLENBQUUsRUFBRjtJQUNOTSxRQUFRUSxpQkFBSyxDQUFDQyxJQUFOLENBQVdqQixTQUFFa0IsTUFBRixDQUFTaEI7SUFDNUJRLFFBQVFTLGlCQUFLLENBQUNGLElBQU47SUFDUlIsT0FBVUosUUFBUWQsS0FBUixLQUFpQixPQUFVQSxRQUFXNkIsTUFBS1gsSUFBQTtJQUNyREgsUUFBUWUsaUJBQUssQ0FBQ0osSUFBTixDQUFXVCxPQUFPRSxPQUFPRDtXQUVqQ0ssVUFBR1EsS0FBSCxDQUFTZixFQUFFSSxNQUFYLEVBQW1CLFNBQUEsR0FBRWYsSUFBRjtRQUNqQlUsTUFBTWlCLE1BQU4sSUFBYTNCO1FBQ2IsTUFBQSxLQUFBO1lBQ0VJLFNBQUV3QixLQUFGLENBQVFkO1lBQ1IsSUFBd0JBLE1BQU1lLE1BQTlCLEVBQUE7Z0JBQUEsT0FBT2YsTUFBTWdCLE9BQUE7O1lBQ2JwQixNQUFNaUIsTUFBTjtRQUhGO0lBRmlCO0FBWmI7QUFvQlIvQixXQUFXUSxTQUFFUixRQUFGLENBQVc7QUFFdEJELFFBQVEsU0FBRWlCLEtBQUYsRUFBU0UsS0FBVCxFQUFBLEdBQWdCaUIsVUFBaEI7SUFDUixJQUFBQyxNQUFBbEMsTUFBQW1DO0lBQUVBLFNBQVNULE1BQUtVLFdBQUwsQ0FBaUJ0QixPQUFPRTtJQUNqQ2hCLE9BQU9NLFNBQUUrQixVQUFGLENBQWFGO0lBQ3BCLElBQWdCckMsU0FBU2tCLFFBQXpCO1FBQUEsT0FBT0E7O0lBRVBrQixPQUFPUixNQUFLWSxTQUFMLENBQWVILFFBQVFuQixPQUFPaUI7SUFDckMsSUFBZ0JuQyxTQUFTa0IsUUFBekI7UUFBQSxPQUFPQTs7SUFFUEUsUUFBUUMsR0FBUixDQUFZLENBQUEsdUJBQUEsRUFBMkJuQixLQUEzQixDQUFaLEVBQWdEZ0IsTUFBTWdCLE9BQXREO0lBQ0EsSUFBR0MsV0FBV2hCLE1BQVgsR0FBb0IsR0FBdkI7UUFDRUMsUUFBUUMsR0FBUixDQUFZLGdCQUFhYzs7SUFDM0JQLE1BQUthLEdBQUwsQ0FBU0wsTUFBTWxCLE9BQU9pQjtJQUN0QixJQUFnQm5DLFNBQVNrQixRQUF6QjtRQUFBLE9BQU9BOztJQUNQRSxRQUFRQyxHQUFSLENBQVksQ0FBQSx1QkFBQSxFQUEyQm5CLEtBQTNCLENBQVo7SUFFQTBCLE1BQUtjLElBQUwsQ0FBVU4sTUFBTWxCLE9BQU9pQjtJQUN2QixJQUFnQm5DLFNBQVNrQixRQUF6QjtRQUFBLE9BQU9BOztXQUNQQTtBQWpCTSJ9