var check, expand, finished, isFunctionArray, nameVertex;
import * as Type from "@dashkite/joy/type";
import { $start, $halt } from "../states";
expand = function(fx) {
    var current, f, graph, i, j, len, next;
    graph = {};
    for(i = j = 0, len = fx.length; j < len; i = ++j){
        f = fx[i];
        current = i === 0 ? $start : `${i}`;
        next = i === fx.length - 1 ? $halt : `${i + 1}`;
        graph[current] = {
            name: f.name == null || f.name === "" ? `anonymous-${i}` : f.name,
            edges: [
                {
                    accept: true,
                    run: f,
                    move: next
                }
            ]
        };
    }
    return graph;
};
check = function(talos) {
    if (talos.error != null) {
        throw talos.error.error;
    }
};
isFunctionArray = function(fx) {
    var f, j, len;
    if (!Type.isArray(fx)) {
        return false;
    }
    for(j = 0, len = fx.length; j < len; j++){
        f = fx[j];
        if (!Type.isFunction(f)) {
            return false;
        }
    }
    return true;
};
nameVertex = function(vertex) {
    var name;
    name = vertex.metadata.name;
    if (Type.isSymbol(name)) {
        return `[Symbol ${name.toString()} ]`;
    } else {
        return name;
    }
};
finished = function(name) {
    return function(talos) {
        if (talos.failure) {
            console.error(`[ ${name} ] encountered error`, talos.error.error);
            return true;
        } else if (talos.success) {
            console.log(`[ ${name} ] graph traversal complete`, talos.context);
            return true;
        } else {
            return false;
        }
    };
};
export { expand, check, isFunctionArray, nameVertex, finished }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL2xpbmVhci9oZWxwZXJzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLGVBQUEsRUFBQTs7QUFBQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQUE7RUFBUyxNQUFUO0VBQWlCLEtBQWpCO0NBQUEsTUFBQTs7QUFHQSxNQUFBLEdBQVMsUUFBQSxDQUFFLEVBQUYsQ0FBQTtBQUNULE1BQUEsT0FBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7RUFBRSxLQUFBLEdBQVEsQ0FBQTtFQUNSLEtBQUEsNENBQUE7O0lBQ0UsT0FBQSxHQUFhLENBQUEsS0FBSyxDQUFSLEdBQWUsTUFBZixHQUEyQixDQUFBLENBQUEsQ0FBSSxDQUFKLENBQUE7SUFDckMsSUFBQSxHQUFVLENBQUEsS0FBSyxFQUFFLENBQUMsTUFBSCxHQUFZLENBQXBCLEdBQTJCLEtBQTNCLEdBQXNDLENBQUEsQ0FBQSxDQUFJLENBQUEsR0FBSSxDQUFSLENBQUE7SUFFN0MsS0FBSyxDQUFFLE9BQUYsQ0FBTCxHQUNFO01BQUEsSUFBQSxFQUFVLGdCQUFELElBQVksQ0FBQyxDQUFDLElBQUYsS0FBVSxFQUF6QixHQUFpQyxDQUFBLFVBQUEsQ0FBQSxDQUFjLENBQWQsQ0FBQSxDQUFqQyxHQUF5RCxDQUFDLENBQUMsSUFBakU7TUFDQSxLQUFBLEVBQU87UUFDTDtVQUFBLE1BQUEsRUFBUSxJQUFSO1VBQ0EsR0FBQSxFQUFLLENBREw7VUFFQSxJQUFBLEVBQU07UUFGTixDQURLOztJQURQO0VBTEo7U0FZQTtBQWRPOztBQWdCVCxLQUFBLEdBQVEsUUFBQSxDQUFFLEtBQUYsQ0FBQTtFQUNOLElBQUcsbUJBQUg7SUFDRSxNQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFEcEI7O0FBRE07O0FBSVIsZUFBQSxHQUFrQixRQUFBLENBQUUsRUFBRixDQUFBO0FBQ2xCLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQTtFQUFFLElBQUcsQ0FBRSxJQUFJLENBQUMsT0FBTCxDQUFhLEVBQWIsQ0FBTDtBQUNFLFdBQU8sTUFEVDs7RUFFQSxLQUFBLG9DQUFBOztJQUNFLElBQWdCLENBQUUsSUFBSSxDQUFDLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBbEI7QUFBQSxhQUFPLE1BQVA7O0VBREY7U0FFQTtBQUxnQjs7QUFRbEIsVUFBQSxHQUFhLFFBQUEsQ0FBRSxNQUFGLENBQUE7QUFDYixNQUFBO0VBQUUsSUFBQSxHQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUM7RUFDdkIsSUFBRyxJQUFJLENBQUMsUUFBTCxDQUFjLElBQWQsQ0FBSDtXQUNFLENBQUEsUUFBQSxDQUFBLENBQVksSUFBSSxDQUFDLFFBQUwsQ0FBQSxDQUFaLENBQUEsRUFBQSxFQURGO0dBQUEsTUFBQTtXQUdFLEtBSEY7O0FBRlc7O0FBT2IsUUFBQSxHQUFXLFFBQUEsQ0FBRSxJQUFGLENBQUE7U0FDVCxRQUFBLENBQUUsS0FBRixDQUFBO0lBQ0UsSUFBRyxLQUFLLENBQUMsT0FBVDtNQUNFLE9BQU8sQ0FBQyxLQUFSLENBQWMsQ0FBQSxFQUFBLENBQUEsQ0FBTSxJQUFOLENBQUEsb0JBQUEsQ0FBZCxFQUFpRCxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQTdEO2FBQ0EsS0FGRjtLQUFBLE1BR0ssSUFBRyxLQUFLLENBQUMsT0FBVDtNQUNILE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQSxFQUFBLENBQUEsQ0FBTSxJQUFOLENBQUEsMkJBQUEsQ0FBWixFQUFzRCxLQUFLLENBQUMsT0FBNUQ7YUFDQSxLQUZHO0tBQUEsTUFBQTthQUlILE1BSkc7O0VBSlA7QUFEUzs7QUFZWCxPQUFBO0VBQ0UsTUFERjtFQUVFLEtBRkY7RUFHRSxlQUhGO0VBSUUsVUFKRjtFQUtFLFFBTEYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgJHN0YXJ0LCAkaGFsdCB9IGZyb20gXCIuLi9zdGF0ZXNcIlxuXG5cbmV4cGFuZCA9ICggZnggKSAtPlxuICBncmFwaCA9IHt9ICAgIFxuICBmb3IgZiwgaSBpbiBmeFxuICAgIGN1cnJlbnQgPSBpZiBpID09IDAgdGhlbiAkc3RhcnQgZWxzZSBcIiN7IGkgfVwiXG4gICAgbmV4dCA9IGlmIGkgPT0gZngubGVuZ3RoIC0gMSB0aGVuICRoYWx0IGVsc2UgXCIjeyBpICsgMSB9XCJcblxuICAgIGdyYXBoWyBjdXJyZW50IF0gPSBcbiAgICAgIG5hbWU6IGlmICFmLm5hbWU/IHx8IGYubmFtZSA9PSBcIlwiIHRoZW4gXCJhbm9ueW1vdXMtI3sgaSB9XCIgZWxzZSBmLm5hbWVcbiAgICAgIGVkZ2VzOiBbXG4gICAgICAgIGFjY2VwdDogdHJ1ZVxuICAgICAgICBydW46IGZcbiAgICAgICAgbW92ZTogbmV4dFxuICAgICAgXSBcbiAgXG4gIGdyYXBoXG5cbmNoZWNrID0gKCB0YWxvcyApIC0+XG4gIGlmIHRhbG9zLmVycm9yP1xuICAgIHRocm93IHRhbG9zLmVycm9yLmVycm9yXG5cbmlzRnVuY3Rpb25BcnJheSA9ICggZnggKSAtPlxuICBpZiAhIFR5cGUuaXNBcnJheSBmeFxuICAgIHJldHVybiBmYWxzZVxuICBmb3IgZiBpbiBmeFxuICAgIHJldHVybiBmYWxzZSBpZiAhIFR5cGUuaXNGdW5jdGlvbiBmXG4gIHRydWVcblxuXG5uYW1lVmVydGV4ID0gKCB2ZXJ0ZXggKSAtPlxuICBuYW1lID0gdmVydGV4Lm1ldGFkYXRhLm5hbWVcbiAgaWYgVHlwZS5pc1N5bWJvbCBuYW1lXG4gICAgXCJbU3ltYm9sICN7IG5hbWUudG9TdHJpbmcoKSB9IF1cIlxuICBlbHNlXG4gICAgbmFtZVxuXG5maW5pc2hlZCA9ICggbmFtZSApIC0+XG4gICggdGFsb3MgKSAtPlxuICAgIGlmIHRhbG9zLmZhaWx1cmVcbiAgICAgIGNvbnNvbGUuZXJyb3IgXCJbICN7IG5hbWUgfSBdIGVuY291bnRlcmVkIGVycm9yXCIsIHRhbG9zLmVycm9yLmVycm9yXG4gICAgICB0cnVlXG4gICAgZWxzZSBpZiB0YWxvcy5zdWNjZXNzXG4gICAgICBjb25zb2xlLmxvZyBcIlsgI3sgbmFtZSB9IF0gZ3JhcGggdHJhdmVyc2FsIGNvbXBsZXRlXCIsIHRhbG9zLmNvbnRleHRcbiAgICAgIHRydWVcbiAgICBlbHNlXG4gICAgICBmYWxzZVxuXG5cbmV4cG9ydCB7XG4gIGV4cGFuZFxuICBjaGVja1xuICBpc0Z1bmN0aW9uQXJyYXlcbiAgbmFtZVZlcnRleFxuICBmaW5pc2hlZFxufSJdfQ==
 //# sourceURL=src/linear/helpers.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saW5lYXIvaGVscGVycy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCB7ICRzdGFydCwgJGhhbHQgfSBmcm9tIFwiLi4vc3RhdGVzXCJcblxuXG5leHBhbmQgPSAoIGZ4ICkgLT5cbiAgZ3JhcGggPSB7fSAgICBcbiAgZm9yIGYsIGkgaW4gZnhcbiAgICBjdXJyZW50ID0gaWYgaSA9PSAwIHRoZW4gJHN0YXJ0IGVsc2UgXCIjeyBpIH1cIlxuICAgIG5leHQgPSBpZiBpID09IGZ4Lmxlbmd0aCAtIDEgdGhlbiAkaGFsdCBlbHNlIFwiI3sgaSArIDEgfVwiXG5cbiAgICBncmFwaFsgY3VycmVudCBdID0gXG4gICAgICBuYW1lOiBpZiAhZi5uYW1lPyB8fCBmLm5hbWUgPT0gXCJcIiB0aGVuIFwiYW5vbnltb3VzLSN7IGkgfVwiIGVsc2UgZi5uYW1lXG4gICAgICBlZGdlczogW1xuICAgICAgICBhY2NlcHQ6IHRydWVcbiAgICAgICAgcnVuOiBmXG4gICAgICAgIG1vdmU6IG5leHRcbiAgICAgIF0gXG4gIFxuICBncmFwaFxuXG5jaGVjayA9ICggdGFsb3MgKSAtPlxuICBpZiB0YWxvcy5lcnJvcj9cbiAgICB0aHJvdyB0YWxvcy5lcnJvci5lcnJvclxuXG5pc0Z1bmN0aW9uQXJyYXkgPSAoIGZ4ICkgLT5cbiAgaWYgISBUeXBlLmlzQXJyYXkgZnhcbiAgICByZXR1cm4gZmFsc2VcbiAgZm9yIGYgaW4gZnhcbiAgICByZXR1cm4gZmFsc2UgaWYgISBUeXBlLmlzRnVuY3Rpb24gZlxuICB0cnVlXG5cblxubmFtZVZlcnRleCA9ICggdmVydGV4ICkgLT5cbiAgbmFtZSA9IHZlcnRleC5tZXRhZGF0YS5uYW1lXG4gIGlmIFR5cGUuaXNTeW1ib2wgbmFtZVxuICAgIFwiW1N5bWJvbCAjeyBuYW1lLnRvU3RyaW5nKCkgfSBdXCJcbiAgZWxzZVxuICAgIG5hbWVcblxuZmluaXNoZWQgPSAoIG5hbWUgKSAtPlxuICAoIHRhbG9zICkgLT5cbiAgICBpZiB0YWxvcy5mYWlsdXJlXG4gICAgICBjb25zb2xlLmVycm9yIFwiWyAjeyBuYW1lIH0gXSBlbmNvdW50ZXJlZCBlcnJvclwiLCB0YWxvcy5lcnJvci5lcnJvclxuICAgICAgdHJ1ZVxuICAgIGVsc2UgaWYgdGFsb3Muc3VjY2Vzc1xuICAgICAgY29uc29sZS5sb2cgXCJbICN7IG5hbWUgfSBdIGdyYXBoIHRyYXZlcnNhbCBjb21wbGV0ZVwiLCB0YWxvcy5jb250ZXh0XG4gICAgICB0cnVlXG4gICAgZWxzZVxuICAgICAgZmFsc2VcblxuXG5leHBvcnQge1xuICBleHBhbmRcbiAgY2hlY2tcbiAgaXNGdW5jdGlvbkFycmF5XG4gIG5hbWVWZXJ0ZXhcbiAgZmluaXNoZWRcbn0iXSwibmFtZXMiOlsiY2hlY2siLCJleHBhbmQiLCJmaW5pc2hlZCIsImlzRnVuY3Rpb25BcnJheSIsIm5hbWVWZXJ0ZXgiLCJUeXBlIiwiJHN0YXJ0IiwiJGhhbHQiLCJmeCIsImN1cnJlbnQiLCJmIiwiZ3JhcGgiLCJpIiwiaiIsImxlbiIsIm5leHQiLCJsZW5ndGgiLCJuYW1lIiwiZWRnZXMiLCJhY2NlcHQiLCJydW4iLCJtb3ZlIiwidGFsb3MiLCJlcnJvciIsImlzQXJyYXkiLCJpc0Z1bmN0aW9uIiwidmVydGV4IiwibWV0YWRhdGEiLCJpc1N5bWJvbCIsInRvU3RyaW5nIiwiZmFpbHVyZSIsImNvbnNvbGUiLCJzdWNjZXNzIiwibG9nIiwiY29udGV4dCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUEsT0FBQUMsUUFBQUMsVUFBQUMsaUJBQUFDO0FBQUEsWUFBT0MsVUFBUCxxQkFBQTtBQUNBLFNBQVNDLE1BQVQsRUFBaUJDLEtBQWpCLFFBQUEsWUFBQTtBQUdBTixTQUFTLFNBQUVPLEVBQUY7SUFDVCxJQUFBQyxTQUFBQyxHQUFBQyxPQUFBQyxHQUFBQyxHQUFBQyxLQUFBQztJQUFFSixRQUFRLENBQUE7SUFDUixJQUFBQyxJQUFBQyxJQUFBLEdBQUFDLE1BQUFOLEdBQUFRLE1BQUEsRUFBQUgsSUFBQUMsS0FBQUYsSUFBQSxFQUFBQyxFQUFBOztRQUNFSixVQUFhRyxNQUFLLElBQU9OLFNBQVksQ0FBQSxFQUFJTSxFQUFKLENBQUE7UUFDckNHLE9BQVVILE1BQUtKLEdBQUdRLE1BQUgsR0FBWSxJQUFPVCxRQUFXLENBQUEsRUFBSUssSUFBSSxFQUFSLENBQUE7UUFFN0NELEtBQUssQ0FBRUYsUUFBUCxHQUNFO1lBQUFRLE1BQVUsQUFBQVAsRUFBQU8sSUFBQSxJQUFBLFFBQVdQLEVBQUVPLElBQUYsS0FBVSxLQUFRLENBQUEsVUFBQSxFQUFjTCxFQUFkLENBQWpDLEdBQXlERixFQUFFTyxJQUFqRTtZQUNBQyxPQUFPO2dCQUNMO29CQUFBQyxRQUFRO29CQUNSQyxLQUFLVjtvQkFDTFcsTUFBTU47Z0JBRk47O1FBRkY7SUFMSjtXQVlBSjtBQWRPO0FBZ0JUWCxRQUFRLFNBQUVzQixLQUFGO0lBQ04sSUFBR0EsTUFBQUMsS0FBQSxJQUFBLE1BQUg7UUFDRSxNQUFNRCxNQUFNQyxLQUFLLENBQUNBLEtBQUE7O0FBRmQ7QUFJUnBCLGtCQUFrQixTQUFFSyxFQUFGO0lBQ2xCLElBQUFFLEdBQUFHLEdBQUFDO0lBQUUsSUFBRyxDQUFFVCxLQUFLbUIsT0FBTCxDQUFhaEIsS0FBbEI7UUFDRSxPQUFPOztJQUNULElBQUFLLElBQUEsR0FBQUMsTUFBQU4sR0FBQVEsTUFBQSxFQUFBSCxJQUFBQyxLQUFBRCxJQUFBOztRQUNFLElBQWdCLENBQUVSLEtBQUtvQixVQUFMLENBQWdCZixJQUFsQztZQUFBLE9BQU87O0lBRFQ7V0FFQTtBQUxnQjtBQVFsQk4sYUFBYSxTQUFFc0IsTUFBRjtJQUNiLElBQUFUO0lBQUVBLE9BQU9TLE9BQU9DLFFBQVEsQ0FBQ1YsSUFBQTtJQUN2QixJQUFHWixLQUFLdUIsUUFBTCxDQUFjWCxPQUFqQjtlQUNFLENBQUEsUUFBQSxFQUFZQSxLQUFLWSxRQUFMLEdBQVosRUFBQSxDQUFBO1dBREY7ZUFHRVo7O0FBTFM7QUFPYmYsV0FBVyxTQUFFZSxJQUFGO1dBQ1QsU0FBRUssS0FBRjtRQUNFLElBQUdBLE1BQU1RLE9BQVQsRUFBQTtZQUNFQyxRQUFRUixLQUFSLENBQWMsQ0FBQSxFQUFBLEVBQU1OLEtBQU4sb0JBQUEsQ0FBZCxFQUFpREssTUFBTUMsS0FBSyxDQUFDQSxLQUE3RDttQkFDQTtlQUNHLElBQUdELE1BQU1VLE9BQVQsRUFBQTtZQUNIRCxRQUFRRSxHQUFSLENBQVksQ0FBQSxFQUFBLEVBQU1oQixLQUFOLDJCQUFBLENBQVosRUFBc0RLLE1BQU1ZLE9BQTVEO21CQUNBO2VBRkc7bUJBSUg7O0lBUko7QUFEUztBQVlYLFNBQ0VqQyxNQURGLEVBRUVELEtBRkYsRUFHRUcsZUFIRixFQUlFQyxVQUpGLEVBS0VGLFFBTEYifQ==