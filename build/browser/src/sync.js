var Step, pipe, run, start;
import { generic } from "@dashkite/joy/generic";
import * as Fn from "@dashkite/joy/function";
import * as Type from "@dashkite/joy/type";
import { Machine } from "./machine";
import { Talos } from "./talos";
import { isMachine, isGeneratorFunction } from "./types";
Step = {
    matchVertex: function(talos) {
        var vertex;
        vertex = talos.machine.graph[talos.state];
        if (vertex == null) {
            talos.catch(new Error("talos state is not in machine graph"));
        }
        return vertex;
    },
    matchEdge: function(vertex, talos, event) {
        var edge, error, i, len, ref;
        ref = vertex.edges;
        for(i = 0, len = ref.length; i < len; i++){
            edge = ref[i];
            try {
                if (edge.when(talos, event) === true) {
                    return edge;
                }
            } catch (error1) {
                error = error1;
                return talos.catch(error);
            }
        }
        return talos.catch(new Error("no matching when condition"));
    },
    run: function*(edge, talos, event) {
        var error;
        try {
            if (isGeneratorFunction(edge.run)) {
                return yield* edge.run(talos, event);
            } else if (Type.isFunction(edge.run)) {
                return edge.run(talos, event);
            }
        } catch (error1) {
            error = error1;
            return talos.catch(error);
        }
    },
    move: function(edge, talos, event) {
        var error, previous;
        try {
            previous = talos.state;
            edge.move(talos, event);
            return talos.previousState = previous;
        } catch (error1) {
            error = error1;
            return talos.catch(error);
        }
    },
    tick: function*(talos, event) {
        var edge, vertex;
        vertex = Step.matchVertex(talos);
        if (talos.ended) {
            yield talos;
        }
        edge = Step.matchEdge(vertex, talos, event);
        if (talos.ended) {
            yield talos;
        }
        yield* Step.run(edge, talos, event);
        if (talos.ended) {
            yield talos;
        }
        Step.move(edge, talos, event);
        return yield talos; // this is the happy-path yield
    }
};
start = generic({
    name: "talos: sync start"
});
generic(start, isMachine, function(machine) {
    var talos;
    talos = Talos.make(machine);
    return start(talos);
});
// Create generator where state machine consumes its own context repeatedly.
generic(start, Talos.isType, function*(talos) {
    var current, ref;
    while(true){
        ref = Step.tick(talos, talos.context);
        for (current of ref){
            yield current;
            if (talos.ended) {
                return;
            }
        }
    }
});
generic(start, isMachine, Type.isIterable, function(machine, events) {
    var talos;
    talos = Talos.make(machine);
    return start(talos, events);
});
// Create generator where state machine consumes values from iterator.
generic(start, Talos.isType, Type.isIterable, function*(talos, events) {
    var current, event, ref;
    for (event of events){
        ref = Step.tick(talos, event);
        for (current of ref){
            yield current;
            if (talos.ended) {
                return;
            }
        }
    }
});
generic(start, isMachine, Type.isObject, function(machine, context) {
    var talos;
    talos = Talos.make(machine);
    talos.context = context;
    return start(talos);
});
generic(start, Talos.isType, Type.isObject, function(talos, context) {
    talos.context = context;
    return start(talos);
});
generic(start, isMachine, Type.isObject, Type.isIterable, function(machine, context, events) {
    var talos;
    talos = Talos.make(machine);
    talos.context = context;
    return start(talos, events);
});
generic(start, Talos.isType, Type.isObject, Type.isIterable, function(talos, context, events) {
    talos.context = context;
    return start(talos, events);
});
// Convenience function to keep going and only return the final talos.
run = generic({
    name: "talos: sync run"
});
// Further convenience to support automatically using start.
generic(run, Type.isAny, function() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    return run(start(...args));
});
generic(run, Type.isIterator, function(iterator) {
    var result, talos;
    for (talos of iterator){
        result = talos;
    }
    return result;
});
pipe = function(fx) {
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var talos;
        talos = run(start(fx, ...args));
        if (talos.error != null) {
            throw talos.error;
        }
        return talos.context;
    };
};
export * from "./states";
export * from "./machine";
export * from "./talos";
export * from "./types";
export { Step, start, run, pipe }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=/@dashkite/talos/src/sync.coffee

//# sourceMappingURL=data:application/json;base64,