var make;
import * as Type from "@dashkite/joy/type";
import { generic } from "@dashkite/joy/generic";
make = generic({
    name: "make edge accept",
    default: function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        throw new Error(`make edge accept input is malformed ${JSON.stringify(args)}`);
    }
});
generic(make, Type.isString, function(s) {
    return function(talos, transform) {
        return transform === s;
    };
});
generic(make, Type.isSymbol, function(s) {
    return function(talos, transform) {
        return transform === s;
    };
});
generic(make, Type.isNumber, function(n) {
    return function(talos, transform) {
        return transform === n;
    };
});
generic(make, Type.isBoolean, function(b) {
    return function() {
        return b;
    };
});
generic(make, Type.isRegExp, function(re) {
    return function(talos, transform) {
        return Type.isString(transform) && re.test(transform);
    };
});
generic(make, Type.isFunction, function(f) {
    return function(talos) {
        for(var _len = arguments.length, transforms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            transforms[_key - 1] = arguments[_key];
        }
        return f(talos, ...transforms);
    };
});
export { make as accept }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL2NvbnRhaW5lcnMvZWRnZS9hY2NlcHQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFBO0VBQVMsT0FBVDtDQUFBLE1BQUE7O0FBR0EsSUFBQSxHQUFPLE9BQUEsQ0FDTDtFQUFBLElBQUEsRUFBTSxrQkFBTjtFQUNBLE9BQUEsRUFBUyxRQUFBLENBQUEsR0FBRSxJQUFGLENBQUE7SUFDUCxNQUFNLElBQUksS0FBSixDQUFVLENBQUEsb0NBQUEsQ0FBQSxDQUF1QyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsQ0FBdkMsQ0FBQSxDQUFWO0VBREM7QUFEVCxDQURLOztBQUtQLE9BQUEsQ0FBUSxJQUFSLEVBQWMsSUFBSSxDQUFDLFFBQW5CLEVBQTZCLFFBQUEsQ0FBRSxDQUFGLENBQUE7U0FDM0IsUUFBQSxDQUFFLEtBQUYsRUFBUyxTQUFULENBQUE7V0FBd0IsU0FBQSxLQUFhO0VBQXJDO0FBRDJCLENBQTdCOztBQUdBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsSUFBSSxDQUFDLFFBQW5CLEVBQTZCLFFBQUEsQ0FBRSxDQUFGLENBQUE7U0FDM0IsUUFBQSxDQUFFLEtBQUYsRUFBUyxTQUFULENBQUE7V0FBd0IsU0FBQSxLQUFhO0VBQXJDO0FBRDJCLENBQTdCOztBQUdBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsSUFBSSxDQUFDLFFBQW5CLEVBQTZCLFFBQUEsQ0FBRSxDQUFGLENBQUE7U0FDM0IsUUFBQSxDQUFFLEtBQUYsRUFBUyxTQUFULENBQUE7V0FBd0IsU0FBQSxLQUFhO0VBQXJDO0FBRDJCLENBQTdCOztBQUdBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsSUFBSSxDQUFDLFNBQW5CLEVBQThCLFFBQUEsQ0FBRSxDQUFGLENBQUE7U0FDNUIsUUFBQSxDQUFBLENBQUE7V0FBRztFQUFIO0FBRDRCLENBQTlCOztBQUdBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsSUFBSSxDQUFDLFFBQW5CLEVBQTZCLFFBQUEsQ0FBRSxFQUFGLENBQUE7U0FDM0IsUUFBQSxDQUFFLEtBQUYsRUFBUyxTQUFULENBQUE7V0FDRSxDQUFFLElBQUksQ0FBQyxRQUFMLENBQWMsU0FBZCxDQUFGLENBQUEsSUFBK0IsQ0FBRSxFQUFFLENBQUMsSUFBSCxDQUFRLFNBQVIsQ0FBRjtFQURqQztBQUQyQixDQUE3Qjs7QUFJQSxPQUFBLENBQVEsSUFBUixFQUFjLElBQUksQ0FBQyxVQUFuQixFQUErQixRQUFBLENBQUUsQ0FBRixDQUFBO1NBQzdCLFFBQUEsQ0FBRSxLQUFGLEVBQUEsR0FBUyxVQUFULENBQUE7V0FBNEIsQ0FBQSxDQUFFLEtBQUYsRUFBUyxHQUFBLFVBQVQ7RUFBNUI7QUFENkIsQ0FBL0I7O0FBS0EsT0FBQTtFQUFTLElBQUEsVUFBVCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5cblxubWFrZSA9IGdlbmVyaWMgXG4gIG5hbWU6IFwibWFrZSBlZGdlIGFjY2VwdFwiXG4gIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgIHRocm93IG5ldyBFcnJvciBcIm1ha2UgZWRnZSBhY2NlcHQgaW5wdXQgaXMgbWFsZm9ybWVkICN7SlNPTi5zdHJpbmdpZnkgYXJnc31cIlxuXG5nZW5lcmljIG1ha2UsIFR5cGUuaXNTdHJpbmcsICggcyApIC0+XG4gICggdGFsb3MsIHRyYW5zZm9ybSApIC0+IHRyYW5zZm9ybSA9PSBzXG5cbmdlbmVyaWMgbWFrZSwgVHlwZS5pc1N5bWJvbCwgKCBzICkgLT5cbiAgKCB0YWxvcywgdHJhbnNmb3JtICkgLT4gdHJhbnNmb3JtID09IHNcblxuZ2VuZXJpYyBtYWtlLCBUeXBlLmlzTnVtYmVyLCAoIG4gKSAtPlxuICAoIHRhbG9zLCB0cmFuc2Zvcm0gKSAtPiB0cmFuc2Zvcm0gPT0gblxuXG5nZW5lcmljIG1ha2UsIFR5cGUuaXNCb29sZWFuLCAoIGIgKSAtPlxuICAtPiBiXG5cbmdlbmVyaWMgbWFrZSwgVHlwZS5pc1JlZ0V4cCwgKCByZSApIC0+XG4gICggdGFsb3MsIHRyYW5zZm9ybSApIC0+IFxuICAgICggVHlwZS5pc1N0cmluZyB0cmFuc2Zvcm0gKSAmJiAoIHJlLnRlc3QgdHJhbnNmb3JtIClcblxuZ2VuZXJpYyBtYWtlLCBUeXBlLmlzRnVuY3Rpb24sICggZiApIC0+XG4gICggdGFsb3MsIHRyYW5zZm9ybXMuLi4gKSAtPiBmIHRhbG9zLCB0cmFuc2Zvcm1zLi4uXG5cblxuXG5leHBvcnQgeyBtYWtlIGFzIGFjY2VwdCB9Il19
 //# sourceURL=src/containers/edge/accept.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250YWluZXJzL2VkZ2UvYWNjZXB0LmNvZmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgZ2VuZXJpYyB9IGZyb20gXCJAZGFzaGtpdGUvam95L2dlbmVyaWNcIlxuXG5cbm1ha2UgPSBnZW5lcmljIFxuICBuYW1lOiBcIm1ha2UgZWRnZSBhY2NlcHRcIlxuICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJtYWtlIGVkZ2UgYWNjZXB0IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuZ2VuZXJpYyBtYWtlLCBUeXBlLmlzU3RyaW5nLCAoIHMgKSAtPlxuICAoIHRhbG9zLCB0cmFuc2Zvcm0gKSAtPiB0cmFuc2Zvcm0gPT0gc1xuXG5nZW5lcmljIG1ha2UsIFR5cGUuaXNTeW1ib2wsICggcyApIC0+XG4gICggdGFsb3MsIHRyYW5zZm9ybSApIC0+IHRyYW5zZm9ybSA9PSBzXG5cbmdlbmVyaWMgbWFrZSwgVHlwZS5pc051bWJlciwgKCBuICkgLT5cbiAgKCB0YWxvcywgdHJhbnNmb3JtICkgLT4gdHJhbnNmb3JtID09IG5cblxuZ2VuZXJpYyBtYWtlLCBUeXBlLmlzQm9vbGVhbiwgKCBiICkgLT5cbiAgLT4gYlxuXG5nZW5lcmljIG1ha2UsIFR5cGUuaXNSZWdFeHAsICggcmUgKSAtPlxuICAoIHRhbG9zLCB0cmFuc2Zvcm0gKSAtPiBcbiAgICAoIFR5cGUuaXNTdHJpbmcgdHJhbnNmb3JtICkgJiYgKCByZS50ZXN0IHRyYW5zZm9ybSApXG5cbmdlbmVyaWMgbWFrZSwgVHlwZS5pc0Z1bmN0aW9uLCAoIGYgKSAtPlxuICAoIHRhbG9zLCB0cmFuc2Zvcm1zLi4uICkgLT4gZiB0YWxvcywgdHJhbnNmb3Jtcy4uLlxuXG5cblxuZXhwb3J0IHsgbWFrZSBhcyBhY2NlcHQgfSJdLCJuYW1lcyI6WyJtYWtlIiwiVHlwZSIsImdlbmVyaWMiLCJuYW1lIiwiZGVmYXVsdCIsImFyZ3MiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJpc1N0cmluZyIsInMiLCJ0YWxvcyIsInRyYW5zZm9ybSIsImlzU3ltYm9sIiwiaXNOdW1iZXIiLCJuIiwiaXNCb29sZWFuIiwiYiIsImlzUmVnRXhwIiwicmUiLCJ0ZXN0IiwiaXNGdW5jdGlvbiIsImYiLCJ0cmFuc2Zvcm1zIiwiYWNjZXB0Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQTtBQUFBLFlBQU9DLFVBQVAscUJBQUE7QUFDQSxTQUFTQyxPQUFULFFBQUEsd0JBQUE7QUFHQUYsT0FBT0UsUUFDTDtJQUFBQyxNQUFNO0lBQ05DLFNBQVM7UUFBQSxJQUFBLElBQUEsT0FBQSxVQUFBLFFBQUEsQUFBRUMsT0FBRixVQUFBLE9BQUEsT0FBQSxHQUFBLE9BQUEsTUFBQSxPQUFBO1lBQUVBLEtBQUYsUUFBQSxTQUFBLENBQUEsS0FBQTtRQUFFO1FBQ1QsTUFBTSxJQUFJQyxNQUFNLENBQUEsb0NBQUEsRUFBdUNDLEtBQUtDLFNBQUwsQ0FBZUgsTUFBdEQsQ0FBVjtJQURDO0FBRFQ7QUFJRkgsUUFBUUYsTUFBTUMsS0FBS1EsUUFBbkIsRUFBNkIsU0FBRUMsQ0FBRjtXQUMzQixTQUFFQyxLQUFGLEVBQVNDLFNBQVQ7ZUFBd0JBLGNBQWFGO0lBQXJDO0FBRDJCO0FBRzdCUixRQUFRRixNQUFNQyxLQUFLWSxRQUFuQixFQUE2QixTQUFFSCxDQUFGO1dBQzNCLFNBQUVDLEtBQUYsRUFBU0MsU0FBVDtlQUF3QkEsY0FBYUY7SUFBckM7QUFEMkI7QUFHN0JSLFFBQVFGLE1BQU1DLEtBQUthLFFBQW5CLEVBQTZCLFNBQUVDLENBQUY7V0FDM0IsU0FBRUosS0FBRixFQUFTQyxTQUFUO2VBQXdCQSxjQUFhRztJQUFyQztBQUQyQjtBQUc3QmIsUUFBUUYsTUFBTUMsS0FBS2UsU0FBbkIsRUFBOEIsU0FBRUMsQ0FBRjtXQUM1QjtlQUFHQTtJQUFIO0FBRDRCO0FBRzlCZixRQUFRRixNQUFNQyxLQUFLaUIsUUFBbkIsRUFBNkIsU0FBRUMsRUFBRjtXQUMzQixTQUFFUixLQUFGLEVBQVNDLFNBQVQ7ZUFDRSxBQUFFWCxLQUFLUSxRQUFMLENBQWNHLGNBQWlCTyxHQUFHQyxJQUFILENBQVFSO0lBRDNDO0FBRDJCO0FBSTdCVixRQUFRRixNQUFNQyxLQUFLb0IsVUFBbkIsRUFBK0IsU0FBRUMsQ0FBRjtXQUM3QixTQUFFWCxLQUFGO1FBQUEsSUFBQSxJQUFBLE9BQUEsVUFBQSxRQUFBLEFBQVNZLGFBQVQsVUFBQSxPQUFBLElBQUEsT0FBQSxRQUFBLE9BQUEsR0FBQSxPQUFBLE1BQUEsT0FBQTtZQUFTQSxXQUFULE9BQUEsS0FBQSxTQUFBLENBQUEsS0FBQTtRQUFTO2VBQW1CRCxFQUFFWCxVQUFPWTtJQUFyQztBQUQ2QjtBQUsvQixTQUFTdkIsUUFBQXdCLE1BQVQifQ==