var add, grow, test;
import { Machine, Talos, $start, $end, start, run, pipe } from "../../src/sync";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        graph: {
            start: {
                hold: {
                    run: add
                }
            },
            hold: {
                hold: {
                    run: add
                }
            }
        }
    });
    B = Machine.make({
        graph: {
            start: {
                first: {
                    run: grow
                }
            },
            first: {
                second: {
                    run: grow
                }
            },
            second: {
                end: {
                    run: grow
                }
            }
        }
    });
    return [
        h.test("start", h.target("sync", function() {
            return h.assert(Type.isIterator(start(A)));
        })),
        h.test("run while consuming events", h.target("sync", function() {
            var events, ref, talos;
            events = [
                1,
                2,
                3
            ];
            talos = run(A, {
                sum: 0
            }, events);
            return h.assert.equal(6, talos != null ? (ref = talos.context) != null ? ref.sum : void 0 : void 0);
        })),
        h.test("run without events and reconsume context", h.target("sync", function() {
            var ref, talos;
            talos = run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("pipe functional composition", h.target("sync", function() {
            var a, b, b2, c, context, error, f, g;
            a = function(talos) {
                return talos.context.sum = 1;
            };
            b = function(talos) {
                return talos.context.sum += 2;
            };
            b2 = function() {
                throw new Error("b2");
            };
            c = function(talos) {
                return talos.context.sum += 3;
            };
            f = pipe([
                a,
                b,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = f();
            h.assert.equal(8, context != null ? context.sum : void 0);
            g = pipe([
                a,
                b,
                b2,
                c
            ]);
            try {
                g();
                throw new Error("did not throw");
            } catch (error1) {
                error = error1;
                return h.assert(error.message === "b2");
            }
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9zeW5jL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsS0FBbEI7RUFBeUIsTUFBekI7RUFBaUMsSUFBakM7RUFDRSxLQURGO0VBQ1MsR0FEVDtFQUNjLElBRGQ7Q0FBQSxNQUFBOztBQUVBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFFQSxHQUFBLEdBQU0sUUFBQSxDQUFFLEtBQUYsRUFBUyxLQUFULENBQUE7U0FDSixLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsSUFBcUI7QUFEakI7O0FBRU4sSUFBQSxHQUFPLFFBQUEsQ0FBRSxLQUFGLENBQUE7U0FDTCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQWQsSUFBeUI7QUFEcEI7O0FBSVAsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxDQUFBLEVBQUE7RUFBRSxDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FBYTtJQUFBLEtBQUEsRUFDZjtNQUFBLEtBQUEsRUFDRTtRQUFBLElBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FERjtNQUdBLElBQUEsRUFDRTtRQUFBLElBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREY7SUFKRjtFQURlLENBQWI7RUFRSixDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FBYTtJQUFBLEtBQUEsRUFDZjtNQUFBLEtBQUEsRUFDRTtRQUFBLEtBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FERjtNQUdBLEtBQUEsRUFDRTtRQUFBLE1BQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FKRjtNQU1BLE1BQUEsRUFDRTtRQUFBLEdBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREY7SUFQRjtFQURlLENBQWI7U0FZSjtJQUNFLENBQUMsQ0FBQyxJQUFGLENBQU8sT0FBUDtJQUFnQixDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQ7SUFBaUIsUUFBQSxDQUFBLENBQUE7YUFDL0IsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxJQUFJLENBQUMsVUFBTCxDQUFnQixLQUFBLENBQU0sQ0FBTixDQUFoQixDQUFUO0lBRCtCLENBQWpCLENBQWhCLENBREY7SUFJRSxDQUFDLENBQUMsSUFBRixDQUFPLDRCQUFQO0lBQXFDLENBQUMsQ0FBQyxNQUFGLENBQVMsTUFBVDtJQUFpQixRQUFBLENBQUEsQ0FBQTtBQUMxRCxVQUFBLE1BQUE7SUFBQSxHQUFBO0lBQUE7TUFBTSxNQUFBLEdBQVMsQ0FBRSxDQUFGO0lBQUssQ0FBTDtJQUFRLENBQVI7TUFDVCxLQUFBLEdBQVEsR0FBQSxDQUFJLENBQUo7SUFBTztRQUFBLEdBQUEsRUFBSztNQUFMLENBQVA7SUFBZSxNQUFmO2FBQ1IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsQ0FBZjt1REFBZ0MsQ0FBRSxxQkFBbEM7SUFIb0QsQ0FBakIsQ0FBckMsQ0FKRjtJQVNFLENBQUMsQ0FBQyxJQUFGLENBQU8sMENBQVA7SUFBbUQsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxNQUFUO0lBQWlCLFFBQUEsQ0FBQSxDQUFBO0FBQ3hFLFVBQUEsR0FBQTtJQUFBO01BQU0sS0FBQSxHQUFRLEdBQUEsQ0FBSSxDQUFKO0lBQU87UUFBQSxPQUFBLEVBQVM7TUFBVCxDQUFQO2FBQ1IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsQ0FBZjt1Q0FBK0IsQ0FBRSxnQkFBakM7SUFGa0UsQ0FBakIsQ0FBbkQsQ0FURjtJQWFFLENBQUMsQ0FBQyxJQUFGLENBQU8sNkJBQVA7SUFBc0MsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxNQUFUO0lBQWlCLFFBQUEsQ0FBQSxDQUFBO0FBQzNELFVBQUEsQ0FBQTtJQUFBLENBQUE7SUFBQSxFQUFBO0lBQUEsQ0FBQTtJQUFBLE9BQUE7SUFBQSxLQUFBO0lBQUEsQ0FBQTtJQUFBO01BQU0sQ0FBQSxHQUFJLFFBQUEsQ0FBRSxLQUFGLENBQUE7ZUFBYSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsR0FBb0I7TUFBakM7TUFDSixDQUFBLEdBQUksUUFBQSxDQUFFLEtBQUYsQ0FBQTtlQUFhLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBZCxJQUFxQjtNQUFsQztNQUNKLEVBQUEsR0FBSyxRQUFBLENBQUEsQ0FBQTtRQUFHLE1BQU0sSUFBSSxLQUFKLENBQVUsSUFBVjtNQUFUO01BQ0wsQ0FBQSxHQUFJLFFBQUEsQ0FBRSxLQUFGLENBQUE7ZUFBYSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsSUFBcUI7TUFBbEM7TUFFSixDQUFBLEdBQUksSUFBQSxDQUFLLENBQUUsQ0FBRjtJQUFLLENBQUw7SUFBUSxDQUFSO0lBQVcsQ0FBWCxDQUFMO01BQ0osQ0FBQyxDQUFDLE1BQUYsQ0FBUyxJQUFJLENBQUMsVUFBTCxDQUFnQixDQUFoQixDQUFUO01BQ0EsT0FBQSxHQUFVLENBQUEsQ0FBQTtNQUNWLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQWY7c0JBQWtCLE9BQU8sQ0FBRSxZQUEzQjtNQUVBLENBQUEsR0FBSSxJQUFBLENBQUssQ0FBRSxDQUFGO0lBQUssQ0FBTDtJQUFRLEVBQVI7SUFBWSxDQUFaLENBQUw7QUFDSjtRQUNFLENBQUEsQ0FBQTtRQUNBLE1BQU0sSUFBSSxLQUFKLENBQVUsZUFBVixFQUZSO09BR0EsY0FBQTtRQUFNO2VBQ0osQ0FBQyxDQUFDLE1BQUYsQ0FBUyxLQUFLLENBQUMsT0FBTixLQUFpQixJQUExQixFQURGOztJQWZxRCxDQUFqQixDQUF0QyxDQWJGOztBQXJCSzs7QUFxRFAsT0FBQTtFQUFTLElBQUEsU0FBVCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsIFRhbG9zLCAkc3RhcnQsICRlbmQsIFxuICBzdGFydCwgcnVuLCBwaXBlIH0gZnJvbSBcIi4uLy4uL3NyYy9zeW5jXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuYWRkID0gKCB0YWxvcywgZXZlbnQgKSAtPlxuICB0YWxvcy5jb250ZXh0LnN1bSArPSBldmVudFxuZ3JvdyA9ICggdGFsb3MgKSAtPlxuICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gMlxuXG5cbnRlc3QgPSAtPlxuICBBID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZSBncmFwaDpcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0l0ZXJhdG9yIHN0YXJ0IEFcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyAxLCAyLCAzIF1cbiAgICAgIHRhbG9zID0gcnVuIEEsIHN1bTogMCwgZXZlbnRzXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcz8uY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBydW4gQiwgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwicGlwZSBmdW5jdGlvbmFsIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMlxuICAgICAgYjIgPSAtPiB0aHJvdyBuZXcgRXJyb3IgXCJiMlwiXG4gICAgICBjID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IDNcbiAgICAgIFxuICAgICAgZiA9IHBpcGUgWyBhLCBiLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gZigpXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCBjb250ZXh0Py5zdW1cblxuICAgICAgZyA9IHBpcGUgWyBhLCBiLCBiMiwgYyBdXG4gICAgICB0cnlcbiAgICAgICAgZygpXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcImRpZCBub3QgdGhyb3dcIlxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgaC5hc3NlcnQgZXJyb3IubWVzc2FnZSA9PSBcImIyXCJcbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXX0=
 //# sourceURL=test/sync/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc3luYy9iYXNpYy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCwgXG4gIHN0YXJ0LCBydW4sIHBpcGUgfSBmcm9tIFwiLi4vLi4vc3JjL3N5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2UgZ3JhcGg6XG4gICAgc3RhcnQ6XG4gICAgICBob2xkOiBcbiAgICAgICAgcnVuOiBhZGRcbiAgICBob2xkOlxuICAgICAgaG9sZDpcbiAgICAgICAgcnVuOiBhZGRcblxuICBCID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBoLmFzc2VydCBUeXBlLmlzSXRlcmF0b3Igc3RhcnQgQVxuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIGNvbnN1bWluZyBldmVudHNcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBldmVudHMgPSBbIDEsIDIsIDMgXVxuICAgICAgdGFsb3MgPSBydW4gQSwgc3VtOiAwLCBldmVudHNcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIHRhbG9zPy5jb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcInJ1biB3aXRob3V0IGV2ZW50cyBhbmQgcmVjb25zdW1lIGNvbnRleHRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IHJ1biBCLCBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJwaXBlIGZ1bmN0aW9uYWwgY29tcG9zaXRpb25cIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSAyXG4gICAgICBiMiA9IC0+IHRocm93IG5ldyBFcnJvciBcImIyXCJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gM1xuICAgICAgXG4gICAgICBmID0gcGlwZSBbIGEsIGIsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBmKClcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIGNvbnRleHQ/LnN1bVxuXG4gICAgICBnID0gcGlwZSBbIGEsIGIsIGIyLCBjIF1cbiAgICAgIHRyeVxuICAgICAgICBnKClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiZGlkIG5vdCB0aHJvd1wiXG4gICAgICBjYXRjaCBlcnJvclxuICAgICAgICBoLmFzc2VydCBlcnJvci5tZXNzYWdlID09IFwiYjJcIlxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSJdLCJuYW1lcyI6WyJhZGQiLCJncm93IiwidGVzdCIsIk1hY2hpbmUiLCJUYWxvcyIsIiRzdGFydCIsIiRlbmQiLCJzdGFydCIsInJ1biIsInBpcGUiLCJUeXBlIiwiaCIsInRhbG9zIiwiZXZlbnQiLCJjb250ZXh0Iiwic3VtIiwicHJvZHVjdCIsIkEiLCJCIiwibWFrZSIsImdyYXBoIiwiaG9sZCIsImZpcnN0Iiwic2Vjb25kIiwiZW5kIiwidGFyZ2V0IiwiYXNzZXJ0IiwiaXNJdGVyYXRvciIsImV2ZW50cyIsInJlZiIsImVxdWFsIiwiYSIsImIiLCJiMiIsImMiLCJlcnJvciIsImYiLCJnIiwiRXJyb3IiLCJpc0Z1bmN0aW9uIiwiZXJyb3IxIiwibWVzc2FnZSIsImJhc2ljIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSxLQUFBQyxNQUFBQztBQUFBLFNBQVNDLE9BQVQsRUFBa0JDLEtBQWxCLEVBQXlCQyxNQUF6QixFQUFpQ0MsSUFBakMsRUFDRUMsS0FERixFQUNTQyxHQURULEVBQ2NDLElBRGQsUUFBQSxpQkFBQTtBQUVBLFlBQU9DLFVBQVAscUJBQUE7QUFDQSxZQUFPQyxPQUFQLGFBQUE7QUFFQVgsTUFBTSxTQUFFWSxLQUFGLEVBQVNDLEtBQVQ7V0FDSkQsTUFBTUUsT0FBTyxDQUFDQyxHQUFkLElBQXFCRjtBQURqQjtBQUVOWixPQUFPLFNBQUVXLEtBQUY7V0FDTEEsTUFBTUUsT0FBTyxDQUFDRSxPQUFkLElBQXlCO0FBRHBCO0FBSVBkLE9BQU87SUFDUCxJQUFBZSxHQUFBQztJQUFFRCxJQUFJZCxRQUFRZ0IsSUFBUixDQUFhO1FBQUFDLE9BQ2Y7WUFBQWIsT0FDRTtnQkFBQWMsTUFDRTtvQkFBQWIsS0FBS1I7Z0JBQUw7WUFERjtZQUVGcUIsTUFDRTtnQkFBQUEsTUFDRTtvQkFBQWIsS0FBS1I7Z0JBQUw7WUFERjtRQUpGO0lBRGU7SUFRakJrQixJQUFJZixRQUFRZ0IsSUFBUixDQUFhO1FBQUFDLE9BQ2Y7WUFBQWIsT0FDRTtnQkFBQWUsT0FDRTtvQkFBQWQsS0FBS1A7Z0JBQUw7WUFERjtZQUVGcUIsT0FDRTtnQkFBQUMsUUFDRTtvQkFBQWYsS0FBS1A7Z0JBQUw7WUFERjtZQUVGc0IsUUFDRTtnQkFBQUMsS0FDRTtvQkFBQWhCLEtBQUtQO2dCQUFMO1lBREY7UUFQRjtJQURlO1dBWWpCO1FBQ0VVLEVBQUVULElBQUYsQ0FBTyxTQUFTUyxFQUFFYyxNQUFGLENBQVMsUUFBUTttQkFDL0JkLEVBQUVlLE1BQUYsQ0FBU2hCLEtBQUtpQixVQUFMLENBQWdCcEIsTUFBTVU7UUFEQTtRQUdqQ04sRUFBRVQsSUFBRixDQUFPLDhCQUE4QlMsRUFBRWMsTUFBRixDQUFTLFFBQVE7WUFDMUQsSUFBQUcsUUFBQUMsS0FBQWpCO1lBQU1nQixTQUFTO2dCQUFFO2dCQUFHO2dCQUFHO2FBQVI7WUFDVGhCLFFBQVFKLElBQUlTLEdBQUc7Z0JBQUFGLEtBQUs7WUFBTCxHQUFRYTttQkFDdkJqQixFQUFFZSxNQUFNLENBQUNJLEtBQVQsQ0FBZSx1REFBbUJmLEdBQUEsR0FBQSxLQUFBLElBQUEsS0FBQTtRQUhrQjtRQUt0REosRUFBRVQsSUFBRixDQUFPLDRDQUE0Q1MsRUFBRWMsTUFBRixDQUFTLFFBQVE7WUFDeEUsSUFBQUksS0FBQWpCO1lBQU1BLFFBQVFKLElBQUlVLEdBQUc7Z0JBQUFGLFNBQVM7WUFBVDttQkFDZkwsRUFBRWUsTUFBTSxDQUFDSSxLQUFULENBQWUsdUNBQWtCZCxPQUFBLEdBQUEsS0FBQTtRQUZpQztRQUlwRUwsRUFBRVQsSUFBRixDQUFPLCtCQUErQlMsRUFBRWMsTUFBRixDQUFTLFFBQVE7WUFDM0QsSUFBQU0sR0FBQUMsR0FBQUMsSUFBQUMsR0FBQXBCLFNBQUFxQixPQUFBQyxHQUFBQztZQUFNTixJQUFJLFNBQUVuQixLQUFGO3VCQUFhQSxNQUFNRSxPQUFPLENBQUNDLEdBQWQsR0FBb0I7WUFBakM7WUFDSmlCLElBQUksU0FBRXBCLEtBQUY7dUJBQWFBLE1BQU1FLE9BQU8sQ0FBQ0MsR0FBZCxJQUFxQjtZQUFsQztZQUNKa0IsS0FBSztnQkFBRyxNQUFNLElBQUlLLE1BQU07WUFBbkI7WUFDTEosSUFBSSxTQUFFdEIsS0FBRjt1QkFBYUEsTUFBTUUsT0FBTyxDQUFDQyxHQUFkLElBQXFCO1lBQWxDO1lBRUpxQixJQUFJM0IsS0FBSztnQkFBRXNCO2dCQUFHQztnQkFBR0E7Z0JBQUdFO2FBQWhCO1lBQ0p2QixFQUFFZSxNQUFGLENBQVNoQixLQUFLNkIsVUFBTCxDQUFnQkg7WUFDekJ0QixVQUFVc0I7WUFDVnpCLEVBQUVlLE1BQU0sQ0FBQ0ksS0FBVCxDQUFlLHFCQUFHaEIsUUFBU0MsR0FBQSxHQUFBLEtBQUE7WUFFM0JzQixJQUFJNUIsS0FBSztnQkFBRXNCO2dCQUFHQztnQkFBR0M7Z0JBQUlDO2FBQWpCO1lBQ0osSUFBQTtnQkFDRUc7Z0JBQ0EsTUFBTSxJQUFJQyxNQUFNO2NBQ2xCLE9BQUFFLFFBQUE7Z0JBQU1MLFFBQUFLO3VCQUNKN0IsRUFBRWUsTUFBRixDQUFTUyxNQUFNTSxPQUFOLEtBQWlCOztRQWhCeUI7O0FBbENwRDtBQXFEUCxTQUFTdkMsUUFBQXdDLEtBQVQifQ==