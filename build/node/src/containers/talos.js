"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Talos", {
    enumerable: true,
    get: function() {
        return Talos;
    }
});
const _metaclass = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/metaclass"));
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _value = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/value"));
const _states = require("../states");
const _generic = require("@dashkite/joy/generic");
const _helpers = require("../helpers");
const _errors = require("./errors");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var Talos, isError, isState, make;
isState = (0, _helpers.oneOf)([
    _type.isString,
    _type.isSymbol
]);
isError = (0, _helpers.oneOf)([
    _type.isUndefined,
    _errors.TalosError.isType
]);
make = (0, _generic.generic)({
    name: "talos make",
    default: function(...args) {
        throw new Error(`Talos.make: input is malformed ${JSON.stringify(args)}`);
    }
});
(0, _generic.generic)(make, isState, _type.isObject, isError, function(state, context, error) {
    return new Talos({
        state,
        context,
        error
    });
});
(0, _generic.generic)(make, function() {
    return make(_states.$start, {}, null);
});
(0, _generic.generic)(make, isState, _type.isObject, function(state, context) {
    return make(state, context, null);
});
(0, _generic.generic)(make, isState, function(state) {
    return make(state, {}, null);
});
(0, _generic.generic)(make, _type.isObject, function(context) {
    return make(_states.$start, context, null);
});
Talos = (function() {
    class Talos {
        constructor({ state: state1, context: context1, error: error1 }){
            this.state = state1;
            this.context = context1;
            this.error = error1;
        }
        halt() {
            return this.state = _states.$halt;
        }
        throw(error) {
            this.halt();
            return this.error = error != null ? error : _errors.TalosError.make();
        }
        reset(state) {
            this.state = state != null ? state : _states.$start;
            this.context = {};
            return this.error = null;
        }
        clone() {
            var context;
            context = _value.clone(this.context);
            return new Talos({
                state: this.state,
                context,
                error: this.error
            });
        }
    }
    ;
    _metaclass.mixin(Talos.prototype, [
        _metaclass.getters({
            starting: function() {
                return (0, _states.atStart)(this.state);
            },
            halted: function() {
                return (0, _states.atHalt)(this.state);
            },
            paused: function() {
                return (0, _states.atPause)(this.state);
            },
            success: function() {
                return this.halted && this.error == null;
            },
            failure: function() {
                return this.halted && this.error != null;
            },
            running: function() {
                return !this.halted && !this.paused;
            }
        })
    ]);
    Talos.make = make;
    Talos.isType = _type.isType(Talos);
    return Talos;
}).call(void 0);
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy9zcmMvY29udGFpbmVycy90YWxvcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQTs7QUFBQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLFNBQVAsTUFBQTs7QUFDQSxPQUFBO0VBQVMsTUFBVDtFQUFpQixLQUFqQjtFQUF3QixPQUF4QjtFQUFpQyxNQUFqQztFQUF5QyxPQUF6QztDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE9BQVQ7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsVUFBVDtDQUFBLE1BQUE7O0FBR0EsT0FBQSxHQUFVLEtBQUEsQ0FBTSxDQUNkLElBQUksQ0FBQyxRQURTLEVBRWQsSUFBSSxDQUFDLFFBRlMsQ0FBTjs7QUFLVixPQUFBLEdBQVUsS0FBQSxDQUFNLENBQ2QsSUFBSSxDQUFDLFdBRFMsRUFFZCxVQUFVLENBQUMsTUFGRyxDQUFOOztBQUtWLElBQUEsR0FBTyxPQUFBLENBQ0w7RUFBQSxJQUFBLEVBQU0sWUFBTjtFQUNBLE9BQUEsRUFBUyxRQUFBLENBQUEsR0FBRSxJQUFGLENBQUE7SUFDUCxNQUFNLElBQUksS0FBSixDQUFVLENBQUEsK0JBQUEsQ0FBQSxDQUFrQyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsQ0FBbEMsQ0FBQSxDQUFWO0VBREM7QUFEVCxDQURLOztBQUtQLE9BQUEsQ0FBUSxJQUFSLEVBQWMsT0FBZCxFQUF1QixJQUFJLENBQUMsUUFBNUIsRUFBc0MsT0FBdEMsRUFBK0MsUUFBQSxDQUFFLEtBQUYsRUFBUyxPQUFULEVBQWtCLEtBQWxCLENBQUE7U0FDN0MsSUFBSSxLQUFKLENBQVUsQ0FBRSxLQUFGLEVBQVMsT0FBVCxFQUFrQixLQUFsQixDQUFWO0FBRDZDLENBQS9DOztBQUdBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsUUFBQSxDQUFBLENBQUE7U0FDWixJQUFBLENBQUssTUFBTCxFQUFhLENBQUEsQ0FBYixFQUFpQixJQUFqQjtBQURZLENBQWQ7O0FBR0EsT0FBQSxDQUFRLElBQVIsRUFBYyxPQUFkLEVBQXVCLElBQUksQ0FBQyxRQUE1QixFQUFzQyxRQUFBLENBQUUsS0FBRixFQUFTLE9BQVQsQ0FBQTtTQUNwQyxJQUFBLENBQUssS0FBTCxFQUFZLE9BQVosRUFBcUIsSUFBckI7QUFEb0MsQ0FBdEM7O0FBR0EsT0FBQSxDQUFRLElBQVIsRUFBYyxPQUFkLEVBQXVCLFFBQUEsQ0FBRSxLQUFGLENBQUE7U0FDckIsSUFBQSxDQUFLLEtBQUwsRUFBWSxDQUFBLENBQVosRUFBZ0IsSUFBaEI7QUFEcUIsQ0FBdkI7O0FBR0EsT0FBQSxDQUFRLElBQVIsRUFBYyxJQUFJLENBQUMsUUFBbkIsRUFBNkIsUUFBQSxDQUFFLE9BQUYsQ0FBQTtTQUMzQixJQUFBLENBQUssTUFBTCxFQUFhLE9BQWIsRUFBc0IsSUFBdEI7QUFEMkIsQ0FBN0I7O0FBR007RUFBTixNQUFBLE1BQUE7SUFDRSxXQUFhLENBQUM7UUFBRyxhQUFIO1FBQVcsaUJBQVg7UUFBcUI7TUFBckIsQ0FBRCxDQUFBO01BQUcsSUFBQyxDQUFBO01BQU8sSUFBQyxDQUFBO01BQVMsSUFBQyxDQUFBO0lBQXRCOztJQWViLElBQU0sQ0FBQSxDQUFBO2FBQ0osSUFBQyxDQUFBLEtBQUQsR0FBUztJQURMOztJQUdOLEtBQU8sQ0FBRSxLQUFGLENBQUE7TUFDTCxJQUFDLENBQUEsSUFBRCxDQUFBO2FBQ0EsSUFBQyxDQUFBLEtBQUQsbUJBQVMsUUFBUSxVQUFVLENBQUMsSUFBWCxDQUFBO0lBRlo7O0lBSVAsS0FBTyxDQUFFLEtBQUYsQ0FBQTtNQUNMLElBQUMsQ0FBQSxLQUFELG1CQUFTLFFBQVE7TUFDakIsSUFBQyxDQUFBLE9BQUQsR0FBVyxDQUFBO2FBQ1gsSUFBQyxDQUFBLEtBQUQsR0FBUztJQUhKOztJQUtQLEtBQU8sQ0FBQSxDQUFBO0FBQ1QsVUFBQTtNQUFJLE9BQUEsR0FBVSxLQUFLLENBQUMsS0FBTixDQUFZLElBQUMsQ0FBQSxPQUFiO2FBQ1YsSUFBSSxLQUFKLENBQVUsQ0FBRyxPQUFELElBQUMsQ0FBQSxLQUFILEVBQVUsT0FBVixFQUFvQixPQUFELElBQUMsQ0FBQSxLQUFwQixDQUFWO0lBRks7O0VBNUJUOztFQUdFLElBQUksQ0FBQyxLQUFMLENBQVcsS0FBQyxDQUFBLFNBQVosRUFBZ0I7SUFDZCxJQUFJLENBQUMsT0FBTCxDQUNFO01BQUEsUUFBQSxFQUFVLFFBQUEsQ0FBQSxDQUFBO2VBQUcsT0FBQSxDQUFRLElBQUMsQ0FBQSxLQUFUO01BQUgsQ0FBVjtNQUNBLE1BQUEsRUFBUSxRQUFBLENBQUEsQ0FBQTtlQUFHLE1BQUEsQ0FBTyxJQUFDLENBQUEsS0FBUjtNQUFILENBRFI7TUFFQSxNQUFBLEVBQVEsUUFBQSxDQUFBLENBQUE7ZUFBRyxPQUFBLENBQVEsSUFBQyxDQUFBLEtBQVQ7TUFBSCxDQUZSO01BR0EsT0FBQSxFQUFTLFFBQUEsQ0FBQSxDQUFBO2VBQUcsSUFBQyxDQUFBLE1BQUQsSUFBWTtNQUFmLENBSFQ7TUFJQSxPQUFBLEVBQVMsUUFBQSxDQUFBLENBQUE7ZUFBRyxJQUFDLENBQUEsTUFBRCxJQUFXO01BQWQsQ0FKVDtNQUtBLE9BQUEsRUFBUyxRQUFBLENBQUEsQ0FBQTtlQUFHLENBQUMsSUFBQyxDQUFBLE1BQUYsSUFBWSxDQUFDLElBQUMsQ0FBQTtNQUFqQjtJQUxULENBREYsQ0FEYztHQUFoQjs7RUFVQSxLQUFDLENBQUEsSUFBRCxHQUFPOztFQUNQLEtBQUMsQ0FBQSxNQUFELEdBQVMsSUFBSSxDQUFDLE1BQUwsQ0FBWSxLQUFaOzs7Ozs7QUFtQlgsT0FBQTtFQUNFLEtBREYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBNZXRhIGZyb20gXCJAZGFzaGtpdGUvam95L21ldGFjbGFzc1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgVmFsdWUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdmFsdWVcIlxuaW1wb3J0IHsgJHN0YXJ0LCAkaGFsdCwgYXRTdGFydCwgYXRIYWx0LCBhdFBhdXNlIH0gZnJvbSBcIi4uL3N0YXRlc1wiXG5pbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgeyBvbmVPZiB9IGZyb20gXCIuLi9oZWxwZXJzXCJcbmltcG9ydCB7IFRhbG9zRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnNcIlxuXG5cbmlzU3RhdGUgPSBvbmVPZiBbXG4gIFR5cGUuaXNTdHJpbmdcbiAgVHlwZS5pc1N5bWJvbFxuXVxuXG5pc0Vycm9yID0gb25lT2YgW1xuICBUeXBlLmlzVW5kZWZpbmVkXG4gIFRhbG9zRXJyb3IuaXNUeXBlXG5dXG5cbm1ha2UgPSBnZW5lcmljIFxuICBuYW1lOiBcInRhbG9zIG1ha2VcIlxuICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJUYWxvcy5tYWtlOiBpbnB1dCBpcyBtYWxmb3JtZWQgI3tKU09OLnN0cmluZ2lmeSBhcmdzfVwiXG5cbmdlbmVyaWMgbWFrZSwgaXNTdGF0ZSwgVHlwZS5pc09iamVjdCwgaXNFcnJvciwgKCBzdGF0ZSwgY29udGV4dCwgZXJyb3IgKSAtPlxuICBuZXcgVGFsb3MgeyBzdGF0ZSwgY29udGV4dCwgZXJyb3IgfVxuXG5nZW5lcmljIG1ha2UsIC0+XG4gIG1ha2UgJHN0YXJ0LCB7fSwgbnVsbFxuXG5nZW5lcmljIG1ha2UsIGlzU3RhdGUsIFR5cGUuaXNPYmplY3QsICggc3RhdGUsIGNvbnRleHQgKSAtPlxuICBtYWtlIHN0YXRlLCBjb250ZXh0LCBudWxsXG5cbmdlbmVyaWMgbWFrZSwgaXNTdGF0ZSwgKCBzdGF0ZSApIC0+XG4gIG1ha2Ugc3RhdGUsIHt9LCBudWxsXG5cbmdlbmVyaWMgbWFrZSwgVHlwZS5pc09iamVjdCwgKCBjb250ZXh0ICkgLT5cbiAgbWFrZSAkc3RhcnQsIGNvbnRleHQsIG51bGxcblxuY2xhc3MgVGFsb3NcbiAgY29uc3RydWN0b3I6ICh7IEBzdGF0ZSwgQGNvbnRleHQsIEBlcnJvciB9KSAtPlxuXG4gIE1ldGEubWl4aW4gQDo6LCBbXG4gICAgTWV0YS5nZXR0ZXJzXG4gICAgICBzdGFydGluZzogLT4gYXRTdGFydCBAc3RhdGVcbiAgICAgIGhhbHRlZDogLT4gYXRIYWx0IEBzdGF0ZVxuICAgICAgcGF1c2VkOiAtPiBhdFBhdXNlIEBzdGF0ZVxuICAgICAgc3VjY2VzczogLT4gQGhhbHRlZCAmJiAhQGVycm9yP1xuICAgICAgZmFpbHVyZTogLT4gQGhhbHRlZCAmJiBAZXJyb3I/XG4gICAgICBydW5uaW5nOiAtPiAhQGhhbHRlZCAmJiAhQHBhdXNlZFxuICBdXG5cbiAgQG1ha2U6IG1ha2VcbiAgQGlzVHlwZTogVHlwZS5pc1R5cGUgQFxuXG4gIGhhbHQ6IC0+XG4gICAgQHN0YXRlID0gJGhhbHRcblxuICB0aHJvdzogKCBlcnJvciApIC0+XG4gICAgQGhhbHQoKVxuICAgIEBlcnJvciA9IGVycm9yID8gVGFsb3NFcnJvci5tYWtlKClcblxuICByZXNldDogKCBzdGF0ZSApIC0+XG4gICAgQHN0YXRlID0gc3RhdGUgPyAkc3RhcnRcbiAgICBAY29udGV4dCA9IHt9XG4gICAgQGVycm9yID0gbnVsbFxuXG4gIGNsb25lOiAtPlxuICAgIGNvbnRleHQgPSBWYWx1ZS5jbG9uZSBAY29udGV4dFxuICAgIG5ldyBUYWxvcyB7IEBzdGF0ZSwgY29udGV4dCwgQGVycm9yIH1cbiAgICAgIFxuXG5leHBvcnQge1xuICBUYWxvc1xufSJdfQ==
 //# sourceURL=/@dashkite/talos/src/containers/talos.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3Mvc3JjL2NvbnRhaW5lcnMvdGFsb3MuY29mZmVlIiwiPGFub24+Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE1ldGEgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvbWV0YWNsYXNzXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBWYWx1ZSBmcm9tIFwiQGRhc2hraXRlL2pveS92YWx1ZVwiXG5pbXBvcnQgeyAkc3RhcnQsICRoYWx0LCBhdFN0YXJ0LCBhdEhhbHQsIGF0UGF1c2UgfSBmcm9tIFwiLi4vc3RhdGVzXCJcbmltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcbmltcG9ydCB7IG9uZU9mIH0gZnJvbSBcIi4uL2hlbHBlcnNcIlxuaW1wb3J0IHsgVGFsb3NFcnJvciB9IGZyb20gXCIuL2Vycm9yc1wiXG5cblxuaXNTdGF0ZSA9IG9uZU9mIFtcbiAgVHlwZS5pc1N0cmluZ1xuICBUeXBlLmlzU3ltYm9sXG5dXG5cbmlzRXJyb3IgPSBvbmVPZiBbXG4gIFR5cGUuaXNVbmRlZmluZWRcbiAgVGFsb3NFcnJvci5pc1R5cGVcbl1cblxubWFrZSA9IGdlbmVyaWMgXG4gIG5hbWU6IFwidGFsb3MgbWFrZVwiXG4gIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgIHRocm93IG5ldyBFcnJvciBcIlRhbG9zLm1ha2U6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuZ2VuZXJpYyBtYWtlLCBpc1N0YXRlLCBUeXBlLmlzT2JqZWN0LCBpc0Vycm9yLCAoIHN0YXRlLCBjb250ZXh0LCBlcnJvciApIC0+XG4gIG5ldyBUYWxvcyB7IHN0YXRlLCBjb250ZXh0LCBlcnJvciB9XG5cbmdlbmVyaWMgbWFrZSwgLT5cbiAgbWFrZSAkc3RhcnQsIHt9LCBudWxsXG5cbmdlbmVyaWMgbWFrZSwgaXNTdGF0ZSwgVHlwZS5pc09iamVjdCwgKCBzdGF0ZSwgY29udGV4dCApIC0+XG4gIG1ha2Ugc3RhdGUsIGNvbnRleHQsIG51bGxcblxuZ2VuZXJpYyBtYWtlLCBpc1N0YXRlLCAoIHN0YXRlICkgLT5cbiAgbWFrZSBzdGF0ZSwge30sIG51bGxcblxuZ2VuZXJpYyBtYWtlLCBUeXBlLmlzT2JqZWN0LCAoIGNvbnRleHQgKSAtPlxuICBtYWtlICRzdGFydCwgY29udGV4dCwgbnVsbFxuXG5jbGFzcyBUYWxvc1xuICBjb25zdHJ1Y3RvcjogKHsgQHN0YXRlLCBAY29udGV4dCwgQGVycm9yIH0pIC0+XG5cbiAgTWV0YS5taXhpbiBAOjosIFtcbiAgICBNZXRhLmdldHRlcnNcbiAgICAgIHN0YXJ0aW5nOiAtPiBhdFN0YXJ0IEBzdGF0ZVxuICAgICAgaGFsdGVkOiAtPiBhdEhhbHQgQHN0YXRlXG4gICAgICBwYXVzZWQ6IC0+IGF0UGF1c2UgQHN0YXRlXG4gICAgICBzdWNjZXNzOiAtPiBAaGFsdGVkICYmICFAZXJyb3I/XG4gICAgICBmYWlsdXJlOiAtPiBAaGFsdGVkICYmIEBlcnJvcj9cbiAgICAgIHJ1bm5pbmc6IC0+ICFAaGFsdGVkICYmICFAcGF1c2VkXG4gIF1cblxuICBAbWFrZTogbWFrZVxuICBAaXNUeXBlOiBUeXBlLmlzVHlwZSBAXG5cbiAgaGFsdDogLT5cbiAgICBAc3RhdGUgPSAkaGFsdFxuXG4gIHRocm93OiAoIGVycm9yICkgLT5cbiAgICBAaGFsdCgpXG4gICAgQGVycm9yID0gZXJyb3IgPyBUYWxvc0Vycm9yLm1ha2UoKVxuXG4gIHJlc2V0OiAoIHN0YXRlICkgLT5cbiAgICBAc3RhdGUgPSBzdGF0ZSA/ICRzdGFydFxuICAgIEBjb250ZXh0ID0ge31cbiAgICBAZXJyb3IgPSBudWxsXG5cbiAgY2xvbmU6IC0+XG4gICAgY29udGV4dCA9IFZhbHVlLmNsb25lIEBjb250ZXh0XG4gICAgbmV3IFRhbG9zIHsgQHN0YXRlLCBjb250ZXh0LCBAZXJyb3IgfVxuICAgICAgXG5cbmV4cG9ydCB7XG4gIFRhbG9zXG59IixudWxsXSwibmFtZXMiOlsiVGFsb3MiLCJpc0Vycm9yIiwiaXNTdGF0ZSIsIm1ha2UiLCJvbmVPZiIsIlR5cGUiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJUYWxvc0Vycm9yIiwiaXNUeXBlIiwiZ2VuZXJpYyIsIm5hbWUiLCJkZWZhdWx0IiwiYXJncyIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImlzT2JqZWN0Iiwic3RhdGUiLCJjb250ZXh0IiwiZXJyb3IiLCIkc3RhcnQiLCJjb25zdHJ1Y3RvciIsInN0YXRlMSIsImNvbnRleHQxIiwiZXJyb3IxIiwiaGFsdCIsIiRoYWx0IiwidGhyb3ciLCJyZXNldCIsImNsb25lIiwiVmFsdWUiLCJNZXRhIiwibWl4aW4iLCJwcm90b3R5cGUiLCJnZXR0ZXJzIiwic3RhcnRpbmciLCJhdFN0YXJ0IiwiaGFsdGVkIiwiYXRIYWx0IiwicGF1c2VkIiwiYXRQYXVzZSIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwicnVubmluZyJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF5RUVBOzs7ZUFBQUE7OzttRUF6RUY7OERBQ0E7K0RBQ0E7d0JBQ0E7eUJBQ0E7eUJBQ0E7d0JBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFOQSxJQUFBQSxPQUFBQyxTQUFBQyxTQUFBQztBQVNBRCxVQUFVRSxJQUFBQSxjQUFBLEVBQU07SUFDZEMsTUFBS0MsUUFEUztJQUVkRCxNQUFLRSxRQUZTO0NBQU47QUFLVk4sVUFBVUcsSUFBQUEsY0FBQSxFQUFNO0lBQ2RDLE1BQUtHLFdBRFM7SUFFZEMsa0JBQVUsQ0FBQ0MsTUFGRztDQUFOO0FBS1ZQLE9BQU9RLElBQUFBLGdCQUFBLEVBQ0w7SUFBQUMsTUFBTTtJQUNOQyxTQUFTLFNBQUEsR0FBRUMsSUFBRjtRQUNQLE1BQU0sSUFBSUMsTUFBTSxDQUFBLCtCQUFBLEVBQWtDQyxLQUFLQyxTQUFMLENBQWVILE1BQWpELENBQVY7SUFEQztBQURUO0FBSUZILElBQUFBLGdCQUFBLEVBQVFSLE1BQU1ELFNBQVNHLE1BQUthLFFBQTVCLEVBQXNDakIsU0FBUyxTQUFFa0IsS0FBRixFQUFTQyxPQUFULEVBQWtCQyxLQUFsQjtXQUM3QyxJQUFJckIsTUFBTTtRQUFFbUI7UUFBT0M7UUFBU0M7SUFBbEI7QUFEbUM7QUFHL0NWLElBQUFBLGdCQUFBLEVBQVFSLE1BQU07V0FDWkEsS0FBS21CLGNBQUwsRUFBYSxDQUFBLEdBQUk7QUFETDtBQUdkWCxJQUFBQSxnQkFBQSxFQUFRUixNQUFNRCxTQUFTRyxNQUFLYSxRQUE1QixFQUFzQyxTQUFFQyxLQUFGLEVBQVNDLE9BQVQ7V0FDcENqQixLQUFLZ0IsT0FBT0MsU0FBUztBQURlO0FBR3RDVCxJQUFBQSxnQkFBQSxFQUFRUixNQUFNRCxTQUFTLFNBQUVpQixLQUFGO1dBQ3JCaEIsS0FBS2dCLE9BQU8sQ0FBQSxHQUFJO0FBREs7QUFHdkJSLElBQUFBLGdCQUFBLEVBQVFSLE1BQU1FLE1BQUthLFFBQW5CLEVBQTZCLFNBQUVFLE9BQUY7V0FDM0JqQixLQUFLbUIsY0FBTCxFQUFhRixTQUFTO0FBREs7QUFHdkJwQixRQUFBLENBQUE7SUFBTixNQUFBQTtRQUNFdUIsWUFBYyxFQUFHSixPQUFBSyxNQUFILEVBQVdKLFNBQUFLLFFBQVgsRUFBcUJKLE9BQUFLLE1BQUEsRUFBdEIsQ0FBQTtZQUFHLElBQUMsQ0FBQVAsS0FBQSxHQUFBSztZQUFPLElBQUMsQ0FBQUosT0FBQSxHQUFBSztZQUFTLElBQUMsQ0FBQUosS0FBQSxHQUFBSztRQUF0QjtRQWViQyxPQUFNO21CQUNKLElBQUMsQ0FBQVIsS0FBRCxHQUFTUyxhQUFBO1FBREw7UUFHTkMsTUFBU1IsS0FBRixFQUFBO1lBQ0wsSUFBQyxDQUFBTSxJQUFEO21CQUNBLElBQUMsQ0FBQU4sS0FBRCxHQUFBQSxTQUFBLE9BQVNBLFFBQVFaLGtCQUFVLENBQUNOLElBQVg7UUFGWjtRQUlQMkIsTUFBU1gsS0FBRixFQUFBO1lBQ0wsSUFBQyxDQUFBQSxLQUFELEdBQUFBLFNBQUEsT0FBU0EsUUFBUUcsY0FBQTtZQUNqQixJQUFDLENBQUFGLE9BQUQsR0FBVyxDQUFBO21CQUNYLElBQUMsQ0FBQUMsS0FBRCxHQUFTO1FBSEo7UUFLUFUsUUFBTztZQUNULElBQUFYO1lBQUlBLFVBQVVZLE9BQU1ELEtBQU4sQ0FBWSxJQUFDLENBQUFYLE9BQWI7bUJBQ1YsSUFBSXBCLE1BQU07Z0JBQUdtQixPQUFELElBQUMsQ0FBQUEsS0FBSDtnQkFBVUM7Z0JBQVVDLE9BQUQsSUFBQyxDQUFBQSxLQUFwQjtZQUFBO1FBRkw7SUE1QlQ7O0lBR0VZLFdBQUtDLEtBQUwsQ0FBV2xDLE1BQUNtQyxTQUFaLEVBQWdCO1FBQ2RGLFdBQUtHLE9BQUwsQ0FDRTtZQUFBQyxVQUFVO3VCQUFHQyxJQUFBQSxlQUFBLEVBQVEsSUFBQyxDQUFBbkIsS0FBVDtZQUFIO1lBQ1ZvQixRQUFRO3VCQUFHQyxJQUFBQSxjQUFBLEVBQU8sSUFBQyxDQUFBckIsS0FBUjtZQUFIO1lBQ1JzQixRQUFRO3VCQUFHQyxJQUFBQSxlQUFBLEVBQVEsSUFBQyxDQUFBdkIsS0FBVDtZQUFIO1lBQ1J3QixTQUFTO3VCQUFHLElBQUMsQ0FBQUosTUFBRCxJQUFZLElBQUEsQ0FBQWxCLEtBQUEsSUFBQTtZQUFmO1lBQ1R1QixTQUFTO3VCQUFHLElBQUMsQ0FBQUwsTUFBRCxJQUFXLElBQUEsQ0FBQWxCLEtBQUEsSUFBQTtZQUFkO1lBQ1R3QixTQUFTO3VCQUFHLENBQUMsSUFBQyxDQUFBTixNQUFGLElBQVksQ0FBQyxJQUFDLENBQUFFLE1BQUE7WUFBakI7UUFMVDtLQUZKO0lBVUF6QyxNQUFDRyxJQUFELEdBQU9BO0lBQ1BILE1BQUNVLE1BQUQsR0FBU0wsTUFBS0ssTUFBTCxDQUFZViJ9