"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "basic", {
    enumerable: true,
    get: function() {
        return test;
    }
});
const _src = require("../../src");
const _async = require("../../src/async");
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _helpers = /*#__PURE__*/ _interop_require_wildcard(require("../helpers"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var add, grow, test;
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = _src.Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = _src.Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        _helpers.test("start", _helpers.target("async", function() {
            var cycle;
            cycle = (0, _async.start)(A);
            return _helpers.assert(_type.isAsyncIterator(cycle));
        })),
        _helpers.test("run while waiting on events", _helpers.target("async", async function() {
            var cycle, events, ref, talos;
            events = [
                new Promise(function(resolve, reject) {
                    return resolve(1);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(2);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(3);
                })
            ];
            cycle = (0, _async.start)(A, {
                sum: 0
            }, events);
            talos = await (0, _async.run)(cycle);
            return _helpers.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        _helpers.test("auto-run without events", _helpers.target("async", async function() {
            var cycle, ref, talos;
            cycle = (0, _async.start)(B, {
                product: 1
            });
            talos = await (0, _async.run)(cycle);
            return _helpers.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        _helpers.test("build", _helpers.target("async", async function() {
            var f, ref, talos;
            f = (0, _async.build)(B);
            _helpers.assert(_type.isFunction(f));
            talos = await f({
                product: 1
            });
            return _helpers.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        _helpers.test("flow", _helpers.target("async", async function() {
            var a, b, c, context, f;
            a = async function(talos, context) {
                return context.sum = await 1;
            };
            b = async function(talos, context) {
                return context.sum += await 2;
            };
            c = async function(talos, context) {
                return context.sum += await 3;
            };
            f = (0, _async.flow)([
                a,
                b,
                c
            ]);
            _helpers.assert(_type.isFunction(f));
            context = await f({});
            return _helpers.assert.equal(6, context != null ? context.sum : void 0);
        })),
        _helpers.test("flowWith", _helpers.target("async", async function() {
            var a, b, c, context, f, log;
            a = async function(talos, context) {
                return context.sum = await 1;
            };
            b = async function(talos, context) {
                return context.sum += await 2;
            };
            c = async function(talos, context) {
                return context.sum += await 3;
            };
            log = async function(talos) {
                var base;
                if ((base = talos.context).product == null) {
                    base.product = 1;
                }
                return talos.context.product *= await talos.context.sum;
            };
            // console.log talos.context.product
            f = (0, _async.flowWith)(log, [
                a,
                b,
                c
            ]);
            _helpers.assert(_type.isFunction(f));
            context = await f({});
            _helpers.assert.equal(6, context != null ? context.sum : void 0);
            return _helpers.assert.equal(18, context != null ? context.product : void 0);
        }))
    ];
};
 //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=/@dashkite/talos/test/async/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9hc3luYy9iYXNpYy5jb2ZmZWUiLCI8YW5vbj4iXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0IHsgc3RhcnQsIHJ1biwgYnVpbGQsIGZsb3csIGZsb3dXaXRoIH0gZnJvbSBcIi4uLy4uL3NyYy9hc3luY1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbmFkZCA9ICggdGFsb3MsIGV2ZW50ICkgLT5cbiAgdGFsb3MuY29udGV4dC5zdW0gKz0gZXZlbnRcbmdyb3cgPSAoIHRhbG9zICkgLT5cbiAgdGFsb3MuY29udGV4dC5wcm9kdWN0ICo9IDJcblxuXG50ZXN0ID0gLT5cbiAgQSA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgY3ljbGUgPSBzdGFydCBBXG4gICAgICBoLmFzc2VydCBUeXBlLmlzQXN5bmNJdGVyYXRvciBjeWNsZVxuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIHdhaXRpbmcgb24gZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAxXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAyXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAzXG4gICAgICBdXG4gICAgICBjeWNsZSA9IHN0YXJ0IEEsIHN1bTogMCwgZXZlbnRzXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBjeWNsZVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJhdXRvLXJ1biB3aXRob3V0IGV2ZW50c1wiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBjeWNsZSA9IHN0YXJ0IEIsIHByb2R1Y3Q6IDFcbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIGN5Y2xlXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJidWlsZFwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBmID0gYnVpbGQgQlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIHRhbG9zID0gYXdhaXQgZiBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJmbG93XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGEgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gPSBhd2FpdCAxXG4gICAgICBiID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtICs9IGF3YWl0IDJcbiAgICAgIGMgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgZiA9IGZsb3cgWyBhLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gYXdhaXQgZiB7fVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJmbG93V2l0aFwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSArPSBhd2FpdCAyXG4gICAgICBjID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtICs9IGF3YWl0IDMgXG4gICAgICBsb2cgPSAoIHRhbG9zICkgLT5cbiAgICAgICAgdGFsb3MuY29udGV4dC5wcm9kdWN0ID89IDEgXG4gICAgICAgIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSBhd2FpdCB0YWxvcy5jb250ZXh0LnN1bVxuICAgICAgICAjIGNvbnNvbGUubG9nIHRhbG9zLmNvbnRleHQucHJvZHVjdFxuXG4gICAgICBmID0gZmxvd1dpdGggbG9nLCBbIGEsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBhd2FpdCBmIHt9XG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCBjb250ZXh0Py5zdW1cbiAgICAgIGguYXNzZXJ0LmVxdWFsIDE4LCBjb250ZXh0Py5wcm9kdWN0XG5cbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iLG51bGxdLCJuYW1lcyI6WyJiYXNpYyIsInRlc3QiLCJhZGQiLCJncm93IiwidGFsb3MiLCJldmVudCIsImNvbnRleHQiLCJzdW0iLCJwcm9kdWN0IiwiQSIsIkIiLCJNYWNoaW5lIiwibWFrZSIsInN0YXJ0IiwiaG9sZCIsInJ1biIsImZpcnN0Iiwic2Vjb25kIiwiZW5kIiwiaCIsInRhcmdldCIsImN5Y2xlIiwiYXNzZXJ0IiwiVHlwZSIsImlzQXN5bmNJdGVyYXRvciIsImV2ZW50cyIsInJlZiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXF1YWwiLCJmIiwiYnVpbGQiLCJpc0Z1bmN0aW9uIiwiYSIsImIiLCJjIiwiZmxvdyIsImxvZyIsImJhc2UiLCJmbG93V2l0aCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFxRlNBOzs7ZUFBQUM7OztxQkFyRlQ7dUJBQ0E7OERBQ0E7aUVBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFIQSxJQUFBQyxLQUFBQyxNQUFBRjtBQUtBQyxNQUFNLFNBQUVFLEtBQUYsRUFBU0MsS0FBVDtXQUNKRCxNQUFNRSxPQUFPLENBQUNDLEdBQWQsSUFBcUJGO0FBRGpCO0FBRU5GLE9BQU8sU0FBRUMsS0FBRjtXQUNMQSxNQUFNRSxPQUFPLENBQUNFLE9BQWQsSUFBeUI7QUFEcEI7QUFJUFAsT0FBTztJQUNQLElBQUFRLEdBQUFDO0lBQUVELElBQUlFLFlBQU8sQ0FBQ0MsSUFBUixDQUNGO1FBQUFDLE9BQ0U7WUFBQUMsTUFDRTtnQkFBQUMsS0FBS2I7WUFBTDtRQURGO1FBRUZZLE1BQ0U7WUFBQUEsTUFDRTtnQkFBQUMsS0FBS2I7WUFBTDtRQURGO0lBSkY7SUFPRlEsSUFBSUMsWUFBTyxDQUFDQyxJQUFSLENBQ0Y7UUFBQUMsT0FDRTtZQUFBRyxPQUNFO2dCQUFBRCxLQUFLWjtZQUFMO1FBREY7UUFFRmEsT0FDRTtZQUFBQyxRQUNFO2dCQUFBRixLQUFLWjtZQUFMO1FBREY7UUFFRmMsUUFDRTtZQUFBQyxLQUNFO2dCQUFBSCxLQUFLWjtZQUFMO1FBREY7SUFQRjtXQVdGO1FBQ0VnQixTQUFFbEIsSUFBRixDQUFPLFNBQVNrQixTQUFFQyxNQUFGLENBQVMsU0FBUztZQUN0QyxJQUFBQztZQUFNQSxRQUFRUixJQUFBQSxZQUFBLEVBQU1KO21CQUNkVSxTQUFFRyxNQUFGLENBQVNDLE1BQUtDLGVBQUwsQ0FBcUJIO1FBRkU7UUFJbENGLFNBQUVsQixJQUFGLENBQU8sK0JBQStCa0IsU0FB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