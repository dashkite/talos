var add, grow, test;
import { Machine, Talos, $start, $end, start, run, flow } from "../../src/async";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = async function(talos) {
    return talos.context.product *= await 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        graph: {
            start: {
                hold: {
                    run: add
                }
            },
            hold: {
                hold: {
                    run: add
                }
            }
        }
    });
    B = Machine.make({
        graph: {
            start: {
                first: {
                    run: grow
                }
            },
            first: {
                second: {
                    run: grow
                }
            },
            second: {
                end: {
                    run: grow
                }
            }
        }
    });
    return [
        h.test("start", h.target("async", function() {
            return h.assert(Type.isReactor(start(A)));
        })),
        h.test("run while consuming events", h.target("async", async function() {
            var events, ref, talos;
            events = [
                new Promise(function(resolve, reject) {
                    return resolve(1);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(2);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(3);
                })
            ];
            talos = await run(A, {
                sum: 0
            }, events);
            return h.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        h.test("run without events and reconsume context", h.target("async", async function() {
            var ref, talos;
            talos = await run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("flow functional composition", h.target("async", async function() {
            var a, b, b2, c, context, error, f, g;
            a = async function(talos) {
                return talos.context.sum = await 1;
            };
            b = async function(talos) {
                return talos.context.sum += await 2;
            };
            b2 = async function() {
                await null;
                throw new Error("b2");
            };
            c = async function(talos) {
                return talos.context.sum += await 3;
            };
            f = flow([
                a,
                b,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = await f();
            h.assert.equal(8, context != null ? context.sum : void 0);
            g = flow([
                a,
                b,
                b2,
                c
            ]);
            try {
                await g();
                throw new Error("did not throw");
            } catch (error1) {
                error = error1;
                return h.assert(error.message === "b2");
            }
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9hc3luYy9iYXNpYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0VBQWtCLEtBQWxCO0VBQXlCLE1BQXpCO0VBQWlDLElBQWpDO0VBQ0UsS0FERjtFQUNTLEdBRFQ7RUFDYyxJQURkO0NBQUEsTUFBQTs7QUFFQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxLQUFQLE1BQUE7O0FBRUEsR0FBQSxHQUFNLFFBQUEsQ0FBRSxLQUFGLEVBQVMsS0FBVCxDQUFBO1NBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFkLElBQXFCO0FBRGpCOztBQUVOLElBQUEsR0FBTyxNQUFBLFFBQUEsQ0FBRSxLQUFGLENBQUE7U0FDTCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQWQsSUFBeUIsQ0FBQSxNQUFNLENBQU47QUFEcEI7O0FBSVAsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxDQUFBLEVBQUE7RUFBRSxDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FBYTtJQUFBLEtBQUEsRUFDZjtNQUFBLEtBQUEsRUFDRTtRQUFBLElBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FERjtNQUdBLElBQUEsRUFDRTtRQUFBLElBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREY7SUFKRjtFQURlLENBQWI7RUFRSixDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FBYTtJQUFBLEtBQUEsRUFDZjtNQUFBLEtBQUEsRUFDRTtRQUFBLEtBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FERjtNQUdBLEtBQUEsRUFDRTtRQUFBLE1BQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FKRjtNQU1BLE1BQUEsRUFDRTtRQUFBLEdBQUEsRUFDRTtVQUFB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QWtCLE9BQU8sQ0FBRSxZQUEzQjtNQUVBLENBQUEsR0FBSSxJQUFBLENBQUssQ0FBRSxDQUFGO0lBQUssQ0FBTDtJQUFRLEVBQVI7SUFBWSxDQUFaLENBQUw7QUFDSjtRQUNFLE1BQU0sQ0FBQSxDQUFBO1FBQ04sTUFBTSxJQUFJLEtBQUosQ0FBVSxlQUFWLEVBRlI7T0FHQSxjQUFBO1FBQU07ZUFDSixDQUFDLENBQUMsTUFBRixDQUFTLEtBQUssQ0FBQyxPQUFOLEtBQWlCLElBQTFCLEVBREY7O0lBZnNELENBQWxCLENBQXRDLENBakJGOztBQXJCSzs7QUEwRFAsT0FBQTtFQUFTLElBQUEsU0FBVCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsIFRhbG9zLCAkc3RhcnQsICRlbmQsXG4gIHN0YXJ0LCBydW4sIGZsb3cgfSBmcm9tIFwiLi4vLi4vc3JjL2FzeW5jXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuYWRkID0gKCB0YWxvcywgZXZlbnQgKSAtPlxuICB0YWxvcy5jb250ZXh0LnN1bSArPSBldmVudFxuZ3JvdyA9ICggdGFsb3MgKSAtPlxuICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gYXdhaXQgMlxuXG5cbnRlc3QgPSAtPlxuICBBID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZSBncmFwaDpcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNSZWFjdG9yIHN0YXJ0IEFcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAxXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAyXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAzXG4gICAgICBdXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImZsb3cgZnVuY3Rpb25hbCBjb21wb3NpdGlvblwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSBhd2FpdCAyXG4gICAgICBiMiA9IC0+IGF3YWl0IG51bGw7IHRocm93IG5ldyBFcnJvciBcImIyXCJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgZiA9IGZsb3cgWyBhLCBiLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gYXdhaXQgZigpXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCBjb250ZXh0Py5zdW1cblxuICAgICAgZyA9IGZsb3cgWyBhLCBiLCBiMiwgYyBdXG4gICAgICB0cnlcbiAgICAgICAgYXdhaXQgZygpXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcImRpZCBub3QgdGhyb3dcIlxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgaC5hc3NlcnQgZXJyb3IubWVzc2FnZSA9PSBcImIyXCJcblxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSJdfQ==
 //# sourceURL=test/async/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYXN5bmMvYmFzaWMuY29mZmVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsIFRhbG9zLCAkc3RhcnQsICRlbmQsXG4gIHN0YXJ0LCBydW4sIGZsb3cgfSBmcm9tIFwiLi4vLi4vc3JjL2FzeW5jXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuYWRkID0gKCB0YWxvcywgZXZlbnQgKSAtPlxuICB0YWxvcy5jb250ZXh0LnN1bSArPSBldmVudFxuZ3JvdyA9ICggdGFsb3MgKSAtPlxuICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gYXdhaXQgMlxuXG5cbnRlc3QgPSAtPlxuICBBID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZSBncmFwaDpcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNSZWFjdG9yIHN0YXJ0IEFcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAxXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAyXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAzXG4gICAgICBdXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImZsb3cgZnVuY3Rpb25hbCBjb21wb3NpdGlvblwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSBhd2FpdCAyXG4gICAgICBiMiA9IC0+IGF3YWl0IG51bGw7IHRocm93IG5ldyBFcnJvciBcImIyXCJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgZiA9IGZsb3cgWyBhLCBiLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gYXdhaXQgZigpXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCBjb250ZXh0Py5zdW1cblxuICAgICAgZyA9IGZsb3cgWyBhLCBiLCBiMiwgYyBdXG4gICAgICB0cnlcbiAgICAgICAgYXdhaXQgZygpXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcImRpZCBub3QgdGhyb3dcIlxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgaC5hc3NlcnQgZXJyb3IubWVzc2FnZSA9PSBcImIyXCJcblxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSJdLCJuYW1lcyI6WyJhZGQiLCJncm93IiwidGVzdCIsIk1hY2hpbmUiLCJUYWxvcyIsIiRzdGFydCIsIiRlbmQiLCJzdGFydCIsInJ1biIsImZsb3ciLCJUeXBlIiwiaCIsInRhbG9zIiwiZXZlbnQiLCJjb250ZXh0Iiwic3VtIiwicHJvZHVjdCIsIkEiLCJCIiwibWFrZSIsImdyYXBoIiwiaG9sZCIsImZpcnN0Iiwic2Vjb25kIiwiZW5kIiwidGFyZ2V0IiwiYXNzZXJ0IiwiaXNSZWFjdG9yIiwiZXZlbnRzIiwicmVmIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcXVhbCIsImEiLCJiIiwiYjIiLCJjIiwiZXJyb3IiLCJmIiwiZyIsIkVycm9yIiwiaXNGdW5jdGlvbiIsImVycm9yMSIsIm1lc3NhZ2UiLCJiYXNpYyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUEsS0FBQUMsTUFBQUM7QUFBQSxTQUFTQyxPQUFULEVBQWtCQyxLQUFsQixFQUF5QkMsTUFBekIsRUFBaUNDLElBQWpDLEVBQ0VDLEtBREYsRUFDU0MsR0FEVCxFQUNjQyxJQURkLFFBQUEsa0JBQUE7QUFFQSxZQUFPQyxVQUFQLHFCQUFBO0FBQ0EsWUFBT0MsT0FBUCxhQUFBO0FBRUFYLE1BQU0sU0FBRVksS0FBRixFQUFTQyxLQUFUO1dBQ0pELE1BQU1FLE9BQU8sQ0FBQ0MsR0FBZCxJQUFxQkY7QUFEakI7QUFFTlosT0FBTyxlQUFFVyxLQUFGO1dBQ0xBLE1BQU1FLE9BQU8sQ0FBQ0UsT0FBZCxJQUF5QixNQUFNO0FBRDFCO0FBSVBkLE9BQU87SUFDUCxJQUFBZSxHQUFBQztJQUFFRCxJQUFJZCxRQUFRZ0IsSUFBUixDQUFhO1FBQUFDLE9BQ2Y7WUFBQWIsT0FDRTtnQkFBQWMsTUFDRTtvQkFBQWIsS0FBS1I7Z0JBQUw7WUFERjtZQUVGcUIsTUFDRTtnQkFBQUEsTUFDRTtvQkFBQWIsS0FBS1I7Z0JB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