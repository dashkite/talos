var _flow, debug, finished, flow;
import * as Fn from "@dashkite/joy/function";
import * as Type from "@dashkite/joy/type";
import { generic } from "@dashkite/joy/generic";
import { Graph, Talos, Drive } from "../containers";
import * as Async from "../strict/async";
import * as h from "./helpers";
flow = generic({
    name: "talos flow",
    default: function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        throw new Error(`flow: input is malformed ${JSON.stringify(args)}`);
    }
});
generic(flow, h.isFunctionArray, function(fx) {
    return _flow({}, fx);
});
generic(flow, Type.isObject, h.isFunctionArray, function(options, fx) {
    return _flow(options, fx);
});
_flow = function(options, fx) {
    var drive, f, graph, step, talos;
    if (fx.length === 0) {
        if (options.debug === true) {
            console.log("[ flow ] empty function list, mapping to no-op");
        }
        return async function(x) {
            await Promise.resolve();
            return x;
        };
    }
    f = fx[0];
    graph = Graph.make(h.expand(fx));
    talos = Talos.make();
    step = options.debug === true ? debug : Async.step;
    drive = Drive.make(graph, talos, step);
    return Fn.arity(f.length, async function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        await drive.update(...args);
        while(true){
            h.check(talos);
            if (talos.halted) {
                return talos.context;
            }
            await drive.update();
        }
    });
};
finished = h.finished("flow");
debug = async function(graph, talos) {
    for(var _len = arguments.length, transforms = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        transforms[_key - 2] = arguments[_key];
    }
    var edge, name, vertex;
    vertex = Async.matchVertex(graph, talos);
    name = h.nameVertex(vertex);
    if (finished(talos)) {
        return talos;
    }
    edge = await Async.matchEdge(vertex, talos, transforms);
    if (finished(talos)) {
        return talos;
    }
    console.log(`[ flow ] starting step ${name}`, talos.context);
    if (transforms.length > 0) {
        console.log("arguments", ...transforms);
    }
    await Async.run(edge, talos, transforms);
    if (finished(talos)) {
        return talos;
    }
    console.log(`[ flow ] finished step ${name}`);
    await Async.move(edge, talos, transforms);
    if (finished(talos)) {
        return talos;
    }
    return talos;
};
export { flow }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL2xpbmVhci9mbG93LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBOztBQUFBLE9BQU8sQ0FBQSxNQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFBO0VBQVMsT0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLEtBQVQ7RUFBZ0IsS0FBaEI7RUFBdUIsS0FBdkI7Q0FBQSxNQUFBOztBQUNBLE9BQU8sQ0FBQSxTQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFHQSxJQUFBLEdBQU8sT0FBQSxDQUNMO0VBQUEsSUFBQSxFQUFNLFlBQU47RUFDQSxPQUFBLEVBQVMsUUFBQSxDQUFBLEdBQUUsSUFBRixDQUFBO0lBQ1AsTUFBTSxJQUFJLEtBQUosQ0FBVSxDQUFBLHlCQUFBLENBQUEsQ0FBNEIsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFmLENBQTVCLENBQUEsQ0FBVjtFQURDO0FBRFQsQ0FESzs7QUFLUCxPQUFBLENBQVEsSUFBUixFQUFjLENBQUMsQ0FBQyxlQUFoQixFQUFpQyxRQUFBLENBQUUsRUFBRixDQUFBO1NBQy9CLEtBQUEsQ0FBTSxDQUFBLENBQU4sRUFBVSxFQUFWO0FBRCtCLENBQWpDOztBQUdBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsSUFBSSxDQUFDLFFBQW5CLEVBQTZCLENBQUMsQ0FBQyxlQUEvQixFQUFnRCxRQUFBLENBQUUsT0FBRixFQUFXLEVBQVgsQ0FBQTtTQUM5QyxLQUFBLENBQU0sT0FBTixFQUFlLEVBQWY7QUFEOEMsQ0FBaEQ7O0FBR0EsS0FBQSxHQUFRLFFBQUEsQ0FBRSxPQUFGLEVBQVcsRUFBWCxDQUFBO0FBQ1IsTUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUE7RUFBRSxJQUFHLEVBQUUsQ0FBQyxNQUFILEtBQWEsQ0FBaEI7SUFDRSxJQUFHLE9BQU8sQ0FBQyxLQUFSLEtBQWlCLElBQXBCO01BQ0UsT0FBTyxDQUFDLEdBQVIsQ0FBWSxnREFBWixFQURGOztBQUVBLFdBQU8sTUFBQSxRQUFBLENBQUUsQ0FBRixDQUFBO01BQVMsTUFBTSxPQUFPLENBQUMsT0FBUixDQUFBO2FBQW9CO0lBQW5DLEVBSFQ7O0VBS0EsQ0FBQSxHQUFJLEVBQUUsQ0FBRSxDQUFGO0VBQ04sS0FBQSxHQUFRLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxFQUFULENBQVg7RUFDUixLQUFBLEdBQVEsS0FBSyxDQUFDLElBQU4sQ0FBQTtFQUNSLElBQUEsR0FBVSxPQUFPLENBQUMsS0FBUixLQUFpQixJQUFwQixHQUE4QixLQUE5QixHQUF5QyxLQUFLLENBQUM7RUFDdEQsS0FBQSxHQUFRLEtBQUssQ0FBQyxJQUFOLENBQVcsS0FBWCxFQUFrQixLQUFsQixFQUF5QixJQUF6QjtTQUVSLEVBQUUsQ0FBQyxLQUFILENBQVMsQ0FBQyxDQUFDLE1BQVgsRUFBbUIsTUFBQSxRQUFBLENBQUEsR0FBRSxJQUFGLENBQUE7SUFDakIsTUFBTSxLQUFLLENBQUMsTUFBTixDQUFhLEdBQUEsSUFBYjtBQUNOLFdBQUEsSUFBQTtNQUNFLENBQUMsQ0FBQyxLQUFGLENBQVEsS0FBUjtNQUNBLElBQXdCLEtBQUssQ0FBQyxNQUE5QjtBQUFBLGVBQU8sS0FBSyxDQUFDLFFBQWI7O01BQ0EsTUFBTSxLQUFLLENBQUMsTUFBTixDQUFBO0lBSFI7RUFGaUIsQ0FBbkI7QUFaTTs7QUFvQlIsUUFBQSxHQUFXLENBQUMsQ0FBQyxRQUFGLENBQVcsTUFBWDs7QUFFWCxLQUFBLEdBQVEsTUFBQSxRQUFBLENBQUUsS0FBRixFQUFTLEtBQVQsRUFBQSxHQUFnQixVQUFoQixDQUFBO0FBQ1IsTUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBO0VBQUUsTUFBQSxHQUFTLEtBQUssQ0FBQyxXQUFOLENBQWtCLEtBQWxCLEVBQXlCLEtBQXpCO0VBQ1QsSUFBQSxHQUFPLENBQUMsQ0FBQyxVQUFGLENBQWEsTUFBYjtFQUNQLElBQWdCLFFBQUEsQ0FBUyxLQUFULENBQWhCO0FBQUEsV0FBTyxNQUFQOztFQUVBLElBQUEsR0FBTyxDQUFBLE1BQU0sS0FBSyxDQUFDLFNBQU4sQ0FBZ0IsTUFBaEIsRUFBd0IsS0FBeEIsRUFBK0IsVUFBL0IsQ0FBTjtFQUNQLElBQWdCLFFBQUEsQ0FBUyxLQUFULENBQWhCO0FBQUEsV0FBTyxNQUFQOztFQUVBLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQSx1QkFBQSxDQUFBLENBQTJCLElBQTNCLENBQUEsQ0FBWixFQUFnRCxLQUFLLENBQUMsT0FBdEQ7RUFDQSxJQUFHLFVBQVUsQ0FBQyxNQUFYLEdBQW9CLENBQXZCO0lBQ0UsT0FBTyxDQUFDLEdBQVIsQ0FBWSxXQUFaLEVBQXlCLEdBQUEsVUFBekIsRUFERjs7RUFFQSxNQUFNLEtBQUssQ0FBQyxHQUFOLENBQVUsSUFBVixFQUFnQixLQUFoQixFQUF1QixVQUF2QjtFQUNOLElBQWdCLFFBQUEsQ0FBUyxLQUFULENBQWhCO0FBQUEsV0FBTyxNQUFQOztFQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQSx1QkFBQSxDQUFBLENBQTJCLElBQTNCLENBQUEsQ0FBWjtFQUVBLE1BQU0sS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFYLEVBQWlCLEtBQWpCLEVBQXdCLFVBQXhCO0VBQ04sSUFBZ0IsUUFBQSxDQUFTLEtBQVQsQ0FBaEI7QUFBQSxXQUFPLE1BQVA7O1NBQ0E7QUFqQk07O0FBcUJSLE9BQUE7RUFDRSxJQURGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRm4gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZnVuY3Rpb25cIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcbmltcG9ydCB7IEdyYXBoLCBUYWxvcywgRHJpdmUgfSBmcm9tIFwiLi4vY29udGFpbmVyc1wiXG5pbXBvcnQgKiBhcyBBc3luYyBmcm9tIFwiLi4vc3RyaWN0L2FzeW5jXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4vaGVscGVyc1wiXG5cblxuZmxvdyA9IGdlbmVyaWMgXG4gIG5hbWU6IFwidGFsb3MgZmxvd1wiXG4gIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgIHRocm93IG5ldyBFcnJvciBcImZsb3c6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuZ2VuZXJpYyBmbG93LCBoLmlzRnVuY3Rpb25BcnJheSwgKCBmeCApIC0+XG4gIF9mbG93IHt9LCBmeFxuXG5nZW5lcmljIGZsb3csIFR5cGUuaXNPYmplY3QsIGguaXNGdW5jdGlvbkFycmF5LCAoIG9wdGlvbnMsIGZ4ICkgLT5cbiAgX2Zsb3cgb3B0aW9ucywgZnhcblxuX2Zsb3cgPSAoIG9wdGlvbnMsIGZ4ICkgLT5cbiAgaWYgZngubGVuZ3RoID09IDBcbiAgICBpZiBvcHRpb25zLmRlYnVnID09IHRydWVcbiAgICAgIGNvbnNvbGUubG9nIFwiWyBmbG93IF0gZW1wdHkgZnVuY3Rpb24gbGlzdCwgbWFwcGluZyB0byBuby1vcFwiXG4gICAgcmV0dXJuICggeCApIC0+IGF3YWl0IFByb21pc2UucmVzb2x2ZSgpIDsgeFxuICBcbiAgZiA9IGZ4WyAwIF1cbiAgZ3JhcGggPSBHcmFwaC5tYWtlIGguZXhwYW5kIGZ4XG4gIHRhbG9zID0gVGFsb3MubWFrZSgpXG4gIHN0ZXAgPSBpZiBvcHRpb25zLmRlYnVnID09IHRydWUgdGhlbiBkZWJ1ZyBlbHNlIEFzeW5jLnN0ZXBcbiAgZHJpdmUgPSBEcml2ZS5tYWtlIGdyYXBoLCB0YWxvcywgc3RlcFxuXG4gIEZuLmFyaXR5IGYubGVuZ3RoLCAoIGFyZ3MuLi4gKSAtPlxuICAgIGF3YWl0IGRyaXZlLnVwZGF0ZSBhcmdzLi4uXG4gICAgbG9vcFxuICAgICAgaC5jaGVjayB0YWxvc1xuICAgICAgcmV0dXJuIHRhbG9zLmNvbnRleHQgaWYgdGFsb3MuaGFsdGVkXG4gICAgICBhd2FpdCBkcml2ZS51cGRhdGUoKVxuXG5cbmZpbmlzaGVkID0gaC5maW5pc2hlZCBcImZsb3dcIlxuXG5kZWJ1ZyA9ICggZ3JhcGgsIHRhbG9zLCB0cmFuc2Zvcm1zLi4uICkgLT5cbiAgdmVydGV4ID0gQXN5bmMubWF0Y2hWZXJ0ZXggZ3JhcGgsIHRhbG9zXG4gIG5hbWUgPSBoLm5hbWVWZXJ0ZXggdmVydGV4XG4gIHJldHVybiB0YWxvcyBpZiBmaW5pc2hlZCB0YWxvc1xuXG4gIGVkZ2UgPSBhd2FpdCBBc3luYy5tYXRjaEVkZ2UgdmVydGV4LCB0YWxvcywgdHJhbnNmb3Jtc1xuICByZXR1cm4gdGFsb3MgaWYgZmluaXNoZWQgdGFsb3NcblxuICBjb25zb2xlLmxvZyBcIlsgZmxvdyBdIHN0YXJ0aW5nIHN0ZXAgI3sgbmFtZSB9XCIsIHRhbG9zLmNvbnRleHRcbiAgaWYgdHJhbnNmb3Jtcy5sZW5ndGggPiAwXG4gICAgY29uc29sZS5sb2cgXCJhcmd1bWVudHNcIiwgdHJhbnNmb3Jtcy4uLlxuICBhd2FpdCBBc3luYy5ydW4gZWRnZSwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgcmV0dXJuIHRhbG9zIGlmIGZpbmlzaGVkIHRhbG9zXG4gIGNvbnNvbGUubG9nIFwiWyBmbG93IF0gZmluaXNoZWQgc3RlcCAjeyBuYW1lIH1cIlxuXG4gIGF3YWl0IEFzeW5jLm1vdmUgZWRnZSwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgcmV0dXJuIHRhbG9zIGlmIGZpbmlzaGVkIHRhbG9zXG4gIHRhbG9zXG5cblxuXG5leHBvcnQge1xuICBmbG93XG59Il19
 //# sourceURL=src/linear/flow.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saW5lYXIvZmxvdy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRm4gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZnVuY3Rpb25cIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcbmltcG9ydCB7IEdyYXBoLCBUYWxvcywgRHJpdmUgfSBmcm9tIFwiLi4vY29udGFpbmVyc1wiXG5pbXBvcnQgKiBhcyBBc3luYyBmcm9tIFwiLi4vc3RyaWN0L2FzeW5jXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4vaGVscGVyc1wiXG5cblxuZmxvdyA9IGdlbmVyaWMgXG4gIG5hbWU6IFwidGFsb3MgZmxvd1wiXG4gIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgIHRocm93IG5ldyBFcnJvciBcImZsb3c6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuZ2VuZXJpYyBmbG93LCBoLmlzRnVuY3Rpb25BcnJheSwgKCBmeCApIC0+XG4gIF9mbG93IHt9LCBmeFxuXG5nZW5lcmljIGZsb3csIFR5cGUuaXNPYmplY3QsIGguaXNGdW5jdGlvbkFycmF5LCAoIG9wdGlvbnMsIGZ4ICkgLT5cbiAgX2Zsb3cgb3B0aW9ucywgZnhcblxuX2Zsb3cgPSAoIG9wdGlvbnMsIGZ4ICkgLT5cbiAgaWYgZngubGVuZ3RoID09IDBcbiAgICBpZiBvcHRpb25zLmRlYnVnID09IHRydWVcbiAgICAgIGNvbnNvbGUubG9nIFwiWyBmbG93IF0gZW1wdHkgZnVuY3Rpb24gbGlzdCwgbWFwcGluZyB0byBuby1vcFwiXG4gICAgcmV0dXJuICggeCApIC0+IGF3YWl0IFByb21pc2UucmVzb2x2ZSgpIDsgeFxuICBcbiAgZiA9IGZ4WyAwIF1cbiAgZ3JhcGggPSBHcmFwaC5tYWtlIGguZXhwYW5kIGZ4XG4gIHRhbG9zID0gVGFsb3MubWFrZSgpXG4gIHN0ZXAgPSBpZiBvcHRpb25zLmRlYnVnID09IHRydWUgdGhlbiBkZWJ1ZyBlbHNlIEFzeW5jLnN0ZXBcbiAgZHJpdmUgPSBEcml2ZS5tYWtlIGdyYXBoLCB0YWxvcywgc3RlcFxuXG4gIEZuLmFyaXR5IGYubGVuZ3RoLCAoIGFyZ3MuLi4gKSAtPlxuICAgIGF3YWl0IGRyaXZlLnVwZGF0ZSBhcmdzLi4uXG4gICAgbG9vcFxuICAgICAgaC5jaGVjayB0YWxvc1xuICAgICAgcmV0dXJuIHRhbG9zLmNvbnRleHQgaWYgdGFsb3MuaGFsdGVkXG4gICAgICBhd2FpdCBkcml2ZS51cGRhdGUoKVxuXG5cbmZpbmlzaGVkID0gaC5maW5pc2hlZCBcImZsb3dcIlxuXG5kZWJ1ZyA9ICggZ3JhcGgsIHRhbG9zLCB0cmFuc2Zvcm1zLi4uICkgLT5cbiAgdmVydGV4ID0gQXN5bmMubWF0Y2hWZXJ0ZXggZ3JhcGgsIHRhbG9zXG4gIG5hbWUgPSBoLm5hbWVWZXJ0ZXggdmVydGV4XG4gIHJldHVybiB0YWxvcyBpZiBmaW5pc2hlZCB0YWxvc1xuXG4gIGVkZ2UgPSBhd2FpdCBBc3luYy5tYXRjaEVkZ2UgdmVydGV4LCB0YWxvcywgdHJhbnNmb3Jtc1xuICByZXR1cm4gdGFsb3MgaWYgZmluaXNoZWQgdGFsb3NcblxuICBjb25zb2xlLmxvZyBcIlsgZmxvdyBdIHN0YXJ0aW5nIHN0ZXAgI3sgbmFtZSB9XCIsIHRhbG9zLmNvbnRleHRcbiAgaWYgdHJhbnNmb3Jtcy5sZW5ndGggPiAwXG4gICAgY29uc29sZS5sb2cgXCJhcmd1bWVudHNcIiwgdHJhbnNmb3Jtcy4uLlxuICBhd2FpdCBBc3luYy5ydW4gZWRnZSwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgcmV0dXJuIHRhbG9zIGlmIGZpbmlzaGVkIHRhbG9zXG4gIGNvbnNvbGUubG9nIFwiWyBmbG93IF0gZmluaXNoZWQgc3RlcCAjeyBuYW1lIH1cIlxuXG4gIGF3YWl0IEFzeW5jLm1vdmUgZWRnZSwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgcmV0dXJuIHRhbG9zIGlmIGZpbmlzaGVkIHRhbG9zXG4gIHRhbG9zXG5cblxuXG5leHBvcnQge1xuICBmbG93XG59Il0sIm5hbWVzIjpbIl9mbG93IiwiZGVidWciLCJmaW5pc2hlZCIsImZsb3ciLCJGbiIsIlR5cGUiLCJnZW5lcmljIiwiR3JhcGgiLCJUYWxvcyIsIkRyaXZlIiwiQXN5bmMiLCJoIiwibmFtZSIsImRlZmF1bHQiLCJhcmdzIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNGdW5jdGlvbkFycmF5IiwiZngiLCJpc09iamVjdCIsIm9wdGlvbnMiLCJkcml2ZSIsImYiLCJncmFwaCIsInN0ZXAiLCJ0YWxvcyIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJ4IiwiUHJvbWlzZSIsInJlc29sdmUiLCJtYWtlIiwiZXhwYW5kIiwiYXJpdHkiLCJ1cGRhdGUiLCJjaGVjayIsImhhbHRlZCIsImNvbnRleHQiLCJ0cmFuc2Zvcm1zIiwiZWRnZSIsInZlcnRleCIsIm1hdGNoVmVydGV4IiwibmFtZVZlcnRleCIsIm1hdGNoRWRnZSIsInJ1biIsIm1vdmUiXSwibWFwcGluZ3MiOiJBQUFBLElBQUFBLE9BQUFDLE9BQUFDLFVBQUFDO0FBQUEsWUFBT0MsUUFBUCx5QkFBQTtBQUNBLFlBQU9DLFVBQVAscUJBQUE7QUFDQSxTQUFTQyxPQUFULFFBQUEsd0JBQUE7QUFDQSxTQUFTQyxLQUFULEVBQWdCQyxLQUFoQixFQUF1QkMsS0FBdkIsUUFBQSxnQkFBQTtBQUNBLFlBQU9DLFdBQVAsa0JBQUE7QUFDQSxZQUFPQyxPQUFQLFlBQUE7QUFHQVIsT0FBT0csUUFDTDtJQUFBTSxNQUFNO0lBQ05DLFNBQVM7UUFBQSxJQUFBLElBQUEsT0FBQSxVQUFBLFFBQUEsQUFBRUMsT0FBRixVQUFBLE9BQUEsT0FBQSxHQUFBLE9BQUEsTUFBQSxPQUFBO1lBQUVBLEtBQUYsUUFBQSxTQUFBLENBQUEsS0FBQTtRQUFFO1FBQ1QsTUFBTSxJQUFJQyxNQUFNLENBQUEseUJBQUEsRUFBNEJDLEtBQUtDLFNB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