var Drive, make;
import * as Meta from "@dashkite/joy/metaclass";
import * as Type from "@dashkite/joy/type";
import * as Value from "@dashkite/joy/value";
import { generic } from "@dashkite/joy/generic";
import { Graph } from "./graph";
import { Talos } from "./talos";
make = generic({
    name: "drive make",
    default: function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        throw new Error(`Drive.make: input is malformed ${JSON.stringify(args)}`);
    }
});
generic(make, Graph.isType, Talos.isType, Type.isFunction, function(graph, talos, step) {
    return new Drive({
        graph,
        talos,
        step
    });
});
Drive = (function() {
    class Drive {
        constructor({ graph: graph1, talos: talos1, step: step1 }){
            this.graph = graph1;
            this.talos = talos1;
            this.step = step1;
        }
        update() {
            for(var _len = arguments.length, transforms = new Array(_len), _key = 0; _key < _len; _key++){
                transforms[_key] = arguments[_key];
            }
            return this.step(this.graph, this.talos, ...transforms);
        }
    }
    ;
    Meta.mixin(Drive.prototype, [
        Meta.getters({
            state: function() {
                return this.talos.state;
            },
            isSync: function() {
                return Type.isRegularFunction(this.step);
            }
        })
    ]);
    Drive.make = make;
    Drive.isType = Type.isType(Drive);
    return Drive;
}).call(this);
export { Drive }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL2NvbnRhaW5lcnMvZHJpdmUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsS0FBQSxFQUFBOztBQUFBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFPLENBQUEsU0FBUCxNQUFBOztBQUNBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsS0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLEtBQVQ7Q0FBQSxNQUFBOztBQUdBLElBQUEsR0FBTyxPQUFBLENBQ0w7RUFBQSxJQUFBLEVBQU0sWUFBTjtFQUNBLE9BQUEsRUFBUyxRQUFBLENBQUEsR0FBRSxJQUFGLENBQUE7SUFDUCxNQUFNLElBQUksS0FBSixDQUFVLENBQUEsK0JBQUEsQ0FBQSxDQUFrQyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsQ0FBbEMsQ0FBQSxDQUFWO0VBREM7QUFEVCxDQURLOztBQUtQLE9BQUEsQ0FBUSxJQUFSLEVBQWMsS0FBSyxDQUFDLE1BQXBCLEVBQTRCLEtBQUssQ0FBQyxNQUFsQyxFQUEwQyxJQUFJLENBQUMsVUFBL0MsRUFBNEQsUUFBQSxDQUFFLEtBQUYsRUFBUyxLQUFULEVBQWdCLElBQWhCLENBQUE7U0FDMUQsSUFBSSxLQUFKLENBQVUsQ0FBRSxLQUFGLEVBQVMsS0FBVCxFQUFnQixJQUFoQixDQUFWO0FBRDBELENBQTVEOztBQUlNO0VBQU4sTUFBQSxNQUFBO0lBQ0UsV0FBYSxDQUFDO1FBQUcsYUFBSDtRQUFXLGFBQVg7UUFBbUI7TUFBbkIsQ0FBRCxDQUFBO01BQUcsSUFBQyxDQUFBO01BQU8sSUFBQyxDQUFBO01BQU8sSUFBQyxDQUFBO0lBQXBCOztJQVdiLE1BQVEsQ0FBQSxHQUFFLFVBQUYsQ0FBQTthQUNOLElBQUMsQ0FBQSxJQUFELENBQU0sSUFBQyxDQUFBLEtBQVAsRUFBYyxJQUFDLENBQUEsS0FBZixFQUFzQixHQUFBLFVBQXRCO0lBRE07O0VBWlY7O0VBR0UsSUFBSSxDQUFDLEtBQUwsQ0FBVyxLQUFDLENBQUEsU0FBWixFQUFnQjtJQUNkLElBQUksQ0FBQyxPQUFMLENBQ0U7TUFBQSxLQUFBLEVBQU8sUUFBQSxDQUFBLENBQUE7ZUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO01BQVYsQ0FBUDtNQUNBLE1BQUEsRUFBUSxRQUFBLENBQUEsQ0FBQTtlQUFHLElBQUksQ0FBQyxpQkFBTCxDQUF1QixJQUFDLENBQUEsSUFBeEI7TUFBSDtJQURSLENBREYsQ0FEYztHQUFoQjs7RUFNQSxLQUFDLENBQUEsSUFBRCxHQUFPOztFQUNQLEtBQUMsQ0FBQSxNQUFELEdBQVMsSUFBSSxDQUFDLE1BQUwsQ0FBWSxLQUFaOzs7Ozs7QUFNWCxPQUFBO0VBQ0UsS0FERiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE1ldGEgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvbWV0YWNsYXNzXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBWYWx1ZSBmcm9tIFwiQGRhc2hraXRlL2pveS92YWx1ZVwiXG5pbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgeyBHcmFwaCB9IGZyb20gXCIuL2dyYXBoXCJcbmltcG9ydCB7IFRhbG9zIH0gZnJvbSBcIi4vdGFsb3NcIlxuXG5cbm1ha2UgPSBnZW5lcmljIFxuICBuYW1lOiBcImRyaXZlIG1ha2VcIlxuICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJEcml2ZS5tYWtlOiBpbnB1dCBpcyBtYWxmb3JtZWQgI3tKU09OLnN0cmluZ2lmeSBhcmdzfVwiXG5cbmdlbmVyaWMgbWFrZSwgR3JhcGguaXNUeXBlLCBUYWxvcy5pc1R5cGUsIFR5cGUuaXNGdW5jdGlvbiwgICggZ3JhcGgsIHRhbG9zLCBzdGVwICkgLT5cbiAgbmV3IERyaXZlIHsgZ3JhcGgsIHRhbG9zLCBzdGVwIH1cblxuXG5jbGFzcyBEcml2ZVxuICBjb25zdHJ1Y3RvcjogKHsgQGdyYXBoLCBAdGFsb3MsIEBzdGVwIH0pIC0+XG5cbiAgTWV0YS5taXhpbiBAOjosIFtcbiAgICBNZXRhLmdldHRlcnNcbiAgICAgIHN0YXRlOiAtPiBAdGFsb3Muc3RhdGVcbiAgICAgIGlzU3luYzogLT4gVHlwZS5pc1JlZ3VsYXJGdW5jdGlvbiBAc3RlcFxuICBdXG5cbiAgQG1ha2U6IG1ha2VcbiAgQGlzVHlwZTogVHlwZS5pc1R5cGUgQFxuXG4gIHVwZGF0ZTogKCB0cmFuc2Zvcm1zLi4uICkgLT5cbiAgICBAc3RlcCBAZ3JhcGgsIEB0YWxvcywgdHJhbnNmb3Jtcy4uLlxuXG5cbmV4cG9ydCB7XG4gIERyaXZlXG59Il19
 //# sourceURL=src/containers/drive.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250YWluZXJzL2RyaXZlLmNvZmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBNZXRhIGZyb20gXCJAZGFzaGtpdGUvam95L21ldGFjbGFzc1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgVmFsdWUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdmFsdWVcIlxuaW1wb3J0IHsgZ2VuZXJpYyB9IGZyb20gXCJAZGFzaGtpdGUvam95L2dlbmVyaWNcIlxuaW1wb3J0IHsgR3JhcGggfSBmcm9tIFwiLi9ncmFwaFwiXG5pbXBvcnQgeyBUYWxvcyB9IGZyb20gXCIuL3RhbG9zXCJcblxuXG5tYWtlID0gZ2VuZXJpYyBcbiAgbmFtZTogXCJkcml2ZSBtYWtlXCJcbiAgZGVmYXVsdDogKCBhcmdzLi4uICkgLT4gXG4gICAgdGhyb3cgbmV3IEVycm9yIFwiRHJpdmUubWFrZTogaW5wdXQgaXMgbWFsZm9ybWVkICN7SlNPTi5zdHJpbmdpZnkgYXJnc31cIlxuXG5nZW5lcmljIG1ha2UsIEdyYXBoLmlzVHlwZSwgVGFsb3MuaXNUeXBlLCBUeXBlLmlzRnVuY3Rpb24sICAoIGdyYXBoLCB0YWxvcywgc3RlcCApIC0+XG4gIG5ldyBEcml2ZSB7IGdyYXBoLCB0YWxvcywgc3RlcCB9XG5cblxuY2xhc3MgRHJpdmVcbiAgY29uc3RydWN0b3I6ICh7IEBncmFwaCwgQHRhbG9zLCBAc3RlcCB9KSAtPlxuXG4gIE1ldGEubWl4aW4gQDo6LCBbXG4gICAgTWV0YS5nZXR0ZXJzXG4gICAgICBzdGF0ZTogLT4gQHRhbG9zLnN0YXRlXG4gICAgICBpc1N5bmM6IC0+IFR5cGUuaXNSZWd1bGFyRnVuY3Rpb24gQHN0ZXBcbiAgXVxuXG4gIEBtYWtlOiBtYWtlXG4gIEBpc1R5cGU6IFR5cGUuaXNUeXBlIEBcblxuICB1cGRhdGU6ICggdHJhbnNmb3Jtcy4uLiApIC0+XG4gICAgQHN0ZXAgQGdyYXBoLCBAdGFsb3MsIHRyYW5zZm9ybXMuLi5cblxuXG5leHBvcnQge1xuICBEcml2ZVxufSJdLCJuYW1lcyI6WyJEcml2ZSIsIm1ha2UiLCJNZXRhIiwiVHlwZSIsIlZhbHVlIiwiZ2VuZXJpYyIsIkdyYXBoIiwiVGFsb3MiLCJuYW1lIiwiZGVmYXVsdCIsImFyZ3MiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJpc1R5cGUiLCJpc0Z1bmN0aW9uIiwiZ3JhcGgiLCJ0YWxvcyIsInN0ZXAiLCJjb25zdHJ1Y3RvciIsImdyYXBoMSIsInRhbG9zMSIsInN0ZXAxIiwidXBkYXRlIiwidHJhbnNmb3JtcyIsIm1peGluIiwicHJvdG90eXBlIiwiZ2V0dGVycyIsInN0YXRlIiwiaXNTeW5jIiwiaXNSZWd1bGFyRnVuY3Rpb24iXSwibWFwcGluZ3MiOiJBQUFBLElBQUFBLE9BQUFDO0FBQUEsWUFBT0MsVUFBUCwwQkFBQTtBQUNBLFlBQU9DLFVBQVAscUJBQUE7QUFDQSxZQUFPQyxXQUFQLHNCQUFBO0FBQ0EsU0FBU0MsT0FBVCxRQUFBLHdCQUFBO0FBQ0EsU0FBU0MsS0FBVCxRQUFBLFVBQUE7QUFDQSxTQUFTQyxLQUFULFFBQUEsVUFBQTtBQUdBTixPQUFPSSxRQUNMO0lBQUFHLE1BQU07SUFDTkMsU0FBUztRQUFBLElBQUEsSUFBQSxPQUFBLFVBQUEsUUFBQSxBQUFFQyxPQUFGLFVBQUEsT0FBQSxPQUFBLEdBQUEsT0FBQSxNQUFBLE9BQUE7WUFBRUEsS0FBRixRQUFBLFNBQUEsQ0FBQSxLQUFBO1FBQUU7UUFDVCxNQUFNLElBQUlDLE1BQU0sQ0FBQSwrQkFBQSxFQUFrQ0MsS0FBS0MsU0FBTCxDQUFlSCxNQUFqRCxDQUFWO0lBREM7QUFEVDtBQUlGTCxRQUFRSixNQUFNSyxNQUFNUSxNQUFwQixFQUE0QlAsTUFBTU8sTUFBbEMsRUFBMENYLEtBQUtZLFVBQS9DLEVBQTRELFNBQUVDLEtBQUYsRUFBU0MsS0FBVCxFQUFnQkMsSUFBaEI7V0FDMUQsSUFBSWxCLE1BQU07UUFBRWdCO1FBQU9DO1FBQU9DO0lBQWhCO0FBRGdEO0FBSXREbEIsUUFBQSxDQUFBO0lBQU4sTUFBQUE7UUFDRW1CLFlBQWMsRUFBR0gsT0FBQUksTUFBSCxFQUFXSCxPQUFBSSxNQUFYLEVBQW1CSCxNQUFBSSxLQUFBLEVBQXBCLENBQUE7WUFBRyxJQUFDLENBQUFOLEtBQUEsR0FBQUk7WUFBTyxJQUFDLENBQUFILEtBQUEsR0FBQUk7WUFBTyxJQUFDLENBQUFILElBQUEsR0FBQUk7UUFBcEI7UUFXYkMsU0FBUTtZQUFBLElBQUEsSUFBQSxPQUFBLFVBQUEsUUFBQSxBQUFFQyxhQUFGLFVBQUEsT0FBQSxPQUFBLEdBQUEsT0FBQSxNQUFBLE9BQUE7Z0JBQUVBLFdBQUYsUUFBQSxTQUFBLENBQUEsS0FBQTtZQUFFO21CQUNSLElBQUMsQ0FBQU4sSUFBRCxDQUFNLElBQUMsQ0FBQUYsS0FBUCxFQUFjLElBQUMsQ0FBQUMsS0FBZixLQUFzQk87UUFEaEI7SUFaVjs7SUFHRXRCLEtBQUt1QixLQUFMLENBQVd6QixNQUFDMEIsU0FBWixFQUFnQjtRQUNkeEIsS0FBS3lCLE9BQUwsQ0FDRTtZQUFBQyxPQUFPO3VCQUFHLElBQUMsQ0FBQVgsS0FBSyxDQUFDVyxLQUFBO1lBQVY7WUFDUEMsUUFBUTt1QkFBRzFCLEtBQUsyQixpQkFBTCxDQUF1QixJQUFDLENBQUFaLElBQXhCO1lBQUg7UUFEUjtLQUZKO0lBTUFsQixNQUFDQyxJQUFELEdBQU9BO0lBQ1BELE1BQUNjLE1BQUQsR0FBU1gsS0FBS1csTUFBTCxDQUFZZDs7O0FBTXZCLFNBQ0VBLEtBREYifQ==