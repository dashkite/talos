"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Machine: function() {
        return Machine;
    },
    Vertex: function() {
        return Vertex;
    },
    Edges: function() {
        return Edges;
    },
    Edge: function() {
        return Edge;
    }
});
const _generic = require("@dashkite/joy/generic");
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _states = require("./states");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var Edge, Edges, Machine, Vertex, areVertexEdges, isState, normalizeMove, normalizeWhen, prioritize;
isState = function(x) {
    return _type.isString(x) || _type.isSymbol(x);
};
areVertexEdges = function(x) {
    var edge, j, len, ref;
    if (x.edges == null) {
        return false;
    }
    if (!_type.isArray(x.edges)) {
        return false;
    }
    ref = x.edges;
    for(j = 0, len = ref.length; j < len; j++){
        edge = ref[j];
        if (!_type.isObject(edge)) {
            return false;
        }
    }
    return true;
};
normalizeWhen = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return event === condition;
        };
    } else if (_type.isFunction(x)) {
        return x;
    } else if (_type.isBoolean(x)) {
        return function() {
            return x;
        };
    } else {
        throw new Error("unable to normalize when description");
    }
};
normalizeMove = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return talos.state = x;
        };
    } else if (_type.isFunction(x)) {
        return x;
    } else {
        throw new Error("unable to normalize move description");
    }
};
prioritize = function(frames) {
    return frames.sort(function(a, b) {
        if (a.priority < b.priority) {
            return -1;
        } else if (a.priority > b.priority) {
            return 1;
        } else {
            return 0;
        }
    });
};
Edge = {
    make: (0, _generic.generic)({
        name: "talos: make edge",
        default: function(...args) {
            throw new Error(`talos make edge: input is malformed ${JSON.stringify(args)}`);
        }
    })
};
(0, _generic.generic)(Edge.make, _type.isObject, function(object) {
    return {
        when: normalizeWhen(object.when),
        run: object.run,
        move: normalizeMove(object.move)
    };
});
(0, _generic.generic)(Edge.make, isState, _type.isAny, function(move, _when) {
    return Edge.make({
        move,
        when: _when
    });
});
(0, _generic.generic)(Edge.make, isState, _type.isObject, function(move, object) {
    var ref, ref1;
    return {
        when: normalizeWhen((ref = object.when) != null ? ref : true),
        run: object.run,
        move: normalizeMove((ref1 = object.move) != null ? ref1 : move)
    };
});
Edges = {
    make: (0, _generic.generic)({
        name: "talos: make edges",
        default: function(...args) {
            throw new Error(`talos make edges: input is malformed ${JSON.stringify(args)}`);
        }
    })
};
(0, _generic.generic)(Edges.make, _type.isObject, function(object) {
    var defaultFrame, edges, frames, j, k, key, len, len1, priority, ref, ref1, value;
    frames = [];
    defaultFrame = null;
    ref = Reflect.ownKeys(object);
    for(j = 0, len = ref.length; j < len; j++){
        key = ref[j];
        value = object[key];
        priority = (ref1 = value.priority) != null ? ref1 : 100;
        if (key === "default") {
            defaultFrame = {
                key,
                value
            };
        } else {
            if (key === "end") {
                key = _states.$end;
            }
            frames.push({
                key,
                value,
                priority
            });
        }
    }
    prioritize(frames);
    edges = [];
    for(k = 0, len1 = frames.length; k < len1; k++){
        ({ key, value } = frames[k]);
        edges.push(Edge.make(key, value));
    }
    if (defaultFrame != null) {
        // default is a special case emphasizing an always true "when" function.
        ({ value } = defaultFrame);
        if (_type.isObject(value)) {
            edges.push(Edge.make({
                ...value,
                when: true
            }));
        } else {
            edges.push(Edge.make({
                when: true,
                move: value
            }));
        }
    }
    return edges;
});
(0, _generic.generic)(Edges.make, _type.isArray, function(array) {
    var edge, j, len, results;
    results = [];
    for(j = 0, len = array.length; j < len; j++){
        edge = array[j];
        results.push(Edge.make(edge));
    }
    return results;
});
(0, _generic.generic)(Edges.make, _type.isFunction, function(f) {
    var edge;
    edge = {
        when: true,
        run: f,
        move: _states.$end
    };
    return [
        Edge.make(edge)
    ];
});
(0, _generic.generic)(Edges.make, isState, function(move) {
    return Edges.make({
        [move]: true
    });
});
(0, _generic.generic)(Edges.make, areVertexEdges, function({ edges }) {
    var edge, j, len, results;
    results = [];
    for(j = 0, len = edges.length; j < len; j++){
        edge = edges[j];
        results.push({
            when: edge.when,
            run: edge.run,
            move: edge.move
        });
    }
    return results;
});
Vertex = {
    make: function(key, value) {
        return {
            name: key,
            edges: Edges.make(value)
        };
    }
};
Machine = {
    make: function(value) {
        var _graph, j, key, len, machine, ref;
        _graph = Machine.format(value);
        machine = {
            graph: {}
        };
        ref = Reflect.ownKeys(_graph);
        for(j = 0, len = ref.length; j < len; j++){
            key = ref[j];
            value = _graph[key];
            machine.graph[key] = Vertex.make(key, value);
        }
        return machine;
    },
    clone: function(_machine) {
        return Machine.make(_machine.graph);
    },
    format: function(value) {
        var graph, j, key, len, ref;
        if (_type.isObject(value)) {
            graph = {};
            ref = Reflect.ownKeys(value);
            for(j = 0, len = ref.length; j < len; j++){
                key = ref[j];
                graph[key] = value[key];
            }
        } else if (_type.isArray(value)) {
            graph = Machine.expand(value);
        } else {
            throw new Error("Talos machine representation is malformed");
        }
        if (graph[_states.$start] == null) {
            if (graph.start != null) {
                graph[_states.$start] = graph.start;
                delete graph.start;
            } else {
                throw new Error("no start state defined for this machine");
            }
        }
        if (graph[_states.$end] == null) {
            if (graph.end != null) {
                graph[_states.$end] = graph.end;
                delete graph.end;
            }
        }
        return graph;
    },
    expand: function(fx) {
        var current, f, graph, i, j, len, next;
        graph = {};
        for(i = j = 0, len = fx.length; j < len; i = ++j){
            f = fx[i];
            current = i === 0 ? _states.$start : `${i}`;
            next = i === fx.length - 1 ? _states.$end : `${i + 1}`;
            graph[current] = {
                next: {
                    when: true,
                    run: f,
                    move: next
                }
            };
        }
        return graph;
    }
};
 //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=/@dashkite/talos/src/machine.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3Mvc3JjL21hY2hpbmUuY29mZmVlIiwiPGFub24+Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgeyAkc3RhcnQsICRlbmQgfSBmcm9tIFwiLi9zdGF0ZXNcIlxuXG5pc1N0YXRlID0gKCB4ICkgLT4gKCBUeXBlLmlzU3RyaW5nIHggKSB8fCAoIFR5cGUuaXNTeW1ib2wgeCApXG5hcmVWZXJ0ZXhFZGdlcyA9ICggeCApIC0+XG4gIHJldHVybiBmYWxzZSBpZiAheC5lZGdlcz9cbiAgcmV0dXJuIGZhbHNlIGlmICFUeXBlLmlzQXJyYXkgeC5lZGdlc1xuICBmb3IgZWRnZSBpbiB4LmVkZ2VzIHdoZW4gIVR5cGUuaXNPYmplY3QgZWRnZVxuICAgIHJldHVybiBmYWxzZVxuICB0cnVlXG5cblxubm9ybWFsaXplV2hlbiA9ICggeCApIC0+XG4gIGlmIGlzU3RhdGUgeFxuICAgICggdGFsb3MsIGV2ZW50ICkgLT4gZXZlbnQgPT0gY29uZGl0aW9uXG4gIGVsc2UgaWYgVHlwZS5pc0Z1bmN0aW9uIHhcbiAgICB4XG4gIGVsc2UgaWYgVHlwZS5pc0Jvb2xlYW4geFxuICAgIC0+IHhcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvciBcInVuYWJsZSB0byBub3JtYWxpemUgd2hlbiBkZXNjcmlwdGlvblwiXG5cbm5vcm1hbGl6ZU1vdmUgPSAoIHggKSAtPlxuICBpZiBpc1N0YXRlIHhcbiAgICAoIHRhbG9zLCBldmVudCApIC0+IHRhbG9zLnN0YXRlID0geFxuICBlbHNlIGlmIFR5cGUuaXNGdW5jdGlvbiB4XG4gICAgeFxuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yIFwidW5hYmxlIHRvIG5vcm1hbGl6ZSBtb3ZlIGRlc2NyaXB0aW9uXCJcblxucHJpb3JpdGl6ZSA9ICggZnJhbWVzICkgLT5cbiAgZnJhbWVzLnNvcnQgKCBhLCBiICkgLT4gXG4gICAgaWYgYS5wcmlvcml0eSA8IGIucHJpb3JpdHlcbiAgICAgIC0xXG4gICAgZWxzZSBpZiBhLnByaW9yaXR5ID4gYi5wcmlvcml0eVxuICAgICAgMVxuICAgIGVsc2VcbiAgICAgIDBcblxuXG5FZGdlID1cbiAgbWFrZTogZ2VuZXJpYyBcbiAgICBuYW1lOiBcInRhbG9zOiBtYWtlIGVkZ2VcIlxuICAgIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgICAgdGhyb3cgbmV3IEVycm9yIFwidGFsb3MgbWFrZSBlZGdlOiBpbnB1dCBpcyBtYWxmb3JtZWQgI3sgSlNPTi5zdHJpbmdpZnkgYXJncyB9XCJcblxuZ2VuZXJpYyBFZGdlLm1ha2UsIFR5cGUuaXNPYmplY3QsICggb2JqZWN0ICkgLT5cbiAgd2hlbjogbm9ybWFsaXplV2hlbiBvYmplY3Qud2hlblxuICBydW46IG9iamVjdC5ydW5cbiAgbW92ZTogbm9ybWFsaXplTW92ZSBvYmplY3QubW92ZVxuXG5nZW5lcmljIEVkZ2UubWFrZSwgaXNTdGF0ZSwgVHlwZS5pc0FueSwgKCBtb3ZlLCBfd2hlbiApIC0+XG4gIEVkZ2UubWFrZSB7IG1vdmUsIHdoZW46IF93aGVuIH1cblxuZ2VuZXJpYyBFZGdlLm1ha2UsIGlzU3RhdGUsIFR5cGUuaXNPYmplY3QsICggbW92ZSwgb2JqZWN0ICkgLT5cbiAgd2hlbjogbm9ybWFsaXplV2hlbiBvYmplY3Qud2hlbiA/IHRydWVcbiAgcnVuOiBvYmplY3QucnVuXG4gIG1vdmU6IG5vcm1hbGl6ZU1vdmUgb2JqZWN0Lm1vdmUgPyBtb3ZlXG5cblxuRWRnZXMgPSBcbiAgbWFrZTogZ2VuZXJpYyBcbiAgICBuYW1lOiBcInRhbG9zOiBtYWtlIGVkZ2VzXCJcbiAgICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICAgIHRocm93IG5ldyBFcnJvciBcInRhbG9zIG1ha2UgZWRnZXM6IGlucHV0IGlzIG1hbGZvcm1lZCAjeyBKU09OLnN0cmluZ2lmeSBhcmdzIH1cIlxuXG5nZW5lcmljIEVkZ2VzLm1ha2UsIFR5cGUuaXNPYmplY3QsICggb2JqZWN0ICkgLT5cbiAgZnJhbWVzID0gW11cbiAgZGVmYXVsdEZyYW1lID0gbnVsbFxuICBmb3Iga2V5IGluIFJlZmxlY3Qub3duS2V5cyBvYmplY3RcbiAgICB2YWx1ZSA9IG9iamVjdFsga2V5IF1cbiAgICBwcmlvcml0eSA9IHZhbHVlLnByaW9yaXR5ID8gMTAwXG4gICAgaWYga2V5ID09IFwiZGVmYXVsdFwiXG4gICAgICBkZWZhdWx0RnJhbWUgPSB7IGtleSwgdmFsdWUgfVxuICAgIGVsc2VcbiAgICAgIGtleSA9ICRlbmQgaWYga2V5ID09IFwiZW5kXCJcbiAgICAgIGZyYW1lcy5wdXNoIHsga2V5LCB2YWx1ZSwgcHJpb3JpdHkgfVxuXG4gIHByaW9yaXRpemUgZnJhbWVzXG5cbiAgZWRnZXMgPSBbXVxuICBmb3IgeyBrZXksIHZhbHVlIH0gaW4gZnJhbWVzXG4gICAgZWRnZXMucHVzaCBFZGdlLm1ha2Uga2V5LCB2YWx1ZVxuXG4gIGlmIGRlZmF1bHRGcmFtZT9cbiAgICAjIGRlZmF1bHQgaXMgYSBzcGVjaWFsIGNhc2UgZW1waGFzaXppbmcgYW4gYWx3YXlzIHRydWUgXCJ3aGVuXCIgZnVuY3Rpb24uXG4gICAgeyB2YWx1ZSB9ID0gZGVmYXVsdEZyYW1lXG4gICAgaWYgVHlwZS5pc09iamVjdCB2YWx1ZVxuICAgICAgZWRnZXMucHVzaCBFZGdlLm1ha2UgeyB2YWx1ZS4uLiwgd2hlbjogdHJ1ZSB9XG4gICAgZWxzZVxuICAgICAgZWRnZXMucHVzaCBFZGdlLm1ha2Ugd2hlbjogdHJ1ZSwgbW92ZTogdmFsdWVcbiAgXG4gIGVkZ2VzXG4gIFxuXG5nZW5lcmljIEVkZ2VzLm1ha2UsIFR5cGUuaXNBcnJheSwgKCBhcnJheSApIC0+XG4gIGZvciBlZGdlIGluIGFycmF5XG4gICAgRWRnZS5tYWtlIGVkZ2VcblxuZ2VuZXJpYyBFZGdlcy5tYWtlLCBUeXBlLmlzRnVuY3Rpb24sICggZiApIC0+XG4gIGVkZ2UgPSB3aGVuOiB0cnVlLCBydW46IGYsIG1vdmU6ICRlbmRcbiAgWyBFZGdlLm1ha2UgZWRnZSBdXG5cbmdlbmVyaWMgRWRnZXMubWFrZSwgaXNTdGF0ZSwgKCBtb3ZlICkgLT5cbiAgRWRnZXMubWFrZSBbIG1vdmUgXTogdHJ1ZVxuXG5nZW5lcmljIEVkZ2VzLm1ha2UsIGFyZVZlcnRleEVkZ2VzLCAoeyBlZGdlcyB9KSAtPlxuICBmb3IgZWRnZSBpbiBlZGdlc1xuICAgIHdoZW46IGVkZ2Uud2hlblxuICAgIHJ1bjogZWRnZS5ydW5cbiAgICBtb3ZlOiBlZGdlLm1vdmVcblxuXG5WZXJ0ZXggPVxuICBtYWtlOiAoIGtleSwgdmFsdWUgKSAtPlxuICAgIG5hbWU6IGtleVxuICAgIGVkZ2VzOiBFZGdlcy5tYWtlIHZhbHVlXG5cblxuTWFjaGluZSA9XG4gIG1ha2U6ICggdmFsdWUgKSAtPiBcbiAgICBfZ3JhcGggPSBNYWNoaW5lLmZvcm1hdCB2YWx1ZVxuICAgIG1hY2hpbmUgPSBncmFwaDoge31cblxuICAgIGZvciBrZXkgaW4gUmVmbGVjdC5vd25LZXlzIF9ncmFwaFxuICAgICAgdmFsdWUgPSBfZ3JhcGhbIGtleSBdXG4gICAgICBtYWNoaW5lLmdyYXBoWyBrZXkgXSA9IFZlcnRleC5tYWtlIGtleSwgdmFsdWVcbiAgICBcbiAgICBtYWNoaW5lXG5cblxuICBjbG9uZTogKCBfbWFjaGluZSApIC0+XG4gICAgTWFjaGluZS5tYWtlIF9tYWNoaW5lLmdyYXBoXG5cbiAgZm9ybWF0OiAoIHZhbHVlICkgLT5cbiAgICBpZiBUeXBlLmlzT2JqZWN0IHZhbHVlXG4gICAgICBncmFwaCA9IHt9XG4gICAgICBmb3Iga2V5IGluIFJlZmxlY3Qub3duS2V5cyB2YWx1ZVxuICAgICAgICBncmFwaFsga2V5IF0gPSB2YWx1ZVsga2V5IF1cbiAgICBlbHNlIGlmIFR5cGUuaXNBcnJheSB2YWx1ZVxuICAgICAgZ3JhcGggPSBNYWNoaW5lLmV4cGFuZCB2YWx1ZVxuICAgIGVsc2VcbiAgICAgIHRocm93IG5ldyBFcnJvciBcIlRhbG9zIG1hY2hpbmUgcmVwcmVzZW50YXRpb24gaXMgbWFsZm9ybWVkXCJcbiAgICBcbiAgICBpZiAhZ3JhcGhbICRzdGFydCBdP1xuICAgICAgaWYgZ3JhcGguc3RhcnQ/XG4gICAgICAgIGdyYXBoWyAkc3RhcnQgXSA9IGdyYXBoLnN0YXJ0XG4gICAgICAgIGRlbGV0ZSBncmFwaC5zdGFydFxuICAgICAgZWxzZVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IgXCJubyBzdGFydCBzdGF0ZSBkZWZpbmVkIGZvciB0aGlzIG1hY2hpbmVcIlxuXG4gICAgaWYgIWdyYXBoWyAkZW5kIF0/XG4gICAgICBpZiBncmFwaC5lbmQ/XG4gICAgICAgIGdyYXBoWyAkZW5kIF0gPSBncmFwaC5lbmRcbiAgICAgICAgZGVsZXRlIGdyYXBoLmVuZFxuXG4gICAgZ3JhcGhcblxuICBleHBhbmQ6ICggZnggKSAtPlxuICAgIGdyYXBoID0ge30gICAgXG4gICAgZm9yIGYsIGkgaW4gZnhcbiAgICAgIGN1cnJlbnQgPSBpZiBpID09IDAgdGhlbiAkc3RhcnQgZWxzZSBcIiN7IGkgfVwiXG4gICAgICBuZXh0ID0gaWYgaSA9PSBmeC5sZW5ndGggLSAxIHRoZW4gJGVuZCBlbHNlIFwiI3sgaSArIDEgfVwiXG5cbiAgICAgIGdyYXBoWyBjdXJyZW50IF0gPSBcbiAgICAgICAgbmV4dDpcbiAgICAgICAgICB3aGVuOiB0cnVlXG4gICAgICAgICAgcnVuOiBmXG4gICAgICAgICAgbW92ZTogbmV4dFxuICAgIFxuICAgIGdyYXBoXG5cblxuZXhwb3J0IHsgTWFjaGluZSwgVmVydGV4LCBFZGdlcywgRWRnZSB9IixudWxsXSwibmFtZXMiOlsiTWFjaGluZSIsIlZlcnRleCIsIkVkZ2VzIiwiRWRnZSIsImFyZVZlcnRleEVkZ2VzIiwiaXNTdGF0ZSIsIm5vcm1hbGl6ZU1vdmUiLCJub3JtYWxpemVXaGVuIiwicHJpb3JpdGl6ZSIsIngiLCJUeXBlIiwiaXNTdHJpbmciLCJpc1N5bWJvbCIsImVkZ2UiLCJqIiwibGVuIiwicmVmIiwiZWRnZXMiLCJpc0FycmF5IiwibGVuZ3RoIiwiaXNPYmplY3QiLCJ0YWxvcyIsImV2ZW50IiwiY29uZGl0aW9uIiwiaXNGdW5jdGlvbiIsImlzQm9vbGVhbiIsIkVycm9yIiwic3RhdGUiLCJmcmFtZXMiLCJzb3J0IiwiYSIsImIiLCJwcmlvcml0eSIsIm1ha2UiLCJnZW5lcmljIiwibmFtZSIsImRlZmF1bHQiLCJhcmdzIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9iamVjdCIsIndoZW4iLCJydW4iLCJtb3ZlIiwiaXNBbnkiLCJfd2hlbiIsInJlZjEiLCJkZWZhdWx0RnJhbWUiLCJrIiwia2V5IiwibGVuMSIsInZhbHVlIiwiUmVmbGVjdCIsIm93bktleXMiLCIkZW5kIiwicHVzaCIsImFycmF5IiwicmVzdWx0cyIsImYiLCJfZ3JhcGgiLCJtYWNoaW5lIiwiZm9ybWF0IiwiZ3JhcGgiLCJjbG9uZSIsIl9tYWNoaW5lIiwiZXhwYW5kIiwiJHN0YXJ0Iiwic3RhcnQiLCJlbmQiLCJmeCIsImN1cnJlbnQiLCJpIiwibmV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUE4S1NBLE9BQVQ7ZUFBU0E7O0lBQVNDLE1BQWxCO2VBQWtCQTs7SUFBUUMsS0FBMUI7ZUFBMEJBOztJQUFPQyxJQUFqQztlQUFpQ0E7Ozt5QkE5S2pDOzhEQUNBO3dCQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRkEsSUFBQUEsTUFBQUQsT0FBQUYsU0FBQUMsUUFBQUcsZ0JBQUFDLFNBQUFDLGVBQUFDLGVBQUFDO0FBSUFILFVBQVUsU0FBRUksQ0FBRjtXQUFTLEFBQUVDLE1BQUtDLFFBQUwsQ0FBY0YsTUFBU0MsTUFBS0UsUUFBTCxDQUFjSDtBQUFoRDtBQUNWTCxpQkFBaUIsU0FBRUssQ0FBRjtJQUNqQixJQUFBSSxNQUFBQyxHQUFBQyxLQUFBQztJQUFFLElBQWlCUCxFQUFBUSxLQUFBLElBQUEsTUFBakI7UUFBQSxPQUFPOztJQUNQLElBQWdCLENBQUNQ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