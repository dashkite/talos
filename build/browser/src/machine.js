var Edge, Edges, Machine, Vertex, isState, normalizeMove, normalizeWhen, prioritize;
import { generic } from "@dashkite/joy/generic";
import * as Type from "@dashkite/joy/type";
import { $start, $end } from "./states";
isState = function(x) {
    return Type.isString(x) || Type.isSymbol(x);
};
normalizeWhen = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return event === condition;
        };
    } else if (Type.isFunction(x)) {
        return x;
    } else if (Type.isBoolean(x)) {
        return function() {
            return x;
        };
    } else {
        throw new Error("unable to normalize when description");
    }
};
normalizeMove = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return talos.state = x;
        };
    } else if (Type.isFunction(x)) {
        return x;
    } else {
        throw new Error("unable to normalize move description");
    }
};
prioritize = function(frames) {
    return frames.sort(function(a, b) {
        if (a.priority < b.priority) {
            return -1;
        } else if (a.priority > b.priority) {
            return 1;
        } else {
            return 0;
        }
    });
};
Edge = {
    make: generic({
        name: "talos: make edge",
        default: function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            throw new Error(`talos make edge: input is malformed ${JSON.stringify(args)}`);
        }
    })
};
generic(Edge.make, Type.isObject, function(object) {
    return {
        when: normalizeWhen(object.when),
        run: object.run,
        move: normalizeMove(object.move)
    };
});
generic(Edge.make, isState, Type.isAny, function(move, _when) {
    return Edge.make({
        move,
        when: _when
    });
});
generic(Edge.make, isState, Type.isObject, function(move, object) {
    var ref;
    return {
        when: normalizeWhen(object.when),
        run: object.run,
        move: normalizeMove((ref = object.move) != null ? ref : move)
    };
});
Edges = {
    make: generic({
        name: "talos: make edges",
        default: function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            throw new Error(`talos make edges: input is malformed ${JSON.stringify(args)}`);
        }
    })
};
generic(Edges.make, Type.isObject, function(object) {
    var defaultFrame, edges, frames, i, j, key, len, len1, priority, ref, ref1, value;
    frames = [];
    defaultFrame = null;
    ref = Reflect.ownKeys(object);
    for(i = 0, len = ref.length; i < len; i++){
        key = ref[i];
        value = object[key];
        priority = (ref1 = value.priority) != null ? ref1 : 100;
        if (key === "default") {
            defaultFrame = {
                key,
                value
            };
        } else {
            if (key === "end") {
                key = $end;
            }
            frames.push({
                key,
                value,
                priority
            });
        }
    }
    prioritize(frames);
    edges = [];
    for(j = 0, len1 = frames.length; j < len1; j++){
        ({ key, value } = frames[j]);
        edges.push(Edge.make(key, value));
    }
    if (defaultFrame != null) {
        // default is a special case emphasizing an always true "when" function.
        ({ value } = defaultFrame);
        if (Type.isObject(value)) {
            edges.push(Edge.make({
                ...value,
                when: true
            }));
        } else {
            edges.push(Edge.make({
                when: true,
                move: value
            }));
        }
    }
    return edges;
});
generic(Edges.make, Type.isArray, function(array) {
    var edge, i, len, results;
    results = [];
    for(i = 0, len = array.length; i < len; i++){
        edge = array[i];
        results.push(Edge.make(edge));
    }
    return results;
});
generic(Edges.make, Type.isFunction, function(f) {
    var edge;
    edge = {
        when: true,
        run: f,
        move: $end
    };
    return [
        Edge.make(edge)
    ];
});
generic(Edges.make, isState, function(move) {
    return Edges.make({
        [move]: true
    });
});
Vertex = {
    make: function(key, value) {
        return {
            name: key,
            edges: Edges.make(value)
        };
    }
};
Machine = {
    make: function(graph) {
        var i, key, len, machine, ref, value;
        if (!Type.isObject(graph)) {
            throw new Error("Talos machine representation is malformed");
        }
        if (graph[$start] == null) {
            if (graph.start != null) {
                graph[$start] = graph.start;
                delete graph.start;
            } else {
                throw new Error("no start state defined for this machine");
            }
        }
        if (graph[$end] == null) {
            if (graph.end != null) {
                graph[$end] = graph.end;
                delete graph.end;
            }
        }
        // TODO: Do we want a clone operation here?
        machine = {
            graph: {}
        };
        ref = Reflect.ownKeys(graph);
        for(i = 0, len = ref.length; i < len; i++){
            key = ref[i];
            value = graph[key];
            machine.graph[key] = Vertex.make(key, value);
        }
        return machine;
    }
};
export { Machine, Vertex, Edges, Edge }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=src/machine.coffee

//# sourceMappingURL=data:application/json;base64,