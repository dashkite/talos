"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vertex = void 0;
var Meta = _interopRequireWildcard(require("@dashkite/joy/metaclass"));
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _helpers = require("../helpers.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Vertex, isAction, isNext, isSelector, verify;
isSelector = (0, _helpers.oneOf)([Type.isString, Type.isSymbol, Type.isRegExp, Type.isFunction]);
isNext = (0, _helpers.oneOf)([Type.isString, Type.isSymbol, Type.isFunction]);
isAction = (0, _helpers.oneOf)([Type.isUndefined, Type.isFunction]);
verify = function (options) {
  var action, next, selector;
  ({
    selector,
    next,
    action
  } = options);
  if (!isSelector(selector)) {
    throw new Error(`Vertext.create: invalid selector, ${selector}`);
  }
  if (!isNext(next)) {
    throw new Error(`Vertex.create: invalid next, ${next}`);
  }
  if (!isAction(action)) {
    throw new Error(`Vertex.create: invalid action, ${action}`);
  }
};
exports.Vertex = Vertex = function () {
  class Vertex {
    constructor({
      selector: selector1,
      next: next1,
      action: action1
    }) {
      this.selector = selector1;
      this.next = next1;
      this.action = action1;
      this;
    }
    static create(options) {
      verify(options);
      return new Vertex(options);
    }
  }
  ;
  Meta.mixin(Vertex.prototype, [Meta.getters({
    test: function () {
      return this._test != null ? this._test : this._test = function () {
        if (Type.isString(this.selector)) {
          return talos => {
            return this.selector === talos.state;
          };
        } else if (Type.isSymbol(this.selector)) {
          return talos => {
            return this.selector === talos.state;
          };
        } else if (Type.isRegExp(this.selector)) {
          return talos => {
            return Type.isString(talos.state) && this.selector.test(talos.state);
          };
        } else if (Type.isRegularFunction(this.selector)) {
          return talos => {
            return this.selector(talos, this);
          };
        } else if (Type.isAsyncFunction(this.selector)) {
          return async talos => {
            return await this.selector(talos, this);
          };
        } else {
          throw new Error("Vertex#test unknown selector test, unable to match state");
        }
      }.call(this);
    },
    hasAsyncSelector: function () {
      return Type.isAsyncFunction(this.test);
    }
  })]);
  Vertex.isType = Type.isType(Vertex);
  return Vertex;
}.call(void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250YWluZXJzL3ZlcnRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQSxJQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxJQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQUEsSUFBQSxRQUFBLEdBQUEsT0FBQTtBQUFBLFNBQUEseUJBQUEsQ0FBQSw2QkFBQSxPQUFBLG1CQUFBLENBQUEsT0FBQSxPQUFBLElBQUEsQ0FBQSxPQUFBLE9BQUEsWUFBQSx3QkFBQSxZQUFBLENBQUEsQ0FBQSxXQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUE7QUFBQSxTQUFBLHdCQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsVUFBQSxTQUFBLENBQUEsZUFBQSxDQUFBLHVCQUFBLENBQUEseUJBQUEsQ0FBQSxXQUFBLE9BQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLHdCQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsU0FBQSxVQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLENBQUEsSUFBQSxDQUFBLG9CQUFBLENBQUEsSUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLElB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S0FBSyxDQUFDLEtBQXZCLENBQUE7VUFEbkMsQ0FERztTQUFBLE1BR0EsSUFBRyxJQUFJLENBQUMsaUJBQUwsQ0FBdUIsSUFBQyxDQUFBLFFBQXhCLENBQUgsRUFBQTtVQUNILE9BQUUsS0FBRixJQUFBO21CQUFhLElBQUMsQ0FBQSxRQUFELENBQVUsS0FBVixFQUFpQixJQUFqQixDQUFBO1VBQWIsQ0FERztTQUFBLE1BRUEsSUFBRyxJQUFJLENBQUMsZUFBTCxDQUFxQixJQUFDLENBQUEsUUFBdEIsQ0FBSCxFQUFBO2lCQUNILE1BQUUsS0FBRixJQUFBO1lBQWEsT0FBQSxNQUFNLElBQUMsQ0FBQSxRQUFELENBQVUsS0FBVixFQUFpQixJQUFqQixDQUFOO1VBQWIsQ0FERztTQUFBLE1BQUE7VUFHSCxNQUFNLElBQUksS0FBSixDQUFVLDBEQUFWLENBSEg7OztJQVhILENBQU47SUFnQkEsZ0JBQUEsRUFBa0IsU0FBQSxDQUFBLEVBQUE7YUFBRyxJQUFJLENBQUMsZUFBTCxDQUFxQixJQUFDLENBQUEsSUFBdEIsQ0FBQTtJQUFIO0VBaEJsQixDQURGLENBRGMsQ0FBaEIsQ0FBQTtFQXlCQSxNQUFDLENBQUEsTUFBRCxHQUFTLElBQUksQ0FBQyxNQUFMLENBQVksTUFBWixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTWV0YSBmcm9tIFwiQGRhc2hraXRlL2pveS9tZXRhY2xhc3NcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCB7IG9uZU9mIH0gZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5cbmlzU2VsZWN0b3IgPSBvbmVPZiBbXG4gIFR5cGUuaXNTdHJpbmdcbiAgVHlwZS5pc1N5bWJvbFxuICBUeXBlLmlzUmVnRXhwXG4gIFR5cGUuaXNGdW5jdGlvbiBcbl1cblxuaXNOZXh0ID0gb25lT2YgWyBcbiAgVHlwZS5pc1N0cmluZ1xuICBUeXBlLmlzU3ltYm9sXG4gIFR5cGUuaXNGdW5jdGlvblxuXVxuXG5pc0FjdGlvbiA9IG9uZU9mIFtcbiAgVHlwZS5pc1VuZGVmaW5lZFxuICBUeXBlLmlzRnVuY3Rpb25cbl1cblxudmVyaWZ5ID0gKCBvcHRpb25zICkgLT5cbiAgeyBzZWxlY3RvciwgbmV4dCwgYWN0aW9uIH0gPSBvcHRpb25zXG5cbiAgdW5sZXNzIGlzU2VsZWN0b3Igc2VsZWN0b3JcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJWZXJ0ZXh0LmNyZWF0ZTogaW52YWxpZCBzZWxlY3RvciwgI3sgc2VsZWN0b3IgfVwiXG5cbiAgdW5sZXNzIGlzTmV4dCBuZXh0XG4gICAgdGhyb3cgbmV3IEVycm9yIFwiVmVydGV4LmNyZWF0ZTogaW52YWxpZCBuZXh0LCAjeyBuZXh0IH1cIlxuXG4gIHVubGVzcyBpc0FjdGlvbiBhY3Rpb25cbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJWZXJ0ZXguY3JlYXRlOiBpbnZhbGlkIGFjdGlvbiwgI3sgYWN0aW9uIH1cIlxuXG5cbmNsYXNzIFZlcnRleFxuICBjb25zdHJ1Y3RvcjogKHsgQHNlbGVjdG9yLCBAbmV4dCwgQGFjdGlvbiB9KSAtPlxuICAgIEBcblxuICBNZXRhLm1peGluIEA6OiwgW1xuICAgIE1ldGEuZ2V0dGVyc1xuICAgICAgdGVzdDogLT5cbiAgICAgICAgQF90ZXN0ID89IFxuICAgICAgICAgIGlmIFR5cGUuaXNTdHJpbmcgQHNlbGVjdG9yXG4gICAgICAgICAgICAoIHRhbG9zICkgPT4gQHNlbGVjdG9yID09IHRhbG9zLnN0YXRlXG4gICAgICAgICAgZWxzZSBpZiBUeXBlLmlzU3ltYm9sIEBzZWxlY3RvclxuICAgICAgICAgICAgKCB0YWxvcyApID0+IEBzZWxlY3RvciA9PSB0YWxvcy5zdGF0ZSBcbiAgICAgICAgICBlbHNlIGlmIFR5cGUuaXNSZWdFeHAgQHNlbGVjdG9yXG4gICAgICAgICAgICAoIHRhbG9zICkgPT4gXG4gICAgICAgICAgICAgICggVHlwZS5pc1N0cmluZyB0YWxvcy5zdGF0ZSApICYmICggQHNlbGVjdG9yLnRlc3QgdGFsb3Muc3RhdGUgKVxuICAgICAgICAgIGVsc2UgaWYgVHlwZS5pc1JlZ3VsYXJGdW5jdGlvbiBAc2VsZWN0b3JcbiAgICAgICAgICAgICggdGFsb3MgKSA9PiBAc2VsZWN0b3IgdGFsb3MsIEBcbiAgICAgICAgICBlbHNlIGlmIFR5cGUuaXNBc3luY0Z1bmN0aW9uIEBzZWxlY3RvclxuICAgICAgICAgICAgKCB0YWxvcyApID0+IGF3YWl0IEBzZWxlY3RvciB0YWxvcywgQFxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciBcIlZlcnRleCN0ZXN0IHVua25vd24gc2VsZWN0b3IgdGVzdCwgdW5hYmxlIHRvIG1hdGNoIHN0YXRlXCJcblxuICAgICAgaGFzQXN5bmNTZWxlY3RvcjogLT4gVHlwZS5pc0FzeW5jRnVuY3Rpb24gQHRlc3RcbiAgXVxuXG4gIEBjcmVhdGU6ICggb3B0aW9ucyApIC0+XG4gICAgdmVyaWZ5IG9wdGlvbnNcbiAgICBuZXcgVmVydGV4IG9wdGlvbnNcblxuICBAaXNUeXBlOiBUeXBlLmlzVHlwZSBAXG5cblxuXG5leHBvcnQge1xuICBWZXJ0ZXhcbn0iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=src/containers/vertex.coffee