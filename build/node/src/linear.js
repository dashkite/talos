"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pipe = exports.flow = void 0;
var Fn = _interopRequireWildcard(require("@dashkite/joy/function"));
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _generic = require("@dashkite/joy/generic");
var _index = require("./containers/index.js");
var _states = require("./states.js");
var Sync = _interopRequireWildcard(require("./strict/sync.js"));
var Async = _interopRequireWildcard(require("./strict/async.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var _flow, _pipe, buildGraph, check, flow, isFunctionArray, pipe;
buildGraph = function (fx) {
  var current, f, graph, i, j, len, next;
  graph = {};
  for (i = j = 0, len = fx.length; j < len; i = ++j) {
    f = fx[i];
    current = i === 0 ? _states.$start : `${i}`;
    next = i === fx.length - 1 ? _states.$halt : `${i + 1}`;
    graph[current] = [{
      accept: true,
      run: f,
      move: next
    }];
  }
  return _index.Graph.make(graph);
};
check = function (talos) {
  if (talos.error != null) {
    throw talos.error.error;
  }
};
isFunctionArray = function (fx) {
  var f, j, len;
  if (!Type.isArray(fx)) {
    return false;
  }
  for (j = 0, len = fx.length; j < len; j++) {
    f = fx[j];
    if (!Type.isFunction(f)) {
      return false;
    }
  }
  return true;
};
exports.pipe = pipe = (0, _generic.generic)({
  name: "talos pipe",
  default: function (...args) {
    throw new Error(`pipe: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(pipe, isFunctionArray, function (fx) {
  return _pipe(fx);
});
_pipe = function (fx) {
  var drive, f, graph, talos;
  if (fx.length === 0) {
    return Fn.identity;
  }
  f = fx[0];
  graph = buildGraph(fx);
  talos = _index.Talos.make();
  drive = _index.Drive.make(graph, talos, Sync.step);
  return Fn.arity(f.length, function (...args) {
    var j, ref;
    drive.update(...args);
    check(talos);
    if (talos.halted) {
      return talos.context;
    }
    for (j = 1, ref = fx.length; 1 <= ref ? j < ref : j > ref; 1 <= ref ? j++ : j--) {
      drive.update();
      check(talos);
    }
    return talos.context;
  });
};
exports.flow = flow = (0, _generic.generic)({
  name: "talos flow",
  default: function (...args) {
    throw new Error(`flow: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(flow, isFunctionArray, function (fx) {
  return _flow(fx);
});
_flow = function (fx) {
  var drive, f, graph, talos;
  if (fx.length === 0) {
    return async function (x) {
      return await x;
    };
  }
  f = fx[0];
  graph = buildGraph(fx);
  talos = _index.Talos.make();
  drive = _index.Drive.make(graph, talos, Async.step);
  return Fn.arity(f.length, async function (...args) {
    var j, ref;
    await drive.update(...args);
    check(talos);
    if (talos.halted) {
      return talos.context;
    }
    for (j = 1, ref = fx.length; 1 <= ref ? j < ref : j > ref; 1 <= ref ? j++ : j--) {
      await drive.update();
      check(talos);
    }
    return talos.context;
  });
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=src/linear.coffee