"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Machine: function() {
        return Machine;
    },
    Vertex: function() {
        return Vertex;
    },
    Edges: function() {
        return Edges;
    },
    Edge: function() {
        return Edge;
    }
});
const _generic = require("@dashkite/joy/generic");
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _states = require("./states");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var Edge, Edges, Machine, Vertex, isState, normalizeMove, normalizeWhen, prioritize;
isState = function(x) {
    return _type.isString(x) || _type.isSymbol(x);
};
normalizeWhen = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return event === condition;
        };
    } else if (_type.isFunction(x)) {
        return x;
    } else if (_type.isBoolean(x)) {
        return function() {
            return x;
        };
    } else {
        throw new Error("unable to normalize when description");
    }
};
normalizeMove = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return talos.state = x;
        };
    } else if (_type.isFunction(x)) {
        return x;
    } else {
        throw new Error("unable to normalize move description");
    }
};
prioritize = function(frames) {
    return frames.sort(function(a, b) {
        if (a.priority < b.priority) {
            return -1;
        } else if (a.priority > b.priority) {
            return 1;
        } else {
            return 0;
        }
    });
};
Edge = {
    make: (0, _generic.generic)({
        name: "talos: make edge",
        default: function(...args) {
            throw new Error(`talos make edge: input is malformed ${JSON.stringify(args)}`);
        }
    })
};
(0, _generic.generic)(Edge.make, _type.isObject, function(object) {
    return {
        when: normalizeWhen(object.when),
        run: object.run,
        move: normalizeMove(object.move)
    };
});
(0, _generic.generic)(Edge.make, isState, _type.isAny, function(move, _when) {
    return Edge.make({
        move,
        when: _when
    });
});
(0, _generic.generic)(Edge.make, isState, _type.isObject, function(move, object) {
    var ref;
    return {
        when: normalizeWhen(object.when),
        run: object.run,
        move: normalizeMove((ref = object.move) != null ? ref : move)
    };
});
Edges = {
    make: (0, _generic.generic)({
        name: "talos: make edges",
        default: function(...args) {
            throw new Error(`talos make edges: input is malformed ${JSON.stringify(args)}`);
        }
    })
};
(0, _generic.generic)(Edges.make, _type.isObject, function(object) {
    var defaultFrame, edges, frames, i, j, key, len, len1, priority, ref, ref1, value;
    frames = [];
    defaultFrame = null;
    ref = Reflect.ownKeys(object);
    for(i = 0, len = ref.length; i < len; i++){
        key = ref[i];
        value = object[key];
        priority = (ref1 = value.priority) != null ? ref1 : 100;
        if (key === "default") {
            defaultFrame = {
                key,
                value
            };
        } else {
            if (key === "end") {
                key = _states.$end;
            }
            frames.push({
                key,
                value,
                priority
            });
        }
    }
    prioritize(frames);
    edges = [];
    for(j = 0, len1 = frames.length; j < len1; j++){
        ({ key, value } = frames[j]);
        edges.push(Edge.make(key, value));
    }
    if (defaultFrame != null) {
        // default is a special case emphasizing an always true "when" function.
        ({ value } = defaultFrame);
        if (_type.isObject(value)) {
            edges.push(Edge.make({
                ...value,
                when: true
            }));
        } else {
            edges.push(Edge.make({
                when: true,
                move: value
            }));
        }
    }
    return edges;
});
(0, _generic.generic)(Edges.make, _type.isArray, function(array) {
    var edge, i, len, results;
    results = [];
    for(i = 0, len = array.length; i < len; i++){
        edge = array[i];
        results.push(Edge.make(edge));
    }
    return results;
});
(0, _generic.generic)(Edges.make, _type.isFunction, function(f) {
    var edge;
    edge = {
        when: true,
        run: f,
        move: _states.$end
    };
    return [
        Edge.make(edge)
    ];
});
(0, _generic.generic)(Edges.make, isState, function(move) {
    return Edges.make({
        [move]: true
    });
});
Vertex = {
    make: function(key, value) {
        return {
            name: key,
            edges: Edges.make(value)
        };
    }
};
Machine = {
    make: function(graph) {
        var i, key, len, machine, ref, value;
        if (!_type.isObject(graph)) {
            throw new Error("Talos machine representation is malformed");
        }
        if (graph[_states.$start] == null) {
            if (graph.start != null) {
                graph[_states.$start] = graph.start;
                delete graph.start;
            } else {
                throw new Error("no start state defined for this machine");
            }
        }
        if (graph[_states.$end] == null) {
            if (graph.end != null) {
                graph[_states.$end] = graph.end;
                delete graph.end;
            }
        }
        // TODO: Do we want a clone operation here?
        machine = {
            graph: {}
        };
        ref = Reflect.ownKeys(graph);
        for(i = 0, len = ref.length; i < len; i++){
            key = ref[i];
            value = graph[key];
            machine.graph[key] = Vertex.make(key, value);
        }
        return machine;
    }
};
 //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=/@dashkite/talos/src/machine.coffee

//# sourceMappingURL=data:application/json;base64,