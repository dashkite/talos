var add, grow, test;
import { Machine, Talos, $start, $end, start, run, pipe } from "../../src/sync";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        graph: {
            start: {
                hold: {
                    run: add
                }
            },
            hold: {
                hold: {
                    run: add
                }
            }
        }
    });
    B = Machine.make({
        graph: {
            start: {
                first: {
                    run: grow
                }
            },
            first: {
                second: {
                    run: grow
                }
            },
            second: {
                end: {
                    run: grow
                }
            }
        }
    });
    return [
        h.test("start", h.target("sync", function() {
            return h.assert(Type.isIterator(start(A)));
        })),
        h.test("run while consuming events", h.target("sync", function() {
            var events, ref, talos;
            events = [
                1,
                2,
                3
            ];
            talos = run(A, {
                sum: 0
            }, events);
            return h.assert.equal(6, talos != null ? (ref = talos.context) != null ? ref.sum : void 0 : void 0);
        })),
        h.test("run without events and reconsume context", h.target("sync", function() {
            var ref, talos;
            talos = run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("pipe functional composition", h.target("sync", function() {
            var a, b, b2, c, context, error, f, g;
            a = function(talos) {
                return talos.context.sum = 1;
            };
            b = function(talos) {
                return talos.context.sum += 2;
            };
            b2 = function() {
                throw new Error("b2");
            };
            c = function(talos) {
                return talos.context.sum += 3;
            };
            f = pipe([
                a,
                b,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = f();
            h.assert.equal(8, context != null ? context.sum : void 0);
            g = pipe([
                a,
                b,
                b2,
                c
            ]);
            try {
                g();
                throw new Error("did not throw");
            } catch (error1) {
                error = error1;
                return h.assert(error.message === "b2");
            }
        })),
        h.test("handles error", h.target("sync", function() {
            var a, b, c, talos;
            a = async function(talos) {
                return talos.context.sum = await 1;
            };
            b = function(talos) {
                throw new Error("b");
            };
            c = async function(talos) {
                return talos.context.sum += await 3;
            };
            talos = run(start([
                a,
                b,
                c
            ]));
            h.assert(talos.failure);
            h.assert.equal($end, talos.state);
            return h.assert.equal("b", talos.previousState);
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9zeW5jL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsS0FBbEI7RUFBeUIsTUFBekI7RUFBaUMsSUFBakM7RUFBdUMsS0FBdkM7RUFBOEMsR0FBOUM7RUFBbUQsSUFBbkQ7Q0FBQSxNQUFBOztBQUNBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFFQSxHQUFBLEdBQU0sUUFBQSxDQUFFLEtBQUYsRUFBUyxLQUFULENBQUE7U0FDSixLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsSUFBcUI7QUFEakI7O0FBRU4sSUFBQSxHQUFPLFFBQUEsQ0FBRSxLQUFGLENBQUE7U0FDTCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQWQsSUFBeUI7QUFEcEI7O0FBSVAsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxDQUFBLEVBQUE7RUFBRSxDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FBYTtJQUFBLEtBQUEsRUFDZjtNQUFBLEtBQUEsRUFDRTtRQUFBLElBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FERjtNQUdBLElBQUEsRUFDRTtRQUFBLElBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREY7SUFKRjtFQURlLENBQWI7RUFRSixDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FBYTtJQUFBLEtBQUEsRUFDZjtNQUFBLEtBQUEsRUFDRTtRQUFBLEtBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FERjtNQUdBLEtBQUEsRUFDRTtRQUFBLE1BQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFMO01BREYsQ0FKRjtNQU1BLE1BQUEsRUFDRTtRQUFBLEdBQUEsRUFDRTtVQUFBLEdBQUEsRUFBSztRQUFM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LFFBQUEsQ0FBRSxLQUFGLENBQUE7ZUFBYSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsR0FBb0IsQ0FBQSxNQUFNLENBQU47TUFBakM7TUFDSixDQUFBLEdBQUksUUFBQSxDQUFFLEtBQUYsQ0FBQTtRQUFhLE1BQU0sSUFBSSxLQUFKLENBQVUsR0FBVjtNQUFuQjtNQUNKLENBQUEsR0FBSSxNQUFBLFFBQUEsQ0FBRSxLQUFGLENBQUE7ZUFBYSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsSUFBcUIsQ0FBQSxNQUFNLENBQU47TUFBbEM7TUFFSixLQUFBLEdBQVEsR0FBQSxDQUFJLEtBQUEsQ0FBTSxDQUFFLENBQUY7SUFBSyxDQUFMO0lBQVEsQ0FBUixDQUFOLENBQUo7TUFDUixDQUFDLENBQUMsTUFBRixDQUFTLEtBQUssQ0FBQyxPQUFmO01BQ0EsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsSUFBZjtJQUFxQixLQUFLLENBQUMsS0FBM0I7YUFDQSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQVQsQ0FBZSxHQUFmO0lBQW9CLEtBQUssQ0FBQyxhQUExQjtJQVJ1QyxDQUFqQixDQUF4QixDQS9CRjs7QUFyQks7O0FBK0RQLE9BQUE7RUFBUyxJQUFBLFNBQVQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWNoaW5lLCBUYWxvcywgJHN0YXJ0LCAkZW5kLCBzdGFydCwgcnVuLCBwaXBlIH0gZnJvbSBcIi4uLy4uL3NyYy9zeW5jXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuYWRkID0gKCB0YWxvcywgZXZlbnQgKSAtPlxuICB0YWxvcy5jb250ZXh0LnN1bSArPSBldmVudFxuZ3JvdyA9ICggdGFsb3MgKSAtPlxuICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gMlxuXG5cbnRlc3QgPSAtPlxuICBBID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZSBncmFwaDpcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0l0ZXJhdG9yIHN0YXJ0IEFcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyAxLCAyLCAzIF1cbiAgICAgIHRhbG9zID0gcnVuIEEsIHN1bTogMCwgZXZlbnRzXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcz8uY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBydW4gQiwgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwicGlwZSBmdW5jdGlvbmFsIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMlxuICAgICAgYjIgPSAtPiB0aHJvdyBuZXcgRXJyb3IgXCJiMlwiXG4gICAgICBjID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IDNcbiAgICAgIFxuICAgICAgZiA9IHBpcGUgWyBhLCBiLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gZigpXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCBjb250ZXh0Py5zdW1cblxuICAgICAgZyA9IHBpcGUgWyBhLCBiLCBiMiwgYyBdXG4gICAgICB0cnlcbiAgICAgICAgZygpXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcImRpZCBub3QgdGhyb3dcIlxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgaC5hc3NlcnQgZXJyb3IubWVzc2FnZSA9PSBcImIyXCJcblxuICAgIGgudGVzdCBcImhhbmRsZXMgZXJyb3JcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0aHJvdyBuZXcgRXJyb3IgXCJiXCJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgdGFsb3MgPSBydW4gc3RhcnQgWyBhLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IHRhbG9zLmZhaWx1cmVcbiAgICAgIGguYXNzZXJ0LmVxdWFsICRlbmQsIHRhbG9zLnN0YXRlXG4gICAgICBoLmFzc2VydC5lcXVhbCBcImJcIiwgdGFsb3MucHJldmlvdXNTdGF0ZVxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSJdfQ==
 //# sourceURL=test/sync/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc3luYy9iYXNpYy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCwgc3RhcnQsIHJ1biwgcGlwZSB9IGZyb20gXCIuLi8uLi9zcmMvc3luY1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbmFkZCA9ICggdGFsb3MsIGV2ZW50ICkgLT5cbiAgdGFsb3MuY29udGV4dC5zdW0gKz0gZXZlbnRcbmdyb3cgPSAoIHRhbG9zICkgLT5cbiAgdGFsb3MuY29udGV4dC5wcm9kdWN0ICo9IDJcblxuXG50ZXN0ID0gLT5cbiAgQSA9IE1hY2hpbmUubWFrZSBncmFwaDpcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2UgZ3JhcGg6XG4gICAgc3RhcnQ6XG4gICAgICBmaXJzdDogXG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIGZpcnN0OlxuICAgICAgc2Vjb25kOlxuICAgICAgICBydW46IGdyb3dcbiAgICBzZWNvbmQ6IFxuICAgICAgZW5kOlxuICAgICAgICBydW46IGdyb3dcblxuXG4gIFtcbiAgICBoLnRlc3QgXCJzdGFydFwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNJdGVyYXRvciBzdGFydCBBXG5cbiAgICBoLnRlc3QgXCJydW4gd2hpbGUgY29uc3VtaW5nIGV2ZW50c1wiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgMSwgMiwgMyBdXG4gICAgICB0YWxvcyA9IHJ1biBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3M/LmNvbnRleHQ/LnN1bVxuXG4gICAgaC50ZXN0IFwicnVuIHdpdGhvdXQgZXZlbnRzIGFuZCByZWNvbnN1bWUgY29udGV4dFwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcInBpcGUgZnVuY3Rpb25hbCBjb21wb3NpdGlvblwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGEgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gPSAxXG4gICAgICBiID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IDJcbiAgICAgIGIyID0gLT4gdGhyb3cgbmV3IEVycm9yIFwiYjJcIlxuICAgICAgYyA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSAzXG4gICAgICBcbiAgICAgIGYgPSBwaXBlIFsgYSwgYiwgYiwgYyBdXG4gICAgICBoLmFzc2VydCBUeXBlLmlzRnVuY3Rpb24gZlxuICAgICAgY29udGV4dCA9IGYoKVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgY29udGV4dD8uc3VtXG5cbiAgICAgIGcgPSBwaXBlIFsgYSwgYiwgYjIsIGMgXVxuICAgICAgdHJ5XG4gICAgICAgIGcoKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IgXCJkaWQgbm90IHRocm93XCJcbiAgICAgIGNhdGNoIGVycm9yXG4gICAgICAgIGguYXNzZXJ0IGVycm9yLm1lc3NhZ2UgPT0gXCJiMlwiXG5cbiAgICBoLnRlc3QgXCJoYW5kbGVzIGVycm9yXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IGF3YWl0IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGhyb3cgbmV3IEVycm9yIFwiYlwiXG4gICAgICBjID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IGF3YWl0IDMgXG5cbiAgICAgIHRhbG9zID0gcnVuIHN0YXJ0IFsgYSwgYiwgYyBdXG4gICAgICBoLmFzc2VydCB0YWxvcy5mYWlsdXJlXG4gICAgICBoLmFzc2VydC5lcXVhbCAkZW5kLCB0YWxvcy5zdGF0ZVxuICAgICAgaC5hc3NlcnQuZXF1YWwgXCJiXCIsIHRhbG9zLnByZXZpb3VzU3RhdGVcbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXSwibmFtZXMiOlsiYWRkIiwiZ3JvdyIsInRlc3QiLCJNYWNoaW5lIiwiVGFsb3MiLCIkc3RhcnQiLCIkZW5kIiwic3RhcnQiLCJydW4iLCJwaXBlIiwiVHlwZSIsImgiLCJ0YWxvcyIsImV2ZW50IiwiY29udGV4dCIsInN1bSIsInByb2R1Y3QiLCJBIiwiQiIsIm1ha2UiLCJncmFwaCIsImhvbGQiLCJmaXJzdCIsInNlY29uZCIsImVuZCIsInRhcmdldCIsImFzc2VydCIsImlzSXRlcmF0b3IiLCJldmVudHMiLCJyZWYiLCJlcXVhbCIsImEiLCJiIiwiYjIiLCJjIiwiZXJyb3IiLCJmIiwiZyIsIkVycm9yIiwiaXNGdW5jdGlvbiIsImVycm9yMSIsIm1lc3NhZ2UiLCJmYWlsdXJlIiwic3RhdGUiLCJwcmV2aW91c1N0YXRlIiwiYmFzaWMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUFBLEtBQUFDLE1BQUFDO0FBQUEsU0FBU0MsT0FBVCxFQUFrQkMsS0FBbEIsRUFBeUJDLE1BQXpCLEVBQWlDQyxJQUFqQyxFQUF1Q0MsS0FBdkMsRUFBOENDLEdBQTlDLEVBQW1EQyxJQUFuRCxRQUFBLGlCQUFBO0FBQ0EsWUFBT0MsVUFBUCxxQkFBQTtBQUNBLFlBQU9DLE9BQVAsYUFBQTtBQUVBWCxNQUFNLFNBQUVZLEtBQUYsRUFBU0MsS0FBVDtXQUNKRCxNQUFNRSxPQUFPLENBQUNDLEdBQWQsSUFBcUJGO0FBRGpCO0FBRU5aLE9BQU8sU0FBRVcsS0FBRjtXQUNMQSxNQUFNRSxPQUFPLENBQUNFLE9BQWQsSUFBeUI7QUFEcEI7QUFJUGQsT0FB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