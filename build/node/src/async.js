"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Step: function() {
        return Step;
    },
    start: function() {
        return start;
    },
    run: function() {
        return run;
    },
    build: function() {
        return build;
    },
    flow: function() {
        return flow;
    }
});
const _generic = require("@dashkite/joy/generic");
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _kaiko = /*#__PURE__*/ _interop_require_default(require("@dashkite/kaiko"));
const _machine = require("./machine");
const _talos = require("./talos");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var Step, build, flow, run, start;
Step = {
    matchVertex: function(talos) {
        var vertex;
        vertex = talos.machine.graph[talos.state];
        if (vertex == null) {
            talos.catch(new Error("talos state is not in machine graph"));
        }
        return vertex;
    },
    matchEdge: async function(vertex, talos, event) {
        var edge, error, i, len, ref;
        ref = vertex.edges;
        for(i = 0, len = ref.length; i < len; i++){
            edge = ref[i];
            try {
                if (await edge.when(talos, event) === true) {
                    return edge;
                }
            } catch (error1) {
                error = error1;
                return talos.catch(error);
            }
        }
        return talos.catch(new Error("no matching when condition"));
    },
    run: async function(edge, talos, event) {
        var error;
        if (edge.run != null) {
            try {
                return await edge.run(talos, event);
            } catch (error1) {
                error = error1;
                return talos.catch(error);
            }
        }
    },
    move: async function(edge, talos, event) {
        var error;
        try {
            return await edge.move(talos, event);
        } catch (error1) {
            error = error1;
            return talos.catch(error);
        }
    },
    step: async function(talos, event) {
        var edge, vertex;
        console.log("new event", {
            event
        });
        vertex = Step.matchVertex(talos);
        if (talos.ended) {
            return talos;
        }
        edge = await Step.matchEdge(vertex, talos, event);
        if (talos.ended) {
            return talos;
        }
        await Step.run(edge, talos, event);
        if (talos.ended) {
            return talos;
        }
        await Step.move(edge, talos, event);
        return talos;
    },
    generator: async function*() {
        while(true){
            await Step.step(this, (yield));
            if (this.ended) {
                return this;
            }
        }
    }
};
start = function(machine) {
    var talos;
    talos = _talos.Talos.make(machine);
    talos.generator = Step.generator.bind(talos);
    talos.cycle = talos.generator();
    talos.cycle.next();
    return talos;
};
run = (0, _generic.generic)({
    name: "talos: run",
    default: function(...args) {
        throw new Error(`talos run: input is malformed ${JSON.stringify(args)}`);
    }
});
(0, _generic.generic)(run, _type.isObject, function(machine) {
    var talos;
    talos = start(machine);
    return run(talos, talos.context);
});
(0, _generic.generic)(run, _talos.Talos.isType, function(talos) {
    return run(talos, talos.context);
});
(0, _generic.generic)(run, _type.isObject, _type.isAny, function(machine, context) {
    var talos;
    talos = start(machine);
    return run(talos, context);
});
(0, _generic.generic)(run, _talos.Talos.isType, _type.isAny, async function(talos, context) {
    talos.context = context;
    while(true){
        await talos.cycle.next(talos.context);
        console.log("event processed", talos.state, talos.context);
        if (talos.ended) {
            break;
        }
    }
    if (talos.error != null) {
        console.error(talos.error);
    }
    return talos;
});
(0, _generic.generic)(run, _type.isObject, _type.isAny, _type.isIterable, function(machine, context, events) {
    var talos;
    talos = start(machine);
    return run(talos, context, events);
});
(0, _generic.generic)(run, _talos.Talos.isType, _type.isAny, _type.isIterable, async function(talos, context, events) {
    var event;
    talos.context = context;
    for await (event of events){
        await talos.cycle.next(event);
        console.log("event processed", talos.state, talos.context);
        if (talos.ended) {
            break;
        }
    }
    if (talos.error != null) {
        console.error(talos.error);
    }
    return talos;
});
build = function(talos) {
    return function(...args) {
        return run(talos, ...args);
    };
};
flow = function(fx) {
    var machine;
    machine = _machine.Machine.make(fx);
    return async function(context) {
        var talos;
        talos = start(machine);
        await run(talos, context);
        return talos.context;
    };
};
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy9zcmMvYXN5bmMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sR0FBUCxNQUFBOztBQUNBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsS0FBVDtDQUFBLE1BQUE7O0FBR0EsSUFBQSxHQUNFO0VBQUEsV0FBQSxFQUFhLFFBQUEsQ0FBRSxLQUFGLENBQUE7QUFDZixRQUFBO0lBQUksTUFBQSxHQUFTLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFFLEtBQUssQ0FBQyxLQUFSO0lBQzVCLElBQUksY0FBSjtNQUNFLEtBQUssQ0FBQyxLQUFOLENBQVksSUFBSSxLQUFKLENBQVUscUNBQVYsQ0FBWixFQURGOztXQUVBO0VBSlcsQ0FBYjtFQU1BLFNBQUEsRUFBVyxNQUFBLFFBQUEsQ0FBRSxNQUFGLEVBQVUsS0FBVixFQUFpQixLQUFqQixDQUFBO0FBQ2IsUUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7QUFBSTtJQUFBLEtBQUEscUNBQUE7O0FBQ0U7UUFDRSxJQUFHLENBQUUsQ0FBQSxNQUFNLElBQUksQ0FBQyxJQUFMLENBQVUsS0FBVixFQUFpQixLQUFqQixDQUFOLENBQUYsQ0FBQSxLQUFvQyxJQUF2QztBQUNFLGlCQUFPLEtBRFQ7U0FERjtPQUdBLGNBQUE7UUFBTTtBQUNKLGVBQU8sS0FBSyxDQUFDLEtBQU4sQ0FBWSxLQUFaLEVBRFQ7O0lBSkY7V0FNQSxLQUFLLENBQUMsS0FBTixDQUFZLElBQUksS0FBSixDQUFVLDRCQUFWLENBQVo7RUFQUyxDQU5YO0VBZUEsR0FBQSxFQUFLLE1BQUEs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LEtBQUYsRUFBUyxPQUFULEVBQWtCLE1BQWxCLENBQUE7QUFDeEQsTUFBQTtFQUFFLEtBQUssQ0FBQyxPQUFOLEdBQWdCO0VBQ2hCLDJCQUFBO0lBQ0UsTUFBTSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQVosQ0FBaUIsS0FBakI7SUFDTixPQUFPLENBQUMsR0FBUixDQUFZLGlCQUFaLEVBQStCLEtBQUssQ0FBQyxLQUFyQyxFQUE0QyxLQUFLLENBQUMsT0FBbEQ7SUFDQSxJQUFTLEtBQUssQ0FBQyxLQUFmO0FBQUEsWUFBQTs7RUFIRjtFQUlBLElBQUcsbUJBQUg7SUFDRSxPQUFPLENBQUMsS0FBUixDQUFjLEtBQUssQ0FBQyxLQUFwQixFQURGOztTQUVBO0FBUnNELENBQXhEOztBQVlBLEtBQUEsR0FBUSxRQUFBLENBQUUsS0FBRixDQUFBO1NBQ04sUUFBQSxDQUFBLEdBQUUsSUFBRixDQUFBO1dBQWUsR0FBQSxDQUFJLEtBQUosRUFBVyxHQUFBLElBQVg7RUFBZjtBQURNOztBQUdSLElBQUEsR0FBTyxRQUFBLENBQUUsRUFBRixDQUFBO0FBQ1AsTUFBQTtFQUFFLE9BQUEsR0FBVSxPQUFPLENBQUMsSUFBUixDQUFhLEVBQWI7U0FDVixNQUFBLFFBQUEsQ0FBRSxPQUFGLENBQUE7QUFDRixRQUFBO0lBQUksS0FBQSxHQUFRLEtBQUEsQ0FBTSxPQUFOO0lBQ1IsTUFBTSxHQUFBLENBQUksS0FBSixFQUFXLE9BQVg7V0FDTixLQUFLLENBQUM7RUFIUjtBQUZLOztBQVFQLE9BQUE7RUFDRSxJQURGO0VBRUUsS0FGRjtFQUdFLEdBSEY7RUFJRSxLQUpGO0VBS0UsSUFMRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgbG9nIGZyb20gXCJAZGFzaGtpdGUva2Fpa29cIlxuaW1wb3J0IHsgTWFjaGluZSB9IGZyb20gXCIuL21hY2hpbmVcIlxuaW1wb3J0IHsgVGFsb3MgfSBmcm9tIFwiLi90YWxvc1wiXG5cblxuU3RlcCA9XG4gIG1hdGNoVmVydGV4OiAoIHRhbG9zICkgLT5cbiAgICB2ZXJ0ZXggPSB0YWxvcy5tYWNoaW5lLmdyYXBoWyB0YWxvcy5zdGF0ZSBdXG4gICAgaWYgIXZlcnRleD9cbiAgICAgIHRhbG9zLmNhdGNoIG5ldyBFcnJvciBcInRhbG9zIHN0YXRlIGlzIG5vdCBpbiBtYWNoaW5lIGdyYXBoXCJcbiAgICB2ZXJ0ZXhcblxuICBtYXRjaEVkZ2U6ICggdmVydGV4LCB0YWxvcywgZXZlbnQgKSAtPlxuICAgIGZvciBlZGdlIGluIHZlcnRleC5lZGdlc1xuICAgICAgdHJ5XG4gICAgICAgIGlmICggYXdhaXQgZWRnZS53aGVuIHRhbG9zLCBldmVudCApID09IHRydWVcbiAgICAgICAgICByZXR1cm4gZWRnZVxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgcmV0dXJuIHRhbG9zLmNhdGNoIGVycm9yXG4gICAgdGFsb3MuY2F0Y2ggbmV3IEVycm9yIFwibm8gbWF0Y2hpbmcgd2hlbiBjb25kaXRpb25cIlxuXG4gIHJ1bjogKCBlZGdlLCB0YWxvcywgZXZlbnQgKSAtPlxuICAgIGlmIGVkZ2UucnVuP1xuICAgICAgdHJ5XG4gICAgICAgIGF3YWl0IGVkZ2UucnVuIHRhbG9zLCBldmVudFxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgdGFsb3MuY2F0Y2ggZXJyb3JcblxuICBtb3ZlOiAoIGVkZ2UsIHRhbG9zLCBldmVudCApIC0+XG4gICAgdHJ5XG4gICAgICBhd2FpdCBlZGdlLm1vdmUgdGFsb3MsIGV2ZW50XG4gICAgY2F0Y2ggZXJyb3JcbiAgICAgIHRhbG9zLmNhdGNoIGVycm9yXG5cbiAgc3RlcDogKCB0YWxvcywgZXZlbnQgKSAtPlxuICAgIGNvbnNvbGUubG9nIFwibmV3IGV2ZW50XCIsIHsgZXZlbnQgfVxuICAgIHZlcnRleCA9IFN0ZXAubWF0Y2hWZXJ0ZXggdGFsb3NcbiAgICByZXR1cm4gdGFsb3MgaWYgdGFsb3MuZW5kZWRcblxuICAgIGVkZ2UgPSBhd2FpdCBTdGVwLm1hdGNoRWRnZSB2ZXJ0ZXgsIHRhbG9zLCBldmVudFxuICAgIHJldHVybiB0YWxvcyBpZiB0YWxvcy5lbmRlZFxuXG4gICAgYXdhaXQgU3RlcC5ydW4gZWRnZSwgdGFsb3MsIGV2ZW50XG4gICAgcmV0dXJuIHRhbG9zIGlmIHRhbG9zLmVuZGVkXG5cbiAgICBhd2FpdCBTdGVwLm1vdmUgZWRnZSwgdGFsb3MsIGV2ZW50XG4gICAgdGFsb3NcblxuICBnZW5lcmF0b3I6IC0+XG4gICAgbG9vcFxuICAgICAgYXdhaXQgU3RlcC5zdGVwIEAsIHlpZWxkXG4gICAgICByZXR1cm4gQCBpZiBAZW5kZWRcblxuXG5zdGFydCA9ICggbWFjaGluZSApIC0+XG4gIHRhbG9zID0gVGFsb3MubWFrZSBtYWNoaW5lXG4gIHRhbG9zLmdlbmVyYXRvciA9IFN0ZXAuZ2VuZXJhdG9yLmJpbmQgdGFsb3NcbiAgdGFsb3MuY3ljbGUgPSB0YWxvcy5nZW5lcmF0b3IoKVxuICB0YWxvcy5jeWNsZS5uZXh0KClcbiAgdGFsb3NcblxuXG5ydW4gPSBnZW5lcmljIFxuICBuYW1lOiBcInRhbG9zOiBydW5cIlxuICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJ0YWxvcyBydW46IGlucHV0IGlzIG1hbGZvcm1lZCAjeyBKU09OLnN0cmluZ2lmeSBhcmdzIH1cIlxuXG5nZW5lcmljIHJ1biwgVHlwZS5pc09iamVjdCwgKCBtYWNoaW5lICkgLT5cbiAgdGFsb3MgPSBzdGFydCBtYWNoaW5lXG4gIHJ1biB0YWxvcywgdGFsb3MuY29udGV4dFxuXG5nZW5lcmljIHJ1biwgVGFsb3MuaXNUeXBlLCAoIHRhbG9zICkgLT5cbiAgcnVuIHRhbG9zLCB0YWxvcy5jb250ZXh0XG5cbmdlbmVyaWMgcnVuLCBUeXBlLmlzT2JqZWN0LCBUeXBlLmlzQW55LCAoIG1hY2hpbmUsIGNvbnRleHQgKSAtPlxuICB0YWxvcyA9IHN0YXJ0IG1hY2hpbmVcbiAgcnVuIHRhbG9zLCBjb250ZXh0XG5cbmdlbmVyaWMgcnVuLCBUYWxvcy5pc1R5cGUsIFR5cGUuaXNBbnksICggdGFsb3MsIGNvbnRleHQgKSAtPlxuICB0YWxvcy5jb250ZXh0ID0gY29udGV4dFxuICBsb29wXG4gICAgYXdhaXQgdGFsb3MuY3ljbGUubmV4dCB0YWxvcy5jb250ZXh0XG4gICAgY29uc29sZS5sb2cgXCJldmVudCBwcm9jZXNzZWRcIiwgdGFsb3Muc3RhdGUsIHRhbG9zLmNvbnRleHRcbiAgICBicmVhayBpZiB0YWxvcy5lbmRlZFxuICBpZiB0YWxvcy5lcnJvcj9cbiAgICBjb25zb2xlLmVycm9yIHRhbG9zLmVycm9yXG4gIHRhbG9zXG5cbmdlbmVyaWMgcnVuLCBUeXBlLmlzT2JqZWN0LCBUeXBlLmlzQW55LCBUeXBlLmlzSXRlcmFibGUsICggbWFjaGluZSwgY29udGV4dCwgZXZlbnRzICkgLT5cbiAgdGFsb3MgPSBzdGFydCBtYWNoaW5lXG4gIHJ1biB0YWxvcywgY29udGV4dCwgZXZlbnRzXG5cbmdlbmVyaWMgcnVuLCBUYWxvcy5pc1R5cGUsIFR5cGUuaXNBbnksIFR5cGUuaXNJdGVyYWJsZSwgKCB0YWxvcywgY29udGV4dCwgZXZlbnRzICkgLT5cbiAgdGFsb3MuY29udGV4dCA9IGNvbnRleHRcbiAgZm9yIGF3YWl0IGV2ZW50IGZyb20gZXZlbnRzXG4gICAgYXdhaXQgdGFsb3MuY3ljbGUubmV4dCBldmVudFxuICAgIGNvbnNvbGUubG9nIFwiZXZlbnQgcHJvY2Vzc2VkXCIsIHRhbG9zLnN0YXRlLCB0YWxvcy5jb250ZXh0XG4gICAgYnJlYWsgaWYgdGFsb3MuZW5kZWRcbiAgaWYgdGFsb3MuZXJyb3I/XG4gICAgY29uc29sZS5lcnJvciB0YWxvcy5lcnJvclxuICB0YWxvc1xuXG5cblxuYnVpbGQgPSAoIHRhbG9zICkgLT5cbiAgKCBhcmdzLi4uICkgLT4gcnVuIHRhbG9zLCBhcmdzLi4uXG5cbmZsb3cgPSAoIGZ4ICkgLT5cbiAgbWFjaGluZSA9IE1hY2hpbmUubWFrZSBmeFxuICAoIGNvbnRleHQgKSAtPiBcbiAgICB0YWxvcyA9IHN0YXJ0IG1hY2hpbmVcbiAgICBhd2FpdCBydW4gdGFsb3MsIGNvbnRleHRcbiAgICB0YWxvcy5jb250ZXh0XG5cblxuZXhwb3J0IHtcbiAgU3RlcCAgXG4gIHN0YXJ0XG4gIHJ1blxuICBidWlsZFxuICBmbG93XG59Il19
 //# sourceURL=/@dashkite/talos/src/async.coffee

//# sourceMappingURL=data:application/json;base64,