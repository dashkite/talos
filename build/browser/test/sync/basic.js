var add, grow, test;
import { Machine, Talos, $start, $end, start, run, pipe } from "../../src/sync";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        h.test("start", h.target("sync", function() {
            return h.assert(Type.isIterator(start(A)));
        })),
        h.test("run while consuming events", h.target("sync", function() {
            var events, ref, talos;
            events = [
                1,
                2,
                3
            ];
            talos = run(A, {
                sum: 0
            }, events);
            return h.assert.equal(6, talos != null ? (ref = talos.context) != null ? ref.sum : void 0 : void 0);
        })),
        h.test("run without events and reconsume context", h.target("sync", function() {
            var ref, talos;
            talos = run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("pipe functional composition", h.target("sync", function() {
            var a, b, b2, c, context, error, f, g;
            a = function(talos) {
                return talos.context.sum = 1;
            };
            b = function(talos) {
                return talos.context.sum += 2;
            };
            b2 = function() {
                throw new Error("b2");
            };
            c = function(talos) {
                return talos.context.sum += 3;
            };
            f = pipe([
                a,
                b,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = f();
            h.assert.equal(8, context != null ? context.sum : void 0);
            g = pipe([
                a,
                b,
                b2,
                c
            ]);
            try {
                g();
                throw new Error("did not throw");
            } catch (error1) {
                error = error1;
                return h.assert(error.message === "b2");
            }
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9zeW5jL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsS0FBbEI7RUFBeUIsTUFBekI7RUFBaUMsSUFBakM7RUFDRSxLQURGO0VBQ1MsR0FEVDtFQUNjLElBRGQ7Q0FBQSxNQUFBOztBQUVBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFFQSxHQUFBLEdBQU0sUUFBQSxDQUFFLEtBQUYsRUFBUyxLQUFULENBQUE7U0FDSixLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsSUFBcUI7QUFEakI7O0FBRU4sSUFBQSxHQUFPLFFBQUEsQ0FBRSxLQUFGLENBQUE7U0FDTCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQWQsSUFBeUI7QUFEcEI7O0FBSVAsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxDQUFBLEVBQUE7RUFBRSxDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FDRjtJQUFBLEtBQUEsRUFDRTtNQUFBLElBQUEsRUFDRTtRQUFBLEdBQUEsRUFBSztNQUFMO0lBREYsQ0FERjtJQUdBLElBQUEsRUFDRTtNQUFBLElBQUEsRUFDRTtRQUFBLEdBQUEsRUFBSztNQUFMO0lBREY7RUFKRixDQURFO0VBUUosQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQ0Y7SUFBQSxLQUFBLEVBQ0U7TUFBQSxLQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBREY7SUFHQSxLQUFBLEVBQ0U7TUFBQSxNQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBSkY7SUFNQSxNQUFBLEVBQ0U7TUFBQSxHQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGO0VBUEYsQ0FERTtTQVlKO0lBQ0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxPQUFQO0lBQWdCLENBQUMsQ0FBQyxNQUFGLENBQVMsTUFBVDtJQUFpQixRQUFBLENBQUEsQ0FBQTthQUMvQixDQUFDLENBQUMsTUFBRixDQUFTLElBQUksQ0FBQyxVQUFMLENBQWdCLEtBQUEsQ0FBTSxDQUFOLENBQWhCLENBQVQ7SUFEK0IsQ0FBakIsQ0FBaEIsQ0FERjtJQUlFLENBQUMsQ0FBQyxJQUFGLENBQU8sNEJBQVA7SUFBcUMsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxNQUFUO0lBQWlCLFFBQUEsQ0FBQSxDQUFBO0FBQzFELFVBQUEsTUFBQTtJQUFBLEdBQUE7SUFBQTtNQUFNLE1BQUEsR0FBUyxDQUFFLENBQUY7SUFBSyxDQUFMO0lBQVEsQ0FBUjtNQUNULEtBQUEsR0FBUSxHQUFBLENBQUksQ0FBSjtJQUFPO1FBQUEsR0FBQSxFQUFLO01BQUwsQ0FBUDtJQUFlLE1BQWY7YUFDUixDQUFDLENBQUMsTUFBTSxDQUFDLEtBQVQsQ0FBZSxDQUFmO3VEQUFnQyxDQUFFLHFCQUFsQztJQUhvRCxDQUFqQixDQUFyQyxDQUpGO0lBU0UsQ0FBQyxDQUFDLElBQUYsQ0FBTywwQ0FBUDtJQUFtRCxDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQ7SUFBaUIsUUFBQSxDQUFBLENBQUE7QUFDeEUsVUFBQSxHQUFBO0lBQUE7TUFBTSxLQUFBLEdBQVEsR0FBQSxDQUFJLENBQUo7SUFBTztRQUFBLE9BQUEsRUFBUztNQUFULENBQVA7YUFDUixDQUFDLENBQUMsTUFBTSxDQUFDLEtBQVQsQ0FBZSxDQUFmO3VDQUErQixDQUFFLGdCQUFqQztJQUZrRSxDQUFqQixDQUFuRCxDQVRGO0lBYUUsQ0FBQyxDQUFDLElBQUYsQ0FBTyw2QkFBUDtJQUFzQyxDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQ7SUFBaUIsUUFBQSxDQUFBLENBQUE7QUFDM0QsVUFBQSxDQUFBO0lBQUEsQ0FBQTtJQUFBLEVBQUE7SUFBQSxDQUFBO0lBQUEsT0FBQTtJQUFBLEtBQUE7SUFBQSxDQUFBO0lBQUE7TUFBTSxDQUFBLEdBQUksUUFBQSxDQUFFLEtBQUYsQ0FBQTtlQUFhLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBZCxHQUFvQjtNQUFqQztNQUNKLENBQUEsR0FBSSxRQUFBLENBQUUsS0FBRixDQUFBO2VBQWEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFkLElBQXFCO01BQWxDO01BQ0osRUFBQSxHQUFLLFFBQUEsQ0FBQSxDQUFBO1FBQUcsTUFBTSxJQUFJLEtBQUosQ0FBVSxJQUFWO01BQVQ7TUFDTCxDQUFBLEdBQUksUUFBQSxDQUFFLEtBQUYsQ0FBQTtlQUFhLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBZCxJQUFxQjtNQUFsQztNQUVKLENBQUEsR0FBSSxJQUFBLENBQUssQ0FBRSxDQUFGO0lBQUssQ0FBTDtJQUFRLENBQVI7SUFBVyxDQUFYLENBQUw7TUFDSixDQUFDLENBQUMsTUFBRixDQUFTLElBQUksQ0FBQyxVQUFMLENBQWdCLENBQWhCLENBQVQ7TUFDQSxPQUFBLEdBQVUsQ0FBQSxDQUFBO01BQ1YsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsQ0FBZjtzQkFBa0IsT0FBTyxDQUFFLFlBQTNCO01BRUEsQ0FBQSxHQUFJLElBQUEsQ0FBSyxDQUFFLENBQUY7SUFBSyxDQUFMO0lBQVEsRUFBUjtJQUFZLENBQVosQ0FBTDtBQUNKO1FBQ0UsQ0FBQSxDQUFBO1FBQ0EsTUFBTSxJQUFJLEtBQUosQ0FBVSxlQUFWLEVBRlI7T0FHQSxjQUFBO1FBQU07ZUFDSixDQUFDLENBQUMsTUFBRixDQUFTLEtBQUssQ0FBQyxPQUFOLEtBQWlCLElBQTFCLEVBREY7O0lBZnFELENBQWpCLENBQXRDLENBYkY7O0FBckJLOztBQXFEUCxPQUFBO0VBQVMsSUFBQSxTQUFUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCwgXG4gIHN0YXJ0LCBydW4sIHBpcGUgfSBmcm9tIFwiLi4vLi4vc3JjL3N5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0l0ZXJhdG9yIHN0YXJ0IEFcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyAxLCAyLCAzIF1cbiAgICAgIHRhbG9zID0gcnVuIEEsIHN1bTogMCwgZXZlbnRzXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcz8uY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBydW4gQiwgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwicGlwZSBmdW5jdGlvbmFsIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMlxuICAgICAgYjIgPSAtPiB0aHJvdyBuZXcgRXJyb3IgXCJiMlwiXG4gICAgICBjID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IDNcbiAgICAgIFxuICAgICAgZiA9IHBpcGUgWyBhLCBiLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gZigpXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCBjb250ZXh0Py5zdW1cblxuICAgICAgZyA9IHBpcGUgWyBhLCBiLCBiMiwgYyBdXG4gICAgICB0cnlcbiAgICAgICAgZygpXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcImRpZCBub3QgdGhyb3dcIlxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgaC5hc3NlcnQgZXJyb3IubWVzc2FnZSA9PSBcImIyXCJcbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXX0=
 //# sourceURL=test/sync/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc3luYy9iYXNpYy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCwgXG4gIHN0YXJ0LCBydW4sIHBpcGUgfSBmcm9tIFwiLi4vLi4vc3JjL3N5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0l0ZXJhdG9yIHN0YXJ0IEFcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyAxLCAyLCAzIF1cbiAgICAgIHRhbG9zID0gcnVuIEEsIHN1bTogMCwgZXZlbnRzXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcz8uY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBydW4gQiwgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwicGlwZSBmdW5jdGlvbmFsIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gMlxuICAgICAgYjIgPSAtPiB0aHJvdyBuZXcgRXJyb3IgXCJiMlwiXG4gICAgICBjID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IDNcbiAgICAgIFxuICAgICAgZiA9IHBpcGUgWyBhLCBiLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gZigpXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCBjb250ZXh0Py5zdW1cblxuICAgICAgZyA9IHBpcGUgWyBhLCBiLCBiMiwgYyBdXG4gICAgICB0cnlcbiAgICAgICAgZygpXG4gICAgICAgIHRocm93IG5ldyBFcnJvciBcImRpZCBub3QgdGhyb3dcIlxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgaC5hc3NlcnQgZXJyb3IubWVzc2FnZSA9PSBcImIyXCJcbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXSwibmFtZXMiOlsiYWRkIiwiZ3JvdyIsInRlc3QiLCJNYWNoaW5lIiwiVGFsb3MiLCIkc3RhcnQiLCIkZW5kIiwic3RhcnQiLCJydW4iLCJwaXBlIiwiVHlwZSIsImgiLCJ0YWxvcyIsImV2ZW50IiwiY29udGV4dCIsInN1bSIsInByb2R1Y3QiLCJBIiwiQiIsIm1ha2UiLCJob2xkIiwiZmlyc3QiLCJzZWNvbmQiLCJlbmQiLCJ0YXJnZXQiLCJhc3NlcnQiLCJpc0l0ZXJhdG9yIiwiZXZlbnRzIiwicmVmIiwiZXF1YWwiLCJhIiwiYiIsImIyIiwiYyIsImVycm9yIiwiZiIsImciLCJFcnJvciIsImlzRnVuY3Rpb24iLCJlcnJvcjEiLCJtZXNzYWdlIiwiYmFzaWMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUFBLEtBQUFDLE1BQUFDO0FBQUEsU0FBU0MsT0FBVCxFQUFrQkMsS0FBbEIsRUFBeUJDLE1BQXpCLEVBQWlDQyxJQUFqQyxFQUNFQyxLQURGLEVBQ1NDLEdBRFQsRUFDY0MsSUFEZCxRQUFBLGlCQUFBO0FBRUEsWUFBT0MsVUFBUCxxQkFBQTtBQUNBLFlBQU9DLE9BQVAsYUFBQTtBQUVBWCxNQUFNLFNBQUVZLEtBQUYsRUFBU0MsS0FBVDtXQUNKRCxNQUFNRSxPQUFPLENBQUNDLEdBQWQsSUFBcUJGO0FBRGpCO0FBRU5aLE9BQU8sU0FBRVcsS0FBRjtXQUNMQSxNQUFNRSxPQUFPLENBQUNFLE9BQWQsSUFBeUI7QUFEcEI7QUFJUGQsT0FBTztJQUNQLElBQUFlLEdBQUFDO0lBQUVELElBQUlkLFFBQVFnQixJQUFSLENBQ0Y7UUFBQVosT0FDRTtZQUFBYSxNQUNFO2dCQUFBWixLQUFLUjtZQUFMO1FBREY7UUFFRm9CLE1BQ0U7WUFBQUEsTUFDRTtnQkFBQVosS0FBS1I7WUFBTDtRQURGO0lBSkY7SUFPRmtCLElBQUlmLFFBQVFnQixJQUFSLENBQ0Y7UUFBQVosT0FDRTtZQUFBYyxPQUNFO2dCQUFBYixLQUFLUDtZQUFMO1FBREY7UUFFRm9CLE9BQ0U7WUFBQUMsUUFDRTtnQkFBQWQsS0FBS1A7WUFBTDtRQURGO1FBRUZxQixRQUNFO1lBQUFDLEtBQ0U7Z0JBQUFmLEtBQUtQO1lBQUw7UUFERjtJQVBGO1dBV0Y7UUFDRVUsRUFBRVQsSUFBRixDQUFPLFNBQVNTLEVBQUVhLE1BQUYsQ0FBUyxRQUFRO21CQUMvQmIsRUFBRWMsTUFBRixDQUFTZixLQUFLZ0IsVUFBTCxDQUFnQm5CLE1BQU1VO1FBREE7UUFHakNOLEVBQUVULElBQUYsQ0FBTyw4QkFBOEJTLEVBQUVhLE1BQUYsQ0FBUyxRQUFRO1lBQzFELElBQUFHLFFBQUFDLEtBQUFoQjtZQUFNZSxTQUFTO2dCQUFFO2dCQUFHO2dCQUFHO2FBQVI7WUFDVGYsUUFBUUosSUFBSVMsR0FBRztnQkFBQUYsS0FBSztZQUFMLEdBQVFZO21CQUN2QmhCLEVBQUVjLE1BQU0sQ0FBQ0ksS0FBVCxDQUFlLHVEQUFtQmQsR0FBQSxHQUFBLEtBQUEsSUFBQSxLQUFBO1FBSGtCO1FBS3RESixFQUFFVCxJQUFGLENBQU8sNENBQTRDUyxFQUFFYSxNQUFGLENBQVMsUUFBUTtZQUN4RSxJQUFBSSxLQUFBaEI7WUFBTUEsUUFBUUosSUFBSVUsR0FBRztnQkFBQUYsU0FBUztZQUFUO21CQUNmTCxFQUFFYyxNQUFNLENBQUNJLEtBQVQsQ0FBZSx1Q0FBa0JiLE9BQUEsR0FBQSxLQUFBO1FBRmlDO1FBSXBFTCxFQUFFVCxJQUFGLENBQU8sK0JBQStCUyxFQUFFYSxNQUFGLENBQVMsUUFBUTtZQUMzRCxJQUFBTSxHQUFBQyxHQUFBQyxJQUFBQyxHQUFBbkIsU0FBQW9CLE9BQUFDLEdBQUFDO1lBQU1OLElBQUksU0FBRWxCLEtBQUY7dUJBQWFBLE1BQU1FLE9BQU8sQ0FBQ0MsR0FBZCxHQUFvQjtZQUFqQztZQUNKZ0IsSUFBSSxTQUFFbkIsS0FBRjt1QkFBYUEsTUFBTUUsT0FBTyxDQUFDQyxHQUFkLElBQXFCO1lBQWxDO1lBQ0ppQixLQUFLO2dCQUFHLE1BQU0sSUFBSUssTUFBTTtZQUFuQjtZQUNMSixJQUFJLFNBQUVyQixLQUFGO3VCQUFhQSxNQUFNRSxPQUFPLENBQUNDLEdBQWQsSUFBcUI7WUFBbEM7WUFFSm9CLElBQUkxQixLQUFLO2dCQUFFcUI7Z0JBQUdDO2dCQUFHQTtnQkFBR0U7YUFBaEI7WUFDSnRCLEVBQUVjLE1BQUYsQ0FBU2YsS0FBSzRCLFVBQUwsQ0FBZ0JIO1lBQ3pCckIsVUFBVXFCO1lBQ1Z4QixFQUFFYyxNQUFNLENBQUNJLEtBQVQsQ0FBZSxxQkFBR2YsUUFBU0MsR0FBQSxHQUFBLEtBQUE7WUFFM0JxQixJQUFJM0IsS0FBSztnQkFBRXFCO2dCQUFHQztnQkFBR0M7Z0JBQUlDO2FBQWpCO1lBQ0osSUFBQTtnQkFDRUc7Z0JBQ0EsTUFBTSxJQUFJQyxNQUFNO2NBQ2xCLE9BQUFFLFFBQUE7Z0JBQU1MLFFBQUFLO3VCQUNKNUIsRUFBRWMsTUFBRixDQUFTUyxNQUFNTSxPQUFOLEtBQWlCOztRQWhCeUI7O0FBbENwRDtBQXFEUCxTQUFTdEMsUUFBQXVDLEtBQVQifQ==