"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    step: function() {
        return step;
    },
    debug: function() {
        return debug;
    },
    matchVertex: function() {
        return matchVertex;
    },
    matchEdge: function() {
        return matchEdge;
    },
    run: function() {
        return run;
    },
    move: function() {
        return move;
    }
});
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _predicate = require("@dashkite/joy/predicate");
const _generic = require("@dashkite/joy/generic");
const _containers = require("../containers");
const _errors = /*#__PURE__*/ _interop_require_wildcard(require("../containers/errors"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var _debug, _step, debug, matchEdge, matchVertex, move, run, step;
matchVertex = function(graph, talos) {
    var vertex;
    vertex = graph.get(talos);
    if (vertex == null) {
        talos.throw(_errors.InvalidState.make("talos state is not in graph"));
    }
    return vertex;
};
matchEdge = function(vertex, talos, transforms) {
    var edge, i, len, ref;
    ref = vertex.edges;
    for(i = 0, len = ref.length; i < len; i++){
        edge = ref[i];
        if (edge.accept(talos, ...transforms) === true) {
            return edge;
        }
    }
};
run = function(edge, talos, transforms) {
    var error;
    if (edge.run != null) {
        try {
            return edge.run(talos, ...transforms);
        } catch (error1) {
            error = error1;
            return talos.throw(_errors.FailedRun.make(error, "encountered an error while running edge function"));
        }
    }
};
move = function(edge, talos, transforms) {
    var error;
    try {
        return edge.move(talos, ...transforms);
    } catch (error1) {
        error = error1;
        return talos.throw(_errors.FailedMove.make(error, "encountered an error while moving states"));
    }
};
step = (0, _generic.generic)({
    name: "step talos",
    default: function(...args) {
        throw new Error(`step: input is malformed ${JSON.stringify(args)}`);
    }
});
(0, _generic.generic)(step, _containers.Graph.isType, _containers.Talos.isType, _type.isAny, function(graph, talos, ...transforms) {
    return _step(graph, talos, transforms);
});
(0, _generic.generic)(step, _containers.Graph.isType, _containers.Talos.isType, function(graph, talos) {
    return _step(graph, talos, []);
});
(0, _generic.generic)(step, _containers.Graph.isType, (0, _predicate.negate)(_containers.Talos.isType), function(graph, ...transforms) {
    return _step(graph, _containers.Talos.make(), ...transforms);
});
_step = function(graph, talos, transforms) {
    var edge, vertex;
    vertex = matchVertex(graph, talos);
    if (talos.halted) {
        return talos;
    }
    edge = matchEdge(vertex, talos, transforms);
    if (edge == null) {
        return talos;
    }
    if (talos.halted) {
        return talos;
    }
    run(edge, talos, transforms);
    if (talos.halted) {
        return talos;
    }
    move(edge, talos, transforms);
    return talos;
};
debug = (0, _generic.generic)({
    name: "debug step talos",
    default: function(...args) {
        throw new Error(`debug step: input is malformed ${JSON.stringify(args)}`);
    }
});
(0, _generic.generic)(debug, _containers.Graph.isType, _containers.Talos.isType, _type.isAny, function(graph, talos, ...transforms) {
    return _debug(graph, talos, transforms);
});
(0, _generic.generic)(debug, _containers.Graph.isType, _containers.Talos.isType, function(graph, talos) {
    return _debug(graph, talos, []);
});
(0, _generic.generic)(debug, _containers.Graph.isType, (0, _predicate.negate)(_containers.Talos.isType), function(graph, ...transforms) {
    return _debug(graph, _containers.Talos.make(), transforms);
});
_debug = function(graph, talos, transforms) {
    var edge, vertex;
    console.log("starting step", {
        graph,
        talos,
        transforms
    });
    vertex = matchVertex(graph, talos);
    if (talos.halted) {
        console.error("encountered error matching vertex", talos.error.error, talos);
        return talos;
    } else {
        console.log("vertex matched", {
            vertex,
            talos
        });
    }
    edge = matchEdge(vertex, talos, transforms);
    if (edge == null) {
        console.log("no edge match, ignoring transforms");
        return talos;
    }
    if (talos.halted) {
        console.error("encountered error matching edge", talos.error.error, talos);
        return talos;
    } else {
        console.log("edge matched", {
            edge,
            talos
        });
    }
    run(edge, talos, transforms);
    if (talos.halted) {
        console.error("encountered error running edge function", talos.error.error, talos);
        return talos;
    } else {
        console.log("edge function complete", {
            talos
        });
    }
    move(edge, talos, transforms);
    if (talos.halted) {
        console.error("encountered error running move function", talos.error.error, talos);
        return talos;
    } else {
        console.log("talos move complete", {
            talos
        });
    }
    return talos;
};
 //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=/@dashkite/talos/src/stable/sync.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3Mvc3JjL3N0YWJsZS9zeW5jLmNvZmZlZSIsIjxhbm9uPiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgbmVnYXRlIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvcHJlZGljYXRlXCJcbmltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcbmltcG9ydCB7IEdyYXBoLCBUYWxvcyB9IGZyb20gXCIuLi9jb250YWluZXJzXCJcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi4vY29udGFpbmVycy9lcnJvcnNcIlxuXG5cbm1hdGNoVmVydGV4ID0gKCBncmFwaCwgdGFsb3MgKSAtPlxuICB2ZXJ0ZXggPSBncmFwaC5nZXQgdGFsb3NcbiAgaWYgIXZlcnRleD9cbiAgICB0YWxvcy50aHJvdyBFcnJvcnMuSW52YWxpZFN0YXRlLm1ha2UgXCJ0YWxvcyBzdGF0ZSBpc1xuICAgICAgbm90IGluIGdyYXBoXCJcbiAgdmVydGV4XG5cbm1hdGNoRWRnZSA9ICggdmVydGV4LCB0YWxvcywgdHJhbnNmb3JtcyApIC0+XG4gIGZvciBlZGdlIGluIHZlcnRleC5lZGdlc1xuICAgIGlmICggZWRnZS5hY2NlcHQgdGFsb3MsIHRyYW5zZm9ybXMuLi4gKSA9PSB0cnVlXG4gICAgICByZXR1cm4gZWRnZVxuICByZXR1cm5cblxucnVuID0gKCBlZGdlLCB0YWxvcywgdHJhbnNmb3JtcyApIC0+XG4gIGlmIGVkZ2UucnVuP1xuICAgIHRyeVxuICAgICAgZWRnZS5ydW4gdGFsb3MsIHRyYW5zZm9ybXMuLi5cbiAgICBjYXRjaCBlcnJvclxuICAgICAgdGFsb3MudGhyb3cgRXJyb3JzLkZhaWxlZFJ1bi5tYWtlIGVycm9yLCBcbiAgICAgICAgXCJlbmNvdW50ZXJlZCBhbiBlcnJvciB3aGlsZSBydW5uaW5nIGVkZ2UgZnVuY3Rpb25cIlxuXG5tb3ZlID0gKCBlZGdlLCB0YWxvcywgdHJhbnNmb3JtcyApIC0+XG4gIHRyeVxuICAgIGVkZ2UubW92ZSB0YWxvcywgdHJhbnNmb3Jtcy4uLlxuICBjYXRjaCBlcnJvclxuICAgIHRhbG9zLnRocm93IEVycm9ycy5GYWlsZWRNb3ZlLm1ha2UgZXJyb3IsIFxuICAgICAgXCJlbmNvdW50ZXJlZCBhbiBlcnJvciB3aGlsZSBtb3Zpbmcgc3RhdGVzXCJcblxuXG5zdGVwID0gZ2VuZXJpYyBcbiAgbmFtZTogXCJzdGVwIHRhbG9zXCJcbiAgZGVmYXVsdDogKCBhcmdzLi4uICkgLT4gXG4gICAgdGhyb3cgbmV3IEVycm9yIFwic3RlcDogaW5wdXQgaXMgbWFsZm9ybWVkICN7SlNPTi5zdHJpbmdpZnkgYXJnc31cIlxuXG5nZW5lcmljIHN0ZXAsIEdyYXBoLmlzVHlwZSwgVGFsb3MuaXNUeXBlLCBUeXBlLmlzQW55LCAoIGdyYXBoLCB0YWxvcywgdHJhbnNmb3Jtcy4uLiApIC0+XG4gIF9zdGVwIGdyYXBoLCB0YWxvcywgdHJhbnNmb3Jtc1xuXG5nZW5lcmljIHN0ZXAsIEdyYXBoLmlzVHlwZSwgVGFsb3MuaXNUeXBlLCAoIGdyYXBoLCB0YWxvcyApIC0+XG4gIF9zdGVwIGdyYXBoLCB0YWxvcywgW11cblxuZ2VuZXJpYyBzdGVwLCBHcmFwaC5pc1R5cGUsICggbmVnYXRlIFRhbG9zLmlzVHlwZSApLCAoIGdyYXBoLCB0cmFuc2Zvcm1zLi4uICkgLT5cbiAgX3N0ZXAgZ3JhcGgsIFRhbG9zLm1ha2UoKSwgdHJhbnNmb3Jtcy4uLlxuXG5cbl9zdGVwID0gKCBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybXMgKSAtPlxuICB2ZXJ0ZXggPSBtYXRjaFZlcnRleCBncmFwaCwgdGFsb3NcbiAgcmV0dXJuIHRhbG9zIGlmIHRhbG9zLmhhbHRlZFxuXG4gIGVkZ2UgPSBtYXRjaEVkZ2UgdmVydGV4LCB0YWxvcywgdHJhbnNmb3Jtc1xuICByZXR1cm4gdGFsb3MgaWYgIWVkZ2U/XG4gIHJldHVybiB0YWxvcyBpZiB0YWxvcy5oYWx0ZWRcblxuICBydW4gZWRnZSwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgcmV0dXJuIHRhbG9zIGlmIHRhbG9zLmhhbHRlZFxuXG4gIG1vdmUgZWRnZSwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgdGFsb3NcblxuXG5kZWJ1ZyA9IGdlbmVyaWMgXG4gIG5hbWU6IFwiZGVidWcgc3RlcCB0YWxvc1wiXG4gIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgIHRocm93IG5ldyBFcnJvciBcImRlYnVnIHN0ZXA6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuZ2VuZXJpYyBkZWJ1ZywgR3JhcGguaXNUeXBlLCBUYWxvcy5pc1R5cGUsIFR5cGUuaXNBbnksICggZ3JhcGgsIHRhbG9zLCB0cmFuc2Zvcm1zLi4uICkgLT5cbiAgX2RlYnVnIGdyYXBoLCB0YWxvcywgdHJhbnNmb3Jtc1xuXG5nZW5lcmljIGRlYnVnLCBHcmFwaC5pc1R5cGUsIFRhbG9zLmlzVHlwZSwgKCBncmFwaCwgdGFsb3MgKSAtPlxuICBfZGVidWcgZ3JhcGgsIHRhbG9zLCBbXVxuXG5nZW5lcmljIGRlYnVnLCBHcmFwaC5pc1R5cGUsICggbmVnYXRlIFRhbG9zLmlzVHlwZSApLCAoIGdyYXBoLCB0cmFuc2Zvcm1zLi4uICkgLT5cbiAgX2RlYnVnIGdyYXBoLCBUYWxvcy5tYWtlKCksIHRyYW5zZm9ybXNcblxuXG5fZGVidWcgPSAoIGdyYXBoLCB0YWxvcywgdHJhbnNmb3JtcyApIC0+XG4gIGNvbnNvbGUubG9nIFwic3RhcnRpbmcgc3RlcFwiLCB7IGdyYXBoLCB0YWxvcywgdHJhbnNmb3JtcyB9XG5cbiAgdmVydGV4ID0gbWF0Y2hWZXJ0ZXggZ3JhcGgsIHRhbG9zXG4gIGlmIHRhbG9zLmhhbHRlZFxuICAgIGNvbnNvbGUuZXJyb3IgXCJlbmNvdW50ZXJlZCBlcnJvciBtYXRjaGluZyB2ZXJ0ZXhcIiwgdGFsb3MuZXJyb3IuZXJyb3IsIHRhbG9zXG4gICAgcmV0dXJuIHRhbG9zXG4gIGVsc2VcbiAgICBjb25zb2xlLmxvZyBcInZlcnRleCBtYXRjaGVkXCIsIHsgdmVydGV4LCB0YWxvcyB9XG4gIFxuICBlZGdlID0gbWF0Y2hFZGdlIHZlcnRleCwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgaWYgIWVkZ2U/XG4gICAgY29uc29sZS5sb2cgXCJubyBlZGdlIG1hdGNoLCBpZ25vcmluZyB0cmFuc2Zvcm1zXCJcbiAgICByZXR1cm4gdGFsb3NcbiAgaWYgdGFsb3MuaGFsdGVkXG4gICAgY29uc29sZS5lcnJvciBcImVuY291bnRlcmVkIGVycm9yIG1hdGNoaW5nIGVkZ2VcIiwgdGFsb3MuZXJyb3IuZXJyb3IsIHRhbG9zXG4gICAgcmV0dXJuIHRhbG9zXG4gIGVsc2VcbiAgICBjb25zb2xlLmxvZyBcImVkZ2UgbWF0Y2hlZFwiLCB7IGVkZ2UsIHRhbG9zIH1cblxuICBydW4gZWRnZSwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgaWYgdGFsb3MuaGFsdGVkXG4gICAgY29uc29sZS5lcnJvciBcImVuY291bnRlcmVkIGVycm9yIHJ1bm5pbmcgZWRnZSBmdW5jdGlvblwiLCB0YWxvcy5lcnJvci5lcnJvciwgdGFsb3NcbiAgICByZXR1cm4gdGFsb3NcbiAgZWxzZVxuICAgIGNvbnNvbGUubG9nIFwiZWRnZSBmdW5jdGlvbiBjb21wbGV0ZVwiLCB7IHRhbG9zIH1cblxuICBtb3ZlIGVkZ2UsIHRhbG9zLCB0cmFuc2Zvcm1zXG4gIGlmIHRhbG9zLmhhbHRlZFxuICAgIGNvbnNvbGUuZXJyb3IgXCJlbmNvdW50ZXJlZCBlcnJvciBydW5uaW5nIG1vdmUgZnVuY3Rpb25cIiwgdGFsb3MuZXJyb3IuZXJyb3IsIHRhbG9zXG4gICAgcmV0dXJuIHRhbG9zXG4gIGVsc2VcbiAgICBjb25zb2xlLmxvZyBcInRhbG9zIG1vdmUgY29tcGxldGVcIiwgeyB0YWxvcyB9XG5cbiAgdGFsb3NcblxuXG5leHBvcnQge1xuICBzdGVwXG4gIGRlYnVnXG5cbiAgbWF0Y2hWZXJ0ZXhcbiAgbWF0Y2hFZGdlIFxuICBydW5cbiAgbW92ZVxufSIsbnVsbF0sIm5hbWVzIjpbInN0ZXAiLCJkZWJ1ZyIsIm1hdGNoVmVydGV4IiwibWF0Y2hFZGdlIiwicnVuIiwibW92ZSIsIl9kZWJ1ZyIsIl9zdGVwIiwiZ3JhcGgiLCJ0YWxvcyIsInZlcnRleCIsImdldCIsInRocm93IiwiRXJyb3JzIiwiSW52YWxpZFN0YXRlIiwibWFrZSIsInRyYW5zZm9ybXMiLCJlZGdlIiwiaSIsImxlbiIsInJlZiIsImVkZ2VzIiwibGVuZ3RoIiwiYWNjZXB0IiwiZXJyb3IiLCJlcnJvcjEiLCJGYWlsZWRSdW4iLCJGYWlsZWRNb3ZlIiwiZ2VuZXJpYyIsIm5hbWUiLCJkZWZhdWx0IiwiYXJncyIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIkdyYXBoIiwiaXNUeXBlIiwiVGFsb3MiLCJUeXBlIiwiaXNBbnkiLCJuZWdhdGUiLCJoYWx0ZWQiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQXVIRUEsSUFERjtlQUNFQTs7SUFDQUMsS0FGRjtlQUVFQTs7SUFFQUMsV0FKRjtlQUlFQTs7SUFDQUMsU0FMRjtlQUtFQTs7SUFDQUMsR0FORjtlQU1FQTs7SUFDQUMsSUFQRjtlQU9FQTs7OzhEQTdIRjsyQkFDQTt5QkFDQTs0QkFDQTtnRUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUpBLElBQUFDLFFBQUFDLE9BQUFOLE9BQUFFLFdBQUFELGFBQUFHLE1BQUFELEtBQUFKO0FBT0FFLGNBQWMsU0FBRU0sS0FBRixFQUFTQyxLQUFUO0lBQ2QsSUFBQUM7SUFBRUEsU0FBU0YsTUFBTUcsR0FBTixDQUFVRjtJQUNuQixJQUFJQyxVQUFBLE1BQUo7UUFDRUQsTUFBTUcsS0FBTixDQUFZQyxRQUFPQyxZQUFZLENBQUNDLElBQXBCLENBQXlCOztXQUV2Q0w7QUFMWTtBQU9kUCxZQUFZLFNBQUVPLE1BQUYsRUFBVUQsS0FBVixFQUFpQk8sVUFBakI7SUFDWixJQUFBQyxNQUFBQyxHQUFBQyxLQUFBQztJQUFFQSxN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