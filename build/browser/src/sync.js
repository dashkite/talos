var Step, pipe, run, start;
import { generic } from "@dashkite/joy/generic";
import * as Fn from "@dashkite/joy/function";
import * as Type from "@dashkite/joy/type";
import log from "@dashkite/kaiko";
import { Machine } from "./machine";
import { Talos } from "./talos";
import { isMachine } from "./types";
Step = {
    matchVertex: function(talos) {
        var vertex;
        vertex = talos.machine.graph[talos.state];
        if (vertex == null) {
            talos.catch(new Error("talos state is not in machine graph"));
        }
        return vertex;
    },
    matchEdge: function(vertex, talos, event) {
        var edge, error, i, len, ref;
        ref = vertex.edges;
        for(i = 0, len = ref.length; i < len; i++){
            edge = ref[i];
            try {
                if (edge.when(talos, event) === true) {
                    return edge;
                }
            } catch (error1) {
                error = error1;
                return talos.catch(error);
            }
        }
        return talos.catch(new Error("no matching when condition"));
    },
    run: function(edge, talos, event) {
        var error;
        if (edge.run != null) {
            try {
                return edge.run(talos, event);
            } catch (error1) {
                error = error1;
                return talos.catch(error);
            }
        }
    },
    move: function(edge, talos, event) {
        var error;
        try {
            return edge.move(talos, event);
        } catch (error1) {
            error = error1;
            return talos.catch(error);
        }
    },
    tick: function*(talos, event) {
        var edge, vertex;
        vertex = Step.matchVertex(talos);
        yield talos;
        edge = Step.matchEdge(vertex, talos, event);
        yield talos;
        Step.run(edge, talos, event);
        yield talos;
        Step.move(edge, talos, event);
        return yield talos;
    }
};
start = generic({
    name: "talos: sync start"
});
generic(start, isMachine, function(machine) {
    var talos;
    talos = Talos.make(machine);
    return start(talos);
});
// Create generator where state machine consumes its own context repeatedly.
generic(start, Talos.isType, function*(talos) {
    var ref;
    while(true){
        ref = Step.tick(talos, talos.context);
        for (talos of ref){
            if (talos.ended) {
                yield talos;
                return;
            }
        }
        yield talos; // prevents accumulation
    }
});
generic(start, isMachine, Type.isIterable, function(machine, events) {
    var talos;
    talos = Talos.make(machine);
    return start(talos, events);
});
// Create generator where state machine consumes values from iterator.
generic(start, Talos.isType, Type.isIterable, function*(talos, events) {
    var event, ref;
    for (event of events){
        ref = Step.tick(talos, event);
        for (talos of ref){
            if (talos.ended) {
                yield talos;
                return;
            }
        }
        yield talos; // prevents accumulation
    }
});
generic(start, isMachine, Type.isObject, function(machine, context) {
    var talos;
    talos = Talos.make(machine);
    talos.context = context;
    return start(talos);
});
generic(start, Talos.isType, Type.isObject, function(talos, context) {
    talos.context = context;
    return start(talos);
});
generic(start, isMachine, Type.isObject, Type.isIterable, function(machine, context, events) {
    var talos;
    talos = Talos.make(machine);
    talos.context = context;
    return start(talos, events);
});
generic(start, Talos.isType, Type.isObject, Type.isIterable, function(talos, context, events) {
    talos.context = context;
    return start(talos, events);
});
// Convenience function to keep going and only return the final talos.
run = generic({
    name: "talos: sync run"
});
// Further convenience to support automatically using start.
generic(run, Type.isAny, function() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    return run(start(...args));
});
generic(run, Type.isIterator, function(iterator) {
    var result, talos;
    for (talos of iterator){
        result = talos;
    }
    return result;
});
pipe = function(fx) {
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var talos;
        talos = run(start(fx, ...args));
        if (talos.error != null) {
            throw talos.error;
        }
        return talos.context;
    };
};
export * from "./states";
export * from "./machine";
export * from "./talos";
export * from "./types";
export { Step, start, run, pipe }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=src/sync.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zeW5jLmNvZmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgKiBhcyBGbiBmcm9tIFwiQGRhc2hraXRlL2pveS9mdW5jdGlvblwiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IGxvZyBmcm9tIFwiQGRhc2hraXRlL2thaWtvXCJcbmltcG9ydCB7IE1hY2hpbmUgfSBmcm9tIFwiLi9tYWNoaW5lXCJcbmltcG9ydCB7IFRhbG9zIH0gZnJvbSBcIi4vdGFsb3NcIlxuaW1wb3J0IHsgaXNNYWNoaW5lIH0gZnJvbSBcIi4vdHlwZXNcIlxuXG5cblN0ZXAgPVxuICBtYXRjaFZlcnRleDogKCB0YWxvcyApIC0+XG4gICAgdmVydGV4ID0gdGFsb3MubWFjaGluZS5ncmFwaFsgdGFsb3Muc3RhdGUgXVxuICAgIGlmICF2ZXJ0ZXg/XG4gICAgICB0YWxvcy5jYXRjaCBuZXcgRXJyb3IgXCJ0YWxvcyBzdGF0ZSBpcyBub3QgaW4gbWFjaGluZSBncmFwaFwiXG4gICAgdmVydGV4XG5cbiAgbWF0Y2hFZGdlOiAoIHZlcnRleCwgdGFsb3MsIGV2ZW50ICkgLT5cbiAgICBmb3IgZWRnZSBpbiB2ZXJ0ZXguZWRnZXNcbiAgICAgIHRyeVxuICAgICAgICBpZiAoIGVkZ2Uud2hlbiB0YWxvcywgZXZlbnQgKSA9PSB0cnVlXG4gICAgICAgICAgcmV0dXJuIGVkZ2VcbiAgICAgIGNhdGNoIGVycm9yXG4gICAgICAgIHJldHVybiB0YWxvcy5jYXRjaCBlcnJvclxuICAgIHRhbG9zLmNhdGNoIG5ldyBFcnJvciBcIm5vIG1hdGNoaW5nIHdoZW4gY29uZGl0aW9uXCJcblxuICBydW46ICggZWRnZSwgdGFsb3MsIGV2ZW50ICkgLT5cbiAgICBpZiBlZGdlLnJ1bj9cbiAgICAgIHRyeVxuICAgICAgICBlZGdlLnJ1biB0YWxvcywgZXZlbnRcbiAgICAgIGNhdGNoIGVycm9yXG4gICAgICAgIHRhbG9zLmNhdGNoIGVycm9yXG5cbiAgbW92ZTogKCBlZGdlLCB0YWxvcywgZXZlbnQgKSAtPlxuICAgIHRyeVxuICAgICAgZWRnZS5tb3ZlIHRhbG9zLCBldmVudFxuICAgIGNhdGNoIGVycm9yXG4gICAgICB0YWxvcy5jYXRjaCBlcnJvclxuXG4gIHRpY2s6ICggdGFsb3MsIGV2ZW50ICkgLT5cbiAgICB2ZXJ0ZXggPSBTdGVwLm1hdGNoVmVydGV4IHRhbG9zXG4gICAgeWllbGQgdGFsb3NcbiAgICBlZGdlID0gU3RlcC5tYXRjaEVkZ2UgdmVydGV4LCB0YWxvcywgZXZlbnRcbiAgICB5aWVsZCB0YWxvc1xuICAgIFN0ZXAucnVuIGVkZ2UsIHRhbG9zLCBldmVudFxuICAgIHlpZWxkIHRhbG9zXG4gICAgU3RlcC5tb3ZlIGVkZ2UsIHRhbG9zLCBldmVudFxuICAgIHlpZWxkIHRhbG9zXG5cblxuc3RhcnQgPSBnZW5lcmljIG5hbWU6IFwidGFsb3M6IHN5bmMgc3RhcnRcIlxuXG5nZW5lcmljIHN0YXJ0LCBpc01hY2hpbmUsICggbWFjaGluZSApIC0+XG4gIHRhbG9zID0gVGFsb3MubWFrZSBtYWNoaW5lXG4gIHN0YXJ0IHRhbG9zXG5cbiMgQ3JlYXRlIGdlbmVyYXRvciB3aGVyZSBzdGF0ZSBtYWNoaW5lIGNvbnN1bWVzIGl0cyBvd24gY29udGV4dCByZXBlYXRlZGx5LlxuZ2VuZXJpYyBzdGFydCwgVGFsb3MuaXNUeXBlLCAoIHRhbG9zICkgLT5cbiAgbG9vcFxuICAgIGZvciB0YWxvcyBmcm9tIFN0ZXAudGljayB0YWxvcywgdGFsb3MuY29udGV4dFxuICAgICAgaWYgdGFsb3MuZW5kZWRcbiAgICAgICAgeWllbGQgdGFsb3NcbiAgICAgICAgcmV0dXJuXG4gICAgeWllbGQgdGFsb3NcbiAgcmV0dXJuICMgcHJldmVudHMgYWNjdW11bGF0aW9uXG5cbmdlbmVyaWMgc3RhcnQsIGlzTWFjaGluZSwgVHlwZS5pc0l0ZXJhYmxlLCAoIG1hY2hpbmUsIGV2ZW50cyApIC0+XG4gIHRhbG9zID0gVGFsb3MubWFrZSBtYWNoaW5lXG4gIHN0YXJ0IHRhbG9zLCBldmVudHNcblxuIyBDcmVhdGUgZ2VuZXJhdG9yIHdoZXJlIHN0YXRlIG1hY2hpbmUgY29uc3VtZXMgdmFsdWVzIGZyb20gaXRlcmF0b3IuXG5nZW5lcmljIHN0YXJ0LCBUYWxvcy5pc1R5cGUsIFR5cGUuaXNJdGVyYWJsZSwgKCB0YWxvcywgZXZlbnRzICkgLT5cbiAgZm9yIGV2ZW50IGZyb20gZXZlbnRzXG4gICAgZm9yIHRhbG9zIGZyb20gU3RlcC50aWNrIHRhbG9zLCBldmVudFxuICAgICAgaWYgdGFsb3MuZW5kZWRcbiAgICAgICAgeWllbGQgdGFsb3NcbiAgICAgICAgcmV0dXJuXG4gICAgeWllbGQgdGFsb3NcbiAgcmV0dXJuICMgcHJldmVudHMgYWNjdW11bGF0aW9uXG5cbmdlbmVyaWMgc3RhcnQsIGlzTWFjaGluZSwgVHlwZS5pc09iamVjdCwgKCBtYWNoaW5lLCBjb250ZXh0ICkgLT5cbiAgdGFsb3MgPSBUYWxvcy5tYWtlIG1hY2hpbmVcbiAgdGFsb3MuY29udGV4dCA9IGNvbnRleHRcbiAgc3RhcnQgdGFsb3NcblxuZ2VuZXJpYyBzdGFydCwgVGFsb3MuaXNUeXBlLCBUeXBlLmlzT2JqZWN0LCAoIHRhbG9zLCBjb250ZXh0ICkgLT5cbiAgdGFsb3MuY29udGV4dCA9IGNvbnRleHRcbiAgc3RhcnQgdGFsb3NcblxuZ2VuZXJpYyBzdGFydCwgaXNNYWNoaW5lLCBUeXBlLmlzT2JqZWN0LCBUeXBlLmlzSXRlcmFibGUsICggbWFjaGluZSwgY29udGV4dCwgZXZlbnRzICkgLT5cbiAgdGFsb3MgPSBUYWxvcy5tYWtlIG1hY2hpbmVcbiAgdGFsb3MuY29udGV4dCA9IGNvbnRleHRcbiAgc3RhcnQgdGFsb3MsIGV2ZW50c1xuXG5nZW5lcmljIHN0YXJ0LCBUYWxvcy5pc1R5cGUsIFR5cGUuaXNPYmplY3QsIFR5cGUuaXNJdGVyYWJsZSwgKCB0YWxvcywgY29udGV4dCwgZXZlbnRzICkgLT5cbiAgdGFsb3MuY29udGV4dCA9IGNvbnRleHRcbiAgc3RhcnQgdGFsb3MsIGV2ZW50c1xuXG5cbiMgQ29udmVuaWVuY2UgZnVuY3Rpb24gdG8ga2VlcCBnb2luZyBhbmQgb25seSByZXR1cm4gdGhlIGZpbmFsIHRhbG9zLlxucnVuID0gZ2VuZXJpYyBuYW1lOiBcInRhbG9zOiBzeW5jIHJ1blwiXG5cbiMgRnVydGhlciBjb252ZW5pZW5jZSB0byBzdXBwb3J0IGF1dG9tYXRpY2FsbHkgdXNpbmcgc3RhcnQuXG5nZW5lcmljIHJ1biwgVHlwZS5pc0FueSwgKCBhcmdzLi4uICkgLT5cbiAgcnVuIHN0YXJ0IGFyZ3MuLi5cblxuZ2VuZXJpYyBydW4sIFR5cGUuaXNJdGVyYXRvciwgKCBpdGVyYXRvciApIC0+XG4gIGZvciB0YWxvcyBmcm9tIGl0ZXJhdG9yXG4gICAgcmVzdWx0ID0gdGFsb3NcbiAgcmVzdWx0XG5cbnBpcGUgPSAoIGZ4ICkgLT5cbiAgKCBhcmdzLi4uICkgLT5cbiAgICB0YWxvcyA9IHJ1biBzdGFydCBmeCwgYXJncy4uLlxuICAgIGlmIHRhbG9zLmVycm9yP1xuICAgICAgdGhyb3cgdGFsb3MuZXJyb3JcbiAgICB0YWxvcy5jb250ZXh0XG5cbmV4cG9ydCAqIGZyb20gXCIuL3N0YXRlc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9tYWNoaW5lXCJcbmV4cG9ydCAqIGZyb20gXCIuL3RhbG9zXCJcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzXCJcbmV4cG9ydCB7XG4gIFN0ZXAgIFxuICBzdGFydFxuICBydW5cbiAgcGlwZVxufSJdLCJuYW1lcyI6WyJTdGVwIiwicGlwZSIsInJ1biIsInN0YXJ0IiwiZ2VuZXJpYyIsIkZuIiwiVHlwZSIsImxvZyIsIk1hY2hpbmUiLCJUYWxvcyIsImlzTWFjaGluZSIsIm1hdGNoVmVydGV4IiwidGFsb3MiLCJ2ZXJ0ZXgiLCJtYWNoaW5lIiwiZ3JhcGgiLCJzdGF0ZSIsImNhdGNoIiwiRXJyb3IiLCJtYXRjaEVkZ2UiLCJldmVudCIsImVkZ2UiLCJlcnJvciIsImkiLCJsZW4iLCJyZWYiLCJlZGdlcyIsImxlbmd0aCIsIndoZW4iLCJlcnJvcjEiLCJtb3ZlIiwidGljayIsIm5hbWUiLCJtYWtlIiwiaXNUeXBlIiwiY29udGV4dCIsImVuZGVkIiwiaXNJdGVyYWJsZSIsImV2ZW50cyIsImlzT2JqZWN0IiwiaXNBbnkiLCJhcmdzIiwiaXNJdGVyYXRvciIsIml0ZXJhdG9yIiwicmVzdWx0IiwiZngiXSwibWFwcGluZ3MiOiJBQUFBLElBQUFBLE1BQUFDLE1BQUFDLEtBQUFDO0FBQUEsU0FBU0MsT0FBVCxRQUFBLHdCQUFBO0FBQ0EsWUFBT0MsUUFBUCx5QkFBQTtBQUNBLFlBQU9DLFVBQVAscUJBQUE7QUFDQSxPQUFPQyxTQUFQLGtCQUFBO0FBQ0EsU0FBU0MsT0FBVCxRQUFBLFlBQUE7QUFDQSxTQUFTQyxLQUFULFFBQUEsVUFBQTtBQUNBLFNBQVNDLFNBQVQsUUFBQSxVQUFBO0FBR0FWLE9BQ0U7SUFBQVcsYUFBYSxTQUFFQyxLQUFGO1FBQ2YsSUFBQUM7UUFBSUEsU0FBU0QsTUFBTUUsT0FBTyxDQUFDQyxLQUFLLENBQUVILE1BQU1JLEtBQVIsQ0FBQTtRQUM1QixJQUFJSCxVQUFBLE1BQUo7WUFDRUQsTUFBTUssS0FBTixDQUFZLElBQUlDLE1BQU07O2VBQ3hCTDtJQUpXO0lBTWJNLFdBQVcsU0FBRU4sTUFBRixFQUFVRCxLQUFWLEVBQWlCUSxLQUFqQjtRQUNiLElBQUFDLE1BQUFDLE9BQUFDLEdBQUFDLEtBQUFDO1FBQUlBLE1BQUFaLE9BQUFhLEtBQUE7UUFBQSxJQUFBSCxJQUFBLEdBQUFDLE1BQUFDLElBQUFFLE1BQUEsRUFBQUosSUFBQUMsS0FBQUQsSUFBQTs7WUFDRSxJQUFBO2dCQUNFLElBQUcsQUFBRUYsS0FBS08sSUFBTCxDQUFVaEIsT0FBT1EsV0FBVyxNQUFqQztvQkFDRSxPQUFPQzs7Y0FDWCxPQUFBUSxRQUFBO2dCQUFNUCxRQUFBTztnQkFDSixPQUFPakIsTUFBTUssS0FBTixDQUFZSzs7UUFMdkI7ZUFNQVYsTUFBTUss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