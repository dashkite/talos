var test;
import { Machine, $start, $end } from "../../src";
import * as h from "../helpers";
test = function() {
    return [
        h.test("compact + booleans", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: {
                    alpha: true
                },
                alpha: {
                    ignore: false,
                    end: true
                }
            });
            h.assert(machine.graph[$start] != null);
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run == null);
            h.assert(edge.move({}) === "alpha");
            edge = machine.graph["alpha"].edges[0];
            h.assert(edge.when() === false);
            h.assert(edge.move({}) === "ignore");
            edge = machine.graph["alpha"].edges[1];
            return h.assert(edge.move({}) === $end);
        })),
        h.test("compact + functions", h.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = Machine.make({
                start: {
                    alpha: A
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when === A);
            h.assert(edge.run == null);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("objects + booleans", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: {
                    alpha: {
                        when: true,
                        run: function() {
                            return 1 + 1;
                        },
                        move: "alpha"
                    }
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("objects + functions", h.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = Machine.make({
                start: {
                    alpha: {
                        when: A,
                        run: function() {
                            return 1 + 1;
                        },
                        move: function(talos) {
                            return talos.state = "alpha";
                        }
                    }
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when === A);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("objects - when and move", h.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = Machine.make({
                start: {
                    alpha: {
                        run: function() {
                            return 1 + 1;
                        }
                    }
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("object + shorthand edges", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: {
                    run: function(talos) {},
                    move: "alpha"
                },
                alpha: {
                    move: $end
                }
            });
            h.assert(machine.graph[$start] != null);
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run != null);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("arrays + booleans", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: [
                    {
                        when: true,
                        move: "alpha"
                    }
                ]
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run == null);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("arrays + functions", h.target("machine", function() {
            var A, edge, machine;
            A = function() {
                return true;
            };
            machine = Machine.make({
                start: [
                    {
                        when: A,
                        run: function() {
                            return 1 + 1;
                        },
                        move: function(talos) {
                            return talos.state = "alpha";
                        }
                    }
                ]
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when === A);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("compact with default", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: {
                    ignore: false,
                    default: "alpha",
                    alsoIgnore: false
                }
            });
            edge = machine.graph[$start].edges.at(-1);
            h.assert(edge.when() === true);
            return h.assert(edge.move({}) === "alpha");
        })),
        h.test("terminal function", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                start: function() {
                    return 1 + 1;
                }
            });
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === $end);
        })),
        h.test("expansion from linear composition", h.target("machine", function() {
            var A, B, C, machine;
            A = function() {};
            B = function() {};
            C = function() {};
            machine = Machine.make([
                A,
                B,
                C
            ]);
            h.assert(machine.graph[$start].edges[0].move({}) === "A");
            h.assert(machine.graph["A"].edges[0].run === A);
            return h.assert(machine.graph["C"].edges[0].move({}) === $end);
        })),
        h.test("expansion from annotated linear composition", h.target("machine", function() {
            var A, B, C, machine;
            A = function() {};
            B = function() {};
            C = function() {};
            machine = Machine.make([
                "first",
                A,
                "second",
                B,
                "third",
                C
            ]);
            h.assert(machine.graph[$start].edges[0].move({}) === "first");
            h.assert(machine.graph["first"].edges[0].run === A);
            return h.assert(machine.graph["third"].edges[0].move({}) === $end);
        })),
        h.test("named machine :: arguments", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make("custom name", {
                start: function() {
                    return 1 + 1;
                }
            });
            console.log(machine);
            h.assert.equal("custom name", machine.name);
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === $end);
        })),
        h.test("named machine :: interface", h.target("machine", function() {
            var edge, machine;
            machine = Machine.make({
                name: "custom name",
                graph: {
                    start: function() {
                        return 1 + 1;
                    }
                }
            });
            h.assert.equal("custom name", machine.name);
            edge = machine.graph[$start].edges[0];
            h.assert(edge.when() === true);
            h.assert(edge.run() === 2);
            return h.assert(edge.move({}) === $end);
        })),
        h.test("named machine :: linear composition", h.target("machine", function() {
            var A, B, C, machine;
            A = function() {};
            B = function() {};
            C = function() {};
            machine = Machine.make("custom name", [
                A,
                B,
                C
            ]);
            console.log(machine);
            h.assert.equal("custom name", machine.name);
            h.assert(machine.graph[$start].edges[0].move({}) === "A");
            h.assert(machine.graph["A"].edges[0].run === A);
            return h.assert(machine.graph["C"].edges[0].move({}) === $end);
        }))
    ];
};
export { test as expansions }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=test/machine/expansions.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbWFjaGluZS9leHBhbnNpb25zLmNvZmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWNoaW5lLCAkc3RhcnQsICRlbmQgfSBmcm9tIFwiLi4vLi4vc3JjXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5cbnRlc3QgPSAtPlxuICBbXG4gICAgaC50ZXN0IFwiY29tcGFjdCArIGJvb2xlYW5zXCIsIGgudGFyZ2V0IFwibWFjaGluZVwiLCAtPlxuICAgICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZVxuICAgICAgICBzdGFydDpcbiAgICAgICAgICBhbHBoYTogdHJ1ZVxuICAgICAgICBhbHBoYTpcbiAgICAgICAgICBpZ25vcmU6IGZhbHNlXG4gICAgICAgICAgZW5kOiB0cnVlXG5cbiAgICAgIGguYXNzZXJ0IG1hY2hpbmUuZ3JhcGhbICRzdGFydCBdP1xuICAgICAgZWRnZSA9IG1hY2hpbmUuZ3JhcGhbICRzdGFydCBdLmVkZ2VzWzBdXG4gICAgICBoLmFzc2VydCBlZGdlLndoZW4oKSA9PSB0cnVlXG4gICAgICBoLmFzc2VydCAhZWRnZS5ydW4/XG4gICAgICBoLmFzc2VydCAoIGVkZ2UubW92ZSB7fSApID09IFwiYWxwaGFcIlxuXG4gICAgICBlZGdlID0gbWFjaGluZS5ncmFwaFsgXCJhbHBoYVwiIF0uZWRnZXNbMF1cbiAgICAgIGguYXNzZXJ0IGVkZ2Uud2hlbigpID09IGZhbHNlXG4gICAgICBoLmFzc2VydCAoIGVkZ2UubW92ZSB7fSApID09IFwiaWdub3JlXCJcblxuICAgICAgZWRnZSA9IG1hY2hpbmUuZ3JhcGhbIFwiYWxwaGFcIiBdLmVkZ2VzWzFdXG4gICAgICBoLmFzc2VydCAoIGVkZ2UubW92ZSB7fSApID09ICRlbmRcblxuXG4gICAgaC50ZXN0IFwiY29tcGFjdCArIGZ1bmN0aW9uc1wiLCBoLnRhcmdldCBcIm1hY2hpbmVcIiwgLT5cbiAgICAgIEEgPSAtPiB0cnVlXG5cbiAgICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2VcbiAgICAgICAgc3RhcnQ6XG4gICAgICAgICAgYWxwaGE6IEFcblxuICAgICAgZWRnZSA9IG1hY2hpbmUuZ3JhcGhbICRzdGFydCBdLmVkZ2VzWzBdXG4gICAgICBoLmFzc2VydCBlZGdlLndoZW4gPT0gQVxuICAgICAgaC5hc3NlcnQgIWVkZ2UucnVuP1xuICAgICAgaC5hc3NlcnQgKCBlZGdlLm1vdmUge30gKSA9PSBcImFscGhhXCJcblxuXG4gICAgaC50ZXN0IFwib2JqZWN0cyArIGJvb2xlYW5zXCIsIGgudGFyZ2V0IFwibWFjaGluZVwiLCAtPlxuICAgICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZVxuICAgICAgICBzdGFydDpcbiAgICAgICAgICBhbHBoYTpcbiAgICAgICAgICAgIHdoZW46IHRydWVcbiAgICAgICAgICAgIHJ1bjogLT4gMSArIDFcbiAgICAgICAgICAgIG1vdmU6IFwiYWxwaGFcIlxuXG4gICAgICBlZGdlID0gbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXNbMF1cbiAgICAgIGguYXNzZXJ0IGVkZ2Uud2hlbigpID09IHRydWVcbiAgICAgIGguYXNzZXJ0IGVkZ2UucnVuKCkgPT0gMlxuICAgICAgaC5hc3NlcnQgKCBlZGdlLm1vdmUge30gKSA9PSBcImFscGhhXCJcblxuXG4gICAgaC50ZXN0IFwib2JqZWN0cyArIGZ1bmN0aW9uc1wiLCBoLnRhcmdldCBcIm1hY2hpbmVcIiwgLT5cbiAgICAgIEEgPSAtPiB0cnVlXG5cbiAgICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2VcbiAgICAgICAgc3RhcnQ6XG4gICAgICAgICAgYWxwaGE6XG4gICAgICAgICAgICB3aGVuOiBBXG4gICAgICAgICAgICBydW46IC0+IDEgKyAxXG4gICAgICAgICAgICBtb3ZlOiAoIHRhbG9zICkgLT4gdGFsb3Muc3RhdGUgPSBcImFscGhhXCJcblxuICAgICAgZWRnZSA9IG1hY2hpbmUuZ3JhcGhbICRzdGFydCBdLmVkZ2VzWzBdXG4gICAgICBoLmFzc2VydCBlZGdlLndoZW4gPT0gQVxuICAgICAgaC5hc3NlcnQgZWRnZS5ydW4oKSA9PSAyXG4gICAgICBoLmFzc2VydCAoIGVkZ2UubW92ZSB7fSApID09IFwiYWxwaGFcIlxuXG4gICAgaC50ZXN0IFwib2JqZWN0cyAtIHdoZW4gYW5kIG1vdmVcIiwgaC50YXJnZXQgXCJtYWNoaW5lXCIsIC0+XG4gICAgICBBID0gLT4gdHJ1ZVxuXG4gICAgICBtYWNoaW5lID0gTWFjaGluZS5tYWtlXG4gICAgICAgIHN0YXJ0OlxuICAgICAgICAgIGFscGhhOiBydW46IC0+IDEgKyAxXG5cbiAgICAgIGVkZ2UgPSBtYWNoaW5lLmdyYXBoWyAkc3RhcnQgXS5lZGdlc1swXVxuICAgICAgaC5hc3NlcnQgZWRnZS53aGVuKCkgPT0gdHJ1ZVxuICAgICAgaC5hc3NlcnQgZWRnZS5ydW4oKSA9PSAyXG4gICAgICBoLmFzc2VydCAoIGVkZ2UubW92ZSB7fSApID09IFwiYWxwaGFcIlxuXG4gICAgaC50ZXN0IFwib2JqZWN0ICsgc2hvcnRoYW5kIGVkZ2VzXCIsIGgudGFyZ2V0IFwibWFjaGluZVwiLCAtPlxuICAgICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZVxuICAgICAgICBzdGFydDpcbiAgICAgICAgICBydW46ICggdGFsb3MgKSAtPlxuICAgICAgICAgIG1vdmU6IFwiYWxwaGFcIlxuICAgICAgICBhbHBoYTpcbiAgICAgICAgICBtb3ZlOiAkZW5kXG5cbiAgICAgIGguYXNzZXJ0IG1hY2hpbmUuZ3JhcGhbICRzdGFydCBdP1xuICAgICAgZWRnZSA9IG1hY2hpbmUuZ3JhcGhbICRzdGFydCBdLmVkZ2VzWzBdXG4gICAgICBoLmFzc2VydCBlZGdlLndoZW4oKSA9PSB0cnVlXG4gICAgICBoLmFzc2VydCBlZGdlLnJ1bj9cbiAgICAgIGguYXNzZXJ0ICggZWRnZS5tb3ZlIHt9ICkgPT0gXCJhbHBoYVwiXG5cblxuICAgIGgudGVzdCBcImFycmF5cyArIGJvb2xlYW5zXCIsIGgudGFyZ2V0IFwibWFjaGluZVwiLCAtPlxuICAgICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZVxuICAgICAgICBzdGFydDogW1xuICAgICAgICAgIHdoZW46IHRydWVcbiAgICAgICAgICBtb3ZlOiBcImFscGhhXCJcbiAgICAgICAgXVxuXG4gICAgICBlZGdlID0gbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXNbMF1cbiAgICAgIGguYXNzZXJ0IGVkZ2Uud2hlbigpID09IHRydWVcbiAgICAgIGguYXNzZXJ0ICFlZGdlLnJ1bj9cbiAgICAgIGguYXNzZXJ0ICggZWRnZS5tb3ZlIHt9ICkgPT0gXCJhbHBoYVwiXG5cblxuICAgIGgudGVzdCBcImFycmF5cyArIGZ1bmN0aW9uc1wiLCBoLnRhcmdldCBcIm1hY2hpbmVcIiwgLT5cbiAgICAgIEEgPSAtPiB0cnVlXG5cbiAgICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2VcbiAgICAgICAgc3RhcnQ6IFtcbiAgICAgICAgICB3aGVuOiBBXG4gICAgICAgICAgcnVuOiAtPiAxICsgMVxuICAgICAgICAgIG1vdmU6ICggdGFsb3MgKSAtPiB0YWxvcy5zdGF0ZSA9IFwiYWxwaGFcIlxuICAgICAgICBdXG5cbiAgICAgIGVkZ2UgPSBtYWNoaW5lLmdyYXBoWyAkc3RhcnQgXS5lZGdlc1swXVxuICAgICAgaC5hc3NlcnQgZWRnZS53aGVuID09IEFcbiAgICAgIGguYXNzZXJ0IGVkZ2UucnVuKCkgPT0gMlxuICAgICAgaC5hc3NlcnQgKCBlZGdlLm1vdmUge30gKSA9PSBcImFscGhhXCJcblxuXG4gICAgaC50ZXN0IFwiY29tcGFjdCB3aXRoIGRlZmF1bHRcIiwgaC50YXJnZXQgXCJtYWNoaW5lXCIsIC0+XG4gICAgICBtYWNoaW5lID0gTWFjaGluZS5tYWtlXG4gICAgICAgIHN0YXJ0OlxuICAgICAgICAgIGlnbm9yZTogZmFsc2VcbiAgICAgICAgICBkZWZhdWx0OiBcImFscGhhXCJcbiAgICAgICAgICBhbHNvSWdub3JlOiBmYWxzZVxuXG4gICAgICBlZGdlID0gbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXMuYXQgLTFcbiAgICAgIGguYXNzZXJ0IGVkZ2Uud2hlbigpID09IHRydWVcbiAgICAgIGguYXNzZXJ0ICggZWRnZS5tb3ZlIHt9ICkgPT0gXCJhbHBoYVwiXG5cblxuICAgIGgudGVzdCBcInRlcm1pbmFsIGZ1bmN0aW9uXCIsIGgudGFyZ2V0IFwibWFjaGluZVwiLCAtPlxuICAgICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZVxuICAgICAgICBzdGFydDogLT4gMSArIDFcblxuICAgICAgZWRnZSA9IG1hY2hpbmUuZ3JhcGhbICRzdGFydCBdLmVkZ2VzWzBdXG4gICAgICBoLmFzc2VydCBlZGdlLndoZW4oKSA9PSB0cnVlXG4gICAgICBoLmFzc2VydCBlZGdlLnJ1bigpID09IDJcbiAgICAgIGguYXNzZXJ0ICggZWRnZS5tb3ZlIHt9ICkgPT0gJGVuZFxuXG5cbiAgICBoLnRlc3QgXCJleHBhbnNpb24gZnJvbSBsaW5lYXIgY29tcG9zaXRpb25cIiwgaC50YXJnZXQgXCJtYWNoaW5lXCIsIC0+XG4gICAgICBBID0gLT5cbiAgICAgIEIgPSAtPlxuICAgICAgQyA9IC0+XG4gICAgICBcbiAgICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2UgWyBBLCBCLCBDIF1cblxuICAgICAgaC5hc3NlcnQgbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXNbMF0ubW92ZSh7fSkgPT0gXCJBXCJcbiAgICAgIGguYXNzZXJ0IG1hY2hpbmUuZ3JhcGhbIFwiQVwiIF0uZWRnZXNbMF0ucnVuID09IEFcbiAgICAgIGguYXNzZXJ0IG1hY2hpbmUuZ3JhcGhbIFwiQ1wiIF0uZWRnZXNbMF0ubW92ZSh7fSkgPT0gJGVuZFxuXG4gICAgaC50ZXN0IFwiZXhwYW5zaW9uIGZyb20gYW5ub3RhdGVkIGxpbmVhciBjb21wb3NpdGlvblwiLCBoLnRhcmdldCBcIm1hY2hpbmVcIiwgLT5cbiAgICAgIEEgPSAtPlxuICAgICAgQiA9IC0+XG4gICAgICBDID0gLT5cbiAgICAgIFxuICAgICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZSBbIFxuICAgICAgICBcImZpcnN0XCIsIEFcbiAgICAgICAgXCJzZWNvbmRcIiwgQlxuICAgICAgICBcInRoaXJkXCIsIENcbiAgICAgIF1cblxuICAgICAgaC5hc3NlcnQgbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXNbMF0ubW92ZSh7fSkgPT0gXCJmaXJzdFwiXG4gICAgICBoLmFzc2VydCBtYWNoaW5lLmdyYXBoWyBcImZpcnN0XCIgXS5lZGdlc1swXS5ydW4gPT0gQVxuICAgICAgaC5hc3NlcnQgbWFjaGluZS5ncmFwaFsgXCJ0aGlyZFwiIF0uZWRnZXNbMF0ubW92ZSh7fSkgPT0gJGVuZFxuXG4gICAgaC50ZXN0IFwibmFtZWQgbWFjaGluZSA6OiBhcmd1bWVudHNcIiwgaC50YXJnZXQgXCJtYWNoaW5lXCIsIC0+XG4gICAgICBtYWNoaW5lID0gTWFjaGluZS5tYWtlIFwiY3VzdG9tIG5hbWVcIixcbiAgICAgICAgc3RhcnQ6IC0+IDEgKyAxXG5cbiAgICAgIGNvbnNvbGUubG9nIG1hY2hpbmVcbiAgICAgIGguYXNzZXJ0LmVxdWFsIFwiY3VzdG9tIG5hbWVcIiwgbWFjaGluZS5uYW1lXG4gICAgICBlZGdlID0gbWFjaGluZS5ncmFwaFsgJHN0YXJ0IF0uZWRnZXNbMF1cbiAgICAgIGguYXNzZXJ0IGVkZ2Uud2hlbigpID09IHRydWVcbiAgICAgIGguYXNzZXJ0IGVkZ2UucnVuKCkgPT0gMlxuICAgICAgaC5hc3NlcnQgKCBlZGdlLm1vdmUge30gKSA9PSAkZW5kXG5cbiAgICBoLnRlc3QgXCJuYW1lZCBtYWNoaW5lIDo6IGludGVyZmFjZVwiLCBoLnRhcmdldCBcIm1hY2hpbmVcIiwgLT5cbiAgICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2UgXG4gICAgICAgIG5hbWU6IFwiY3VzdG9tIG5hbWVcIlxuICAgICAgICBncmFwaDpcbiAgICAgICAgICBzdGFydDogLT4gMSArIDFcblxuICAgICAgaC5hc3NlcnQuZXF1YWwgXCJjdXN0b20gbmFtZVwiLCBtYWNoaW5lLm5hbWVcbiAgICAgIGVkZ2UgPSBtYWNoaW5lLmdyYXBoWyAkc3RhcnQgXS5lZGdlc1swXVxuICAgICAgaC5hc3NlcnQgZWRnZS53aGVuKCkgPT0gdHJ1ZVxuICAgICAgaC5hc3NlcnQgZWRnZS5ydW4oKSA9PSAyXG4gICAgICBoLmFzc2VydCAoIGVkZ2UubW92ZSB7fSApID09ICRlbmRcblxuICAgIGgudGVzdCBcIm5hbWVkIG1hY2hpbmUgOjogbGluZWFyIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwibWFjaGluZVwiLCAtPlxuICAgICAgQSA9IC0+XG4gICAgICBCID0gLT5cbiAgICAgIEMgPSAtPlxuICAgICAgXG4gICAgICBtYWNoaW5lID0gTWFjaGluZS5tYWtlIFwiY3VzdG9tIG5hbWVcIiwgWyBBLCBCLCBDIF1cbiAgICAgIGNvbnNvbGUubG9nIG1hY2hpbmVcblxuICAgICAgaC5hc3NlcnQuZXF1YWwgXCJjdXN0b20gbmFtZVwiLCBtYWNoaW5lLm5hbWVcbiAgICAgIGguYXNzZXJ0IG1hY2hpbmUuZ3JhcGhbICRzdGFydCBdLmVkZ2VzWzBdLm1vdmUoe30pID09IFwiQVwiXG4gICAgICBoLmFzc2VydCBtYWNoaW5lLmdyYXBoWyBcIkFcIiBdLmVkZ2VzWzBdLnJ1biA9PSBBXG4gICAgICBoLmFzc2VydCBtYWNoaW5lLmdyYXBoWyBcIkNcIiBdLmVkZ2VzWzBdLm1vdmUoe30pID09ICRlbmRcblxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgZXhwYW5zaW9ucyB9Il0sIm5hbWVzIjpbInRlc3QiLCJNYWNoaW5lIiwiJHN0YXJ0IiwiJGVuZCIsImgiLCJ0YXJnZXQiLCJlZGdlIiwibWFjaGluZSIsIm1ha2UiLCJzdGFydCIsImFscGhhIiwiaWdub3JlIiwiZW5kIiwiYXNzZXJ0IiwiZ3JhcGgiLCJlZGdlcyIsIndoZW4iLCJydW4iLCJtb3ZlIiwiQSIsInRhbG9zIiwic3RhdGUiLCJkZWZhdWx0IiwiYWxzb0lnbm9yZSIsImF0IiwiQiIsIkMiLCJjb25zb2xlIiwibG9nIiwiZXF1YWwiLCJuYW1lIiwiZXhwYW5z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