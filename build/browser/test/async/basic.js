var add, grow, test;
import { Machine, Talos, $start, $end, start, run, flow } from "../../src/async";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = async function(talos) {
    return talos.context.product *= await 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        graph: {
            start: {
                hold: {
                    run: add
                }
            },
            hold: {
                hold: {
                    run: add
                }
            }
        }
    });
    B = Machine.make({
        graph: {
            start: {
                first: {
                    run: grow
                }
            },
            first: {
                second: {
                    run: grow
                }
            },
            second: {
                end: {
                    run: grow
                }
            }
        }
    });
    return [
        h.test("start", h.target("async", function() {
            return h.assert(Type.isReactor(start(A)));
        })),
        h.test("run while consuming events", h.target("async", async function() {
            var events, ref, talos;
            events = [
                new Promise(function(resolve, reject) {
                    return resolve(1);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(2);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(3);
                })
            ];
            talos = await run(A, {
                sum: 0
            }, events);
            return h.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        h.test("run without events and reconsume context", h.target("async", async function() {
            var ref, talos;
            talos = await run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("flow functional composition", h.target("async", async function() {
            var a, b, b2, c, context, error, f, g;
            a = async function(talos) {
                return talos.context.sum = await 1;
            };
            b = async function(talos) {
                return talos.context.sum += await 2;
            };
            b2 = async function() {
                await null;
                throw new Error("b2");
            };
            c = async function(talos) {
                return talos.context.sum += await 3;
            };
            f = flow([
                a,
                b,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = await f();
            h.assert.equal(8, context != null ? context.sum : void 0);
            g = flow([
                a,
                b,
                b2,
                c
            ]);
            try {
                await g();
                throw new Error("did not throw");
            } catch (error1) {
                error = error1;
                return h.assert(error.message === "b2");
            }
        })),
        h.test("handles error", h.target("async", async function() {
            var a, b, c, talos;
            a = async function(talos) {
                return talos.context.sum = await 1;
            };
            b = function(talos) {
                throw new Error("b");
            };
            c = async function(talos) {
                return talos.context.sum += await 3;
            };
            talos = await run(start([
                a,
                b,
                c
            ]));
            h.assert(talos.failure);
            h.assert.equal($end, talos.state);
            return h.assert.equal("b", talos.previousState);
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy90ZXN0L2FzeW5jL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsS0FBbEI7RUFBeUIsTUFBekI7RUFBaUMsSUFBakM7RUFBdUMsS0FBdkM7RUFBOEMsR0FBOUM7RUFBbUQsSUFBbkQ7Q0FBQSxNQUFBOztBQUNBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFFQSxHQUFBLEdBQU0sUUFBQSxDQUFFLEtBQUYsRUFBUyxLQUFULENBQUE7U0FDSixLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsSUFBcUI7QUFEakI7O0FBRU4sSUFBQSxHQUFPLE1BQUEsUUFBQSxDQUFFLEtBQUYsQ0FBQTtTQUNMLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBZCxJQUF5QixDQUFBLE1BQU0sQ0FBTjtBQURwQjs7QUFJUCxJQUFBLEdBQU8sUUFBQSxDQUFBLENBQUE7QUFDUCxNQUFBLENBQUEsRUFBQTtFQUFFLENBQUEsR0FBSSxPQUFPLENBQUMsSUFBUixDQUFhO0lBQUEsS0FBQSxFQUNmO01BQUEsS0FBQSxFQUNFO1FBQUEsSUFBQSxFQUNFO1VBQUEsR0FBQSxFQUFLO1FBQUw7TUFERixDQURGO01BR0EsSUFBQSxFQUNFO1FBQUEsSUFBQSxFQUNFO1VBQUEsR0FBQSxFQUFLO1FBQUw7TUFERjtJQUpGO0VBRGUsQ0FBYjtFQVFKLENBQUEsR0FBSSxPQUFPLENBQUMsSUFBUixDQUFhO0lBQUEsS0FBQSxFQUNmO01BQUEsS0FBQSxFQUNFO1FBQUEsS0FBQSxFQUNFO1VBQUEsR0FBQSxFQUFLO1FBQUw7TUFERixDQURGO01BR0EsS0FBQSxFQUNFO1FBQUEsTUFBQSxFQUNFO1VBQUEsR0FBQSxFQUFLO1FBQUw7TUFERixDQUpGO01BTUEsTUFBQSxF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QixLQUFLLENBQUMsYUFBMUI7SUFSd0MsQ0FBbEIsQ0FBeEIsQ0FuQ0Y7O0FBckJLOztBQW1FUCxPQUFBO0VBQVMsSUFBQSxTQUFUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCwgc3RhcnQsIHJ1biwgZmxvdyB9IGZyb20gXCIuLi8uLi9zcmMvYXN5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSBhd2FpdCAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2UgZ3JhcGg6XG4gICAgc3RhcnQ6XG4gICAgICBob2xkOiBcbiAgICAgICAgcnVuOiBhZGRcbiAgICBob2xkOlxuICAgICAgaG9sZDpcbiAgICAgICAgcnVuOiBhZGRcblxuICBCID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc1JlYWN0b3Igc3RhcnQgQVxuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIGNvbnN1bWluZyBldmVudHNcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyBcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDFcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDJcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDNcbiAgICAgIF1cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEEsIHN1bTogMCwgZXZlbnRzXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcy5jb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcInJ1biB3aXRob3V0IGV2ZW50cyBhbmQgcmVjb25zdW1lIGNvbnRleHRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gQiwgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiZmxvdyBmdW5jdGlvbmFsIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGEgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gPSBhd2FpdCAxXG4gICAgICBiID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IGF3YWl0IDJcbiAgICAgIGIyID0gLT4gYXdhaXQgbnVsbDsgdGhyb3cgbmV3IEVycm9yIFwiYjJcIlxuICAgICAgYyA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSBhd2FpdCAzIFxuXG4gICAgICBmID0gZmxvdyBbIGEsIGIsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBhd2FpdCBmKClcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIGNvbnRleHQ/LnN1bVxuXG4gICAgICBnID0gZmxvdyBbIGEsIGIsIGIyLCBjIF1cbiAgICAgIHRyeVxuICAgICAgICBhd2FpdCBnKClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiZGlkIG5vdCB0aHJvd1wiXG4gICAgICBjYXRjaCBlcnJvclxuICAgICAgICBoLmFzc2VydCBlcnJvci5tZXNzYWdlID09IFwiYjJcIlxuXG4gICAgaC50ZXN0IFwiaGFuZGxlcyBlcnJvclwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0aHJvdyBuZXcgRXJyb3IgXCJiXCJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gc3RhcnQgWyBhLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IHRhbG9zLmZhaWx1cmVcbiAgICAgIGguYXNzZXJ0LmVxdWFsICRlbmQsIHRhbG9zLnN0YXRlXG4gICAgICBoLmFzc2VydC5lcXVhbCBcImJcIiwgdGFsb3MucHJldmlvdXNTdGF0ZVxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSJdfQ==
 //# sourceURL=/@dashkite/talos/test/async/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9hc3luYy9iYXNpYy5jb2ZmZWUiLCI8YW5vbj4iXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCwgc3RhcnQsIHJ1biwgZmxvdyB9IGZyb20gXCIuLi8uLi9zcmMvYXN5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSBhd2FpdCAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2UgZ3JhcGg6XG4gICAgc3RhcnQ6XG4gICAgICBob2xkOiBcbiAgICAgICAgcnVuOiBhZGRcbiAgICBob2xkOlxuICAgICAgaG9sZDpcbiAgICAgICAgcnVuOiBhZGRcblxuICBCID0gTWFjaGluZS5tYWtlIGdyYXBoOlxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc1JlYWN0b3Igc3RhcnQgQVxuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIGNvbnN1bWluZyBldmVudHNcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyBcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDFcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDJcbiAgICAgICAgbmV3IFByb21pc2UgKCByZXNvbHZlLCByZWplY3QgKSAtPiByZXNvbHZlIDNcbiAgICAgIF1cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEEsIHN1bTogMCwgZXZlbnRzXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcy5jb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcInJ1biB3aXRob3V0IGV2ZW50cyBhbmQgcmVjb25zdW1lIGNvbnRleHRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gQiwgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiZmxvdyBmdW5jdGlvbmFsIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGEgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gPSBhd2FpdCAxXG4gICAgICBiID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtICs9IGF3YWl0IDJcbiAgICAgIGIyID0gLT4gYXdhaXQgbnVsbDsgdGhyb3cgbmV3IEVycm9yIFwiYjJcIlxuICAgICAgYyA9ICggdGFsb3MgKSAtPiB0YWxvcy5jb250ZXh0LnN1bSArPSBhd2FpdCAzIFxuXG4gICAgICBmID0gZmxvdyBbIGEsIGIsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBhd2FpdCBmKClcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIGNvbnRleHQ/LnN1bVxuXG4gICAgICBnID0gZmxvdyBbIGEsIGIsIGIyLCBjIF1cbiAgICAgIHRyeVxuICAgICAgICBhd2FpdCBnKClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIFwiZGlkIG5vdCB0aHJvd1wiXG4gICAgICBjYXRjaCBlcnJvclxuICAgICAgICBoLmFzc2VydCBlcnJvci5tZXNzYWdlID09IFwiYjJcIlxuXG4gICAgaC50ZXN0IFwiaGFuZGxlcyBlcnJvclwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcyApIC0+IHRhbG9zLmNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MgKSAtPiB0aHJvdyBuZXcgRXJyb3IgXCJiXCJcbiAgICAgIGMgPSAoIHRhbG9zICkgLT4gdGFsb3MuY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gc3RhcnQgWyBhLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IHRhbG9zLmZhaWx1cmVcbiAgICAgIGguYXNzZXJ0LmVxdWFsICRlbmQsIHRhbG9zLnN0YXRlXG4gICAgICBoLmFzc2VydC5lcXVhbCBcImJcIiwgdGFsb3MucHJldmlvdXNTdGF0ZVxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSIsbnVsbF0sIm5hbWVzIjpbImFkZCIsImdyb3ciLCJ0ZXN0IiwiTWFjaGluZSIsIlRhbG9zIiwiJHN0YXJ0IiwiJGVuZCIsInN0YXJ0IiwicnVuIiwiZmxvdyIsIlR5cGUiLCJoIiwidGFsb3MiLCJldmVudCIsImNvbnRleHQiLCJzdW0iLCJwcm9kdWN0IiwiQSIsIkIiLCJtYWtlIiwiZ3JhcGgiLCJob2xkIiwiZmlyc3QiLCJzZWNvbmQiLCJlbmQiLCJ0YXJnZXQiLCJhc3NlcnQiLCJpc1JlYWN0b3IiLCJldmVudHMiLCJyZWYiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVxdWFsIiwiYSIsImIiLCJiMiIsImMiLCJlcnJvciIsImYiLCJnIiwiRXJyb3IiLCJpc0Z1bmN0aW9uIiwiZXJyb3IxIiwibWVzc2FnZSIsImZhaWx1cmUiLCJzdGF0ZSIsInByZXZpb3VzU3RhdGUiLCJiYXNpYyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUEsS0FBQUMsTUFBQUM7QUFBQSxT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