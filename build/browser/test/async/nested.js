var test;
import { Machine, $end, start, run } from "../../src/async";
import * as h from "../helpers";
test = function() {
    var A, B, Run;
    Run = {
        grow: async function(talos) {
            return talos.context.product *= await 2;
        }
    };
    A = Machine.make({
        name: "A",
        graph: {
            start: {
                default: "second"
            },
            second: {
                default: {
                    run: Run.grow,
                    move: "third"
                }
            },
            third: {
                default: {
                    run: Run.grow,
                    move: $end
                }
            }
        }
    });
    Run.join = async function*(talos) {
        var inner, ref, results;
        ref = start(A, talos.context);
        results = [];
        for await (inner of ref){
            results.push((yield inner));
        }
        return results;
    };
    B = Machine.make({
        name: "B",
        graph: {
            start: {
                default: "first"
            },
            first: {
                default: {
                    run: Run.grow,
                    move: "join"
                }
            },
            join: {
                default: {
                    run: Run.join,
                    move: $end
                }
            }
        }
    });
    return [
        h.test("completes operation", h.target("sync", async function() {
            var ref, talos;
            talos = await run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("exposes lower order talos instance", h.target("sync", async function() {
            var expected, ref, states, talos;
            states = [];
            ref = start(B, {
                product: 1
            });
            for await (talos of ref){
                states.push({
                    name: talos.name,
                    state: talos.state
                });
            }
            expected = [
                {
                    name: "B",
                    state: "first"
                },
                {
                    name: "B",
                    state: "join"
                },
                {
                    name: "A",
                    state: "second"
                },
                {
                    name: "A",
                    state: "third"
                },
                {
                    name: "A",
                    state: $end
                },
                {
                    name: "B",
                    state: $end
                }
            ];
            return h.assert.deepEqual(expected, states);
        }))
    ];
};
export { test as nested }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy90ZXN0L2FzeW5jL25lc3RlZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxPQUFBO0VBQVMsT0FBVDtFQUFrQixJQUFsQjtFQUF3QixLQUF4QjtFQUErQixHQUEvQjtDQUFBLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFHQSxJQUFBLEdBQU8sUUFBQSxDQUFBLENBQUE7QUFDUCxNQUFBLENBQUEsRUFBQSxDQUFBLEVBQUE7RUFBRSxHQUFBLEdBQ0U7SUFBQSxJQUFBLEVBQU0sTUFBQSxRQUFBLENBQUUsS0FBRixDQUFBO2FBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFkLElBQXlCLENBQUEsTUFBTSxDQUFOO0lBRHJCO0VBQU47RUFHRixDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FDRjtJQUFBLElBQUEsRUFBTSxHQUFOO0lBQ0EsS0FBQSxFQUNFO01BQUEsS0FBQSxFQUNFO1FBQUEsT0FBQSxFQUFTO01BQVQsQ0FERjtNQUVBLE1BQUEsRUFDRTtRQUFBLE9BQUEsRUFDRTtVQUFBLEdBQUEsRUFBSyxHQUFHLENBQUMsSUFBVDtVQUNBLElBQUEsRUFBTTtRQUROO01BREYsQ0FIRjtNQU1BLEtBQUEsRUFDRTtRQUFBLE9BQUEsRUFDRTtVQUFBLEdBQUEsRUFBSyxHQUFHLENBQUMsSUFBVDtVQUNBLElBQUEsRUFBTTtRQUROO01BREY7SUFQRjtFQUZGLENBREU7RUFjSixHQUFHLENBQUMsSUFBSixHQUFXLE1BQUEsU0FBQSxDQUFFLEtBQUYsQ0FBQTtBQUNiLFFBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFJO0FBQUE7SUFBQSx3QkFBQTttQkFDRSxDQUFBLE1BQU0sS0FBTjtJQURGLENBQUE7O0VBRFM7RUFJWCxDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FDRjtJQUFBLElBQUEsRUFBTSxHQUFOO0lBQ0EsS0FBQSxFQUNFO01BQUEsS0FBQSxFQUNFO1FBQUEsT0FBQSxFQUFTO01BQVQsQ0FERjtNQUVBLEtBQUEsRUFDRTtRQUFBLE9BQUEsRUFDRTtVQUFBLEdBQUEsRUFBSyxHQUFHLENBQUMsSUFBVDtVQUNBLElBQUEsRUFBTTtRQUROO01BREYsQ0FIRjtNQU1BLElBQUEsRUFDRTtRQUFBLE9BQUEsRUFDRTtVQUFBLEdBQUEsRUFBSyxHQUFHLENBQUMsSUFBVDtVQUNBLElBQUEsRUFBTTtRQUROO01BREY7SUFQRjtFQUZGLENBREU7U0FlSjtJQUNFLENBQUMsQ0FBQyxJQUFGLENBQU8scUJBQVA7SUFBOEIsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxNQUFUO0lBQWlCLE1BQUEsUUFBQSxDQUFBLENBQUE7QUFDbkQsVUFBQSxHQUFBO0lBQUE7TUFBTSxLQUFBLEdBQVEsQ0FBQSxNQUFNLEdBQUEsQ0FBSSxDQUFKO0lBQU87UUFBQSxPQUFBLEVBQVM7TUFBVCxDQUFQLENBQU47YUFDUixDQUFDLENBQUMsTUFBTSxDQUFDLEtBQVQsQ0FBZSxDQUFmO3VDQUErQixDQUFFLGdCQUFqQztJQUY2QyxDQUFqQixDQUE5QixDQURGO0lBS0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxvQ0FBUDtJQUE2QyxDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQ7SUFBaUIsTUFBQSxRQUFBLENBQUEsQ0FBQTtBQUNsRSxVQUFBLFFBQUE7SUFBQSxHQUFBO0lBQUEsTUFBQTtJQUFBO01BQU0sTUFBQSxHQUFTO0FBQ1Q7OztNQUFBLHdCQUFBO1FBQ0UsTUFBTSxDQUFDLElBQVAsQ0FDRTtVQUFBLElBQUEsRUFBTSxLQUFLLENBQUMsSUFBWjtVQUNBLEtBQUEsRUFBTyxLQUFLLENBQUM7UUFEYixDQURGO01BREY7TUFLQSxRQUFBLEdBQVc7UUFDVDtVQUFBLElBQUEsRUFBTSxHQUFOO1VBQ0EsS0FBQSxFQUFPO1FBRFAsQ0FEUztRQUlUO1VBQUEsSUFBQSxFQUFNLEdBQU47VUFDQSxLQUFBLEVBQU87UUFEUCxDQUpTO1FBT1Q7VUFBQSxJQUFBLEVBQU0sR0FBTjtVQUNBLEtBQUEsRUFBTztRQURQLENBUFM7UUFVVDtVQUFBLElBQUEsRUFBTSxHQUFOO1VBQ0EsS0FBQSxFQUFPO1FBRFAsQ0FWUztRQWFUO1VBQUEsSUFBQSxFQUFNLEdBQU47VUFDQSxLQUFBLEVBQU87UUFEUCxDQWJTO1FBZ0JUO1VBQUEsSUFBQSxFQUFNLEdBQU47VUFDQSxLQUFBLEVBQU87UUFEUCxDQWhCUzs7YUFvQlgsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFULENBQW1CLFFBQW5CO0lBQTZCLE1BQTdCO0lBM0I0RCxDQUFqQixDQUE3QyxDQUxGOztBQXRDSzs7QUEwRVAsT0FBQTtFQUFTLElBQUEsVUFBVCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsICRlbmQsIHN0YXJ0LCBydW4gfSBmcm9tIFwiLi4vLi4vc3JjL2FzeW5jXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5cbnRlc3QgPSAtPlxuICBSdW4gPSBcbiAgICBncm93OiAoIHRhbG9zICkgLT5cbiAgICAgIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSBhd2FpdCAyXG5cbiAgQSA9IE1hY2hpbmUubWFrZVxuICAgIG5hbWU6IFwiQVwiXG4gICAgZ3JhcGg6XG4gICAgICBzdGFydDpcbiAgICAgICAgZGVmYXVsdDogXCJzZWNvbmRcIlxuICAgICAgc2Vjb25kOlxuICAgICAgICBkZWZhdWx0OiBcbiAgICAgICAgICBydW46IFJ1bi5ncm93XG4gICAgICAgICAgbW92ZTogXCJ0aGlyZFwiXG4gICAgICB0aGlyZDogXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcnVuOiBSdW4uZ3Jvd1xuICAgICAgICAgIG1vdmU6ICRlbmRcblxuICBSdW4uam9pbiA9ICggdGFsb3MgKSAtPlxuICAgIGZvciBhd2FpdCBpbm5lciBmcm9tIHN0YXJ0IEEsIHRhbG9zLmNvbnRleHRcbiAgICAgIHlpZWxkIGlubmVyXG5cbiAgQiA9IE1hY2hpbmUubWFrZSBcbiAgICBuYW1lOiBcIkJcIlxuICAgIGdyYXBoOlxuICAgICAgc3RhcnQ6XG4gICAgICAgIGRlZmF1bHQ6IFwiZmlyc3RcIiBcbiAgICAgIGZpcnN0OlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJ1bjogUnVuLmdyb3dcbiAgICAgICAgICBtb3ZlOiBcImpvaW5cIlxuICAgICAgam9pbjogXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcnVuOiBSdW4uam9pblxuICAgICAgICAgIG1vdmU6ICRlbmRcblxuXG4gIFtcbiAgICBoLnRlc3QgXCJjb21wbGV0ZXMgb3BlcmF0aW9uXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gQiwgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiZXhwb3NlcyBsb3dlciBvcmRlciB0YWxvcyBpbnN0YW5jZVwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIHN0YXRlcyA9IFtdXG4gICAgICBmb3IgYXdhaXQgdGFsb3MgZnJvbSBzdGFydCBCLCBwcm9kdWN0OiAxXG4gICAgICAgIHN0YXRlcy5wdXNoXG4gICAgICAgICAgbmFtZTogdGFsb3MubmFtZVxuICAgICAgICAgIHN0YXRlOiB0YWxvcy5zdGF0ZVxuICAgIFxuICAgICAgZXhwZWN0ZWQgPSBbIFxuICAgICAgICBuYW1lOiBcIkJcIlxuICAgICAgICBzdGF0ZTogXCJmaXJzdFwiXG4gICAgICAsIFxuICAgICAgICBuYW1lOiBcIkJcIlxuICAgICAgICBzdGF0ZTogXCJqb2luXCJcbiAgICAgICwgXG4gICAgICAgIG5hbWU6IFwiQVwiXG4gICAgICAgIHN0YXRlOiBcInNlY29uZFwiXG4gICAgICAsIFxuICAgICAgICBuYW1lOiBcIkFcIlxuICAgICAgICBzdGF0ZTogXCJ0aGlyZFwiXG4gICAgICAsXG4gICAgICAgIG5hbWU6IFwiQVwiXG4gICAgICAgIHN0YXRlOiAkZW5kXG4gICAgICAsXG4gICAgICAgIG5hbWU6IFwiQlwiXG4gICAgICAgIHN0YXRlOiAkZW5kXG4gICAgICBdXG4gICAgICBcbiAgICAgIGguYXNzZXJ0LmRlZXBFcXVhbCBleHBlY3RlZCwgc3RhdGVzXG4gICAgICBcbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIG5lc3RlZCB9Il19
 //# sourceURL=/@dashkite/talos/test/async/nested.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9hc3luYy9uZXN0ZWQuY29mZmVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsICRlbmQsIHN0YXJ0LCBydW4gfSBmcm9tIFwiLi4vLi4vc3JjL2FzeW5jXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5cbnRlc3QgPSAtPlxuICBSdW4gPSBcbiAgICBncm93OiAoIHRhbG9zICkgLT5cbiAgICAgIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSBhd2FpdCAyXG5cbiAgQSA9IE1hY2hpbmUubWFrZVxuICAgIG5hbWU6IFwiQVwiXG4gICAgZ3JhcGg6XG4gICAgICBzdGFydDpcbiAgICAgICAgZGVmYXVsdDogXCJzZWNvbmRcIlxuICAgICAgc2Vjb25kOlxuICAgICAgICBkZWZhdWx0OiBcbiAgICAgICAgICBydW46IFJ1bi5ncm93XG4gICAgICAgICAgbW92ZTogXCJ0aGlyZFwiXG4gICAgICB0aGlyZDogXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcnVuOiBSdW4uZ3Jvd1xuICAgICAgICAgIG1vdmU6ICRlbmRcblxuICBSdW4uam9pbiA9ICggdGFsb3MgKSAtPlxuICAgIGZvciBhd2FpdCBpbm5lciBmcm9tIHN0YXJ0IEEsIHRhbG9zLmNvbnRleHRcbiAgICAgIHlpZWxkIGlubmVyXG5cbiAgQiA9IE1hY2hpbmUubWFrZSBcbiAgICBuYW1lOiBcIkJcIlxuICAgIGdyYXBoOlxuICAgICAgc3RhcnQ6XG4gICAgICAgIGRlZmF1bHQ6IFwiZmlyc3RcIiBcbiAgICAgIGZpcnN0OlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJ1bjogUnVuLmdyb3dcbiAgICAgICAgICBtb3ZlOiBcImpvaW5cIlxuICAgICAgam9pbjogXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcnVuOiBSdW4uam9pblxuICAgICAgICAgIG1vdmU6ICRlbmRcblxuXG4gIFtcbiAgICBoLnRlc3QgXCJjb21wbGV0ZXMgb3BlcmF0aW9uXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gQiwgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiZXhwb3NlcyBsb3dlciBvcmRlciB0YWxvcyBpbnN0YW5jZVwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIHN0YXRlcyA9IFtdXG4gICAgICBmb3IgYXdhaXQgdGFsb3MgZnJvbSBzdGFydCBCLCBwcm9kdWN0OiAxXG4gICAgICAgIHN0YXRlcy5wdXNoXG4gICAgICAgICAgbmFtZTogdGFsb3MubmFtZVxuICAgICAgICAgIHN0YXRlOiB0YWxvcy5zdGF0ZVxuICAgIFxuICAgICAgZXhwZWN0ZWQgPSBbIFxuICAgICAgICBuYW1lOiBcIkJcIlxuICAgICAgICBzdGF0ZTogXCJmaXJzdFwiXG4gICAgICAsIFxuICAgICAgICBuYW1lOiBcIkJcIlxuICAgICAgICBzdGF0ZTogXCJqb2luXCJcbiAgICAgICwgXG4gICAgICAgIG5hbWU6IFwiQVwiXG4gICAgICAgIHN0YXRlOiBcInNlY29uZFwiXG4gICAgICAsIFxuICAgICAgICBuYW1lOiBcIkFcIlxuICAgICAgICBzdGF0ZTogXCJ0aGlyZFwiXG4gICAgICAsXG4gICAgICAgIG5hbWU6IFwiQVwiXG4gICAgICAgIHN0YXRlOiAkZW5kXG4gICAgICAsXG4gICAgICAgIG5hbWU6IFwiQlwiXG4gICAgICAgIHN0YXRlOiAkZW5kXG4gICAgICBdXG4gICAgICBcbiAgICAgIGguYXNzZXJ0LmRlZXBFcXVhbCBleHBlY3RlZCwgc3RhdGVzXG4gICAgICBcbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIG5lc3RlZCB9Il0sIm5hbWVzIjpbInRlc3QiLCJNYWNoaW5lIiwiJGVuZCIsInN0YXJ0IiwicnVuIiwiaCIsIkEiLCJCIiwiUnVuIiwiZ3JvdyIsInRhbG9zIiwiY29udGV4dCIsInByb2R1Y3QiLCJtYWtlIiwibmFtZSIsImdyYXBoIiwiZGVmYXVsdCIsInNlY29uZCIsIm1vdmUiLCJ0aGlyZCIsImpvaW4iLCJpbm5lciIsInJlZiIsInJlc3VsdHMiLCJmaXJzdCIsInRhcmdldCIsImFzc2VydCIsImVxdWFsIiwiZXhwZWN0ZWQiLCJzdGF0ZXMiLCJwdXNoIiwic3RhdGUiLCJkZWVwRXF1YWwiLCJuZXN0ZWQiXSwibWFwcGluZ3MiOiJBQUFBLElBQUFBO0FBQUEsU0FBU0MsT0FBVCxFQUFrQkMsSUFBbEIsRUFBd0JDLEtBQXhCLEVBQStCQyxHQUEvQixRQUFBLGtCQUFBO0FBQ0EsWUFBT0MsT0FBUCxhQUFBO0FBR0FMLE9BQU87SUFDUCxJQUFBTSxHQUFBQyxHQUFBQztJQUFFQSxNQUNFO1FBQUFDLE1BQU0sZUFBRUMsS0FBRjttQkFDSkEsTUFBTUMsT0FBTyxDQUFDQyxPQUFkLElBQXlCLE1BQU07UUFEM0I7SUFBTjtJQUdGTixJQUFJTCxRQUFRWSxJQUFSLENBQ0Y7UUFBQUMsTUFBTTtRQUNOQyxPQUNFO1lBQUFaLE9BQ0U7Z0JBQUFhLFNBQVM7WUFBVDtZQUNGQyxRQUNFO2dCQUFBRCxTQUNFO29CQUFBWixLQUFLSSxJQUFJQyxJQUFUO29CQUNBUyxNQUFNO2dCQUROO1lBREY7WUFHRkMsT0FDRTtnQkFBQUgsU0FDRTtvQkFBQVosS0FBS0ksSUFBSUMsSUFBVDtvQkFDQVMsTUFBTWhCO2dCQUROO1lBREY7UUFQRjtJQUZGO0lBYUZNLElBQUlZLElBQUosR0FBVyxnQkFBRVYsS0FBRjtRQUNiLElBQUFXLE9BQUFDLEtBQUFDO1FBQUlELE1BQUFuQixNQUFBRyxHQUFBSSxNQUFBQyxPQUFBO1FBQUFZLFVBQUEsRUFBQTtRQUFBLFdBQUFGLFNBQUFDLElBQUE7eUJBQ0UsQ0FBQSxNQUFNRCxLQUFBO1FBRFI7O0lBRFM7SUFJWGQsSUFBSU4sUUFBUVksSUFBUixDQUNGO1FBQUFDLE1BQU07UUFDTkMsT0FDRTtZQUFBWixPQUNFO2dCQUFBYSxTQUFTO1lBQVQ7WUFDRlEsT0FDRTtnQkFBQVIsU0FDRTtvQkFBQVosS0FBS0ksSUFBSUMsSUFBVDtvQkFDQVMsTUFBTTtnQkFETjtZQURGO1lBR0ZFLE1BQ0U7Z0JBQUFKLFNBQ0U7b0JBQUFaLEtBQUtJLElBQUlZLElBQVQ7b0JBQ0FGLE1BQU1oQjtnQkFETjtZQURGO1FBUEY7SUFGRjtXQWNGO1FBQ0VHLEVBQUVMLElBQUYsQ0FBTyx1QkFBdUJLLEVBQUVvQixNQUFGLENBQVMsUUFBUTtZQUNuRCxJQUFBSCxLQUFBWjtZQUFNQSxRQUFRLE1BQU1OLElBQUlHLEdBQUc7Z0JBQUFLLFNBQVM7WUFBVDttQkFDckJQLEVBQUVxQixNQUFNLENBQUNDLEtBQVQsQ0FBZSx1Q0FBa0JmLE9BQUEsR0FBQSxLQUFBO1FBRlk7UUFJL0NQLEVBQUVMLElBQUYsQ0FBTyxzQ0FBc0NLLEVBQUVvQixNQUFGLENBQVMsUUFBUTtZQUNsRSxJQUFBRyxVQUFBTixLQUFBTyxRQUFBbkI7WUFBTW1CLFNBQVMsRUFBQTtZQUNUUCxNQUFBbkIsTUFBQUksR0FBQTs7O1lBQUEsV0FBQUcsU0FBQVksSUFBQTtnQkFDRU8sT0FBT0MsSUFBUCxDQUNFO29CQUFBaEIsTUFBTUosTUFBTUksSUFBWjtvQkFDQWlCLE9BQU9yQixNQUFNcUIsS0FBQTtnQkFEYjtZQUZKO1lBS0FILFdBQVc7Z0JBQ1Q7b0JBQUFkLE1BQU07b0JBQ05pQixPQUFPO2dCQURQO2dCQUdBO29CQUFBakIsTUFBTTtvQkFDTmlCLE9BQU87Z0JBRFA7Z0JBR0E7b0JBQUFqQixNQUFNO29CQUNOaUIsT0FBTztnQkFEUDtnQkFHQTtvQkFBQWpCLE1BQU07b0JBQ05pQixPQUFPO2dCQURQO2dCQUdBO29CQUFBakIsTUFBTTtvQkFDTmlCLE9BQU83QjtnQkFEUDtnQkFHQTtvQkFBQVksTUFBTTtvQkFDTmlCLE9BQU83QjtnQkFEUDs7bUJBSUZHLEVBQUVxQixNQUFNLENBQUNNLFNBQVQsQ0FBbUJKLFVBQVVDO1FBM0IrQjs7QUEzQzNEO0FBMEVQLFNBQVM3QixRQUFBaUMsTUFBVCJ9