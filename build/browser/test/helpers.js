var Confidential, doesMatch, now, random, target, targets, test;
import assert from "@dashkite/assert";
import { test as amenTest } from "@dashkite/amen";
import { confidential } from "panda-confidential";
Confidential = confidential();
test = function(name, value) {
    if (Array.isArray(value)) {
        return amenTest(name, value);
    } else {
        return amenTest({
            description: name,
            wait: false
        }, value);
    }
};
targets = function() {
    var _targets, ref, ref1;
    _targets = (ref = (ref1 = process.env.targets) != null ? ref1.split(/\s+/) : void 0) != null ? ref : [
        "all"
    ];
    return _targets;
}();
doesMatch = function(name) {
    var i, len, target;
    for(i = 0, len = targets.length; i < len; i++){
        target = targets[i];
        if (name.startsWith(target)) {
            return true;
        }
    }
    return false;
};
target = function(name, value) {
    if (targets.includes("all")) {
        return value;
    } else if (doesMatch(name)) {
        return value;
    } else {
        return null;
    }
};
random = async function(options = {}) {
    var encoding, length;
    ({ length = 16, encoding = "base36" } = options);
    return Confidential.convert({
        from: "bytes",
        to: encoding
    }, await Confidential.randomBytes(length));
};
now = function() {
    return new Date().toISOString();
};
export { target, random, now, test, assert }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy90ZXN0L2hlbHBlcnMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsWUFBQSxFQUFBLFNBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUE7O0FBQUEsT0FBTyxNQUFQLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLElBQUEsWUFBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLFlBQVQ7Q0FBQSxNQUFBOztBQUVBLFlBQUEsR0FBZSxZQUFBLENBQUE7O0FBRWYsSUFBQSxHQUFPLFFBQUEsQ0FBRSxJQUFGLEVBQVEsS0FBUixDQUFBO0VBQ0wsSUFBRyxLQUFLLENBQUMsT0FBTixDQUFjLEtBQWQsQ0FBSDtXQUNFLFFBQUEsQ0FBUyxJQUFULEVBQWUsS0FBZixFQURGO0dBQUEsTUFBQTtXQUdFLFFBQUEsQ0FBUztNQUFBLFdBQUEsRUFBYSxJQUFiO01BQW1CLElBQUEsRUFBTTtJQUF6QixDQUFULEVBQXlDLEtBQXpDLEVBSEY7O0FBREs7O0FBTVAsT0FBQSxHQUFhLENBQUEsUUFBQSxDQUFBLENBQUE7QUFDYixNQUFBLFFBQUEsRUFBQSxHQUFBLEVBQUE7RUFBRSxRQUFBLDZGQUFrRCxDQUFFLEtBQUY7U0FDbEQ7QUFGVyxDQUFBOztBQUliLFNBQUEsR0FBWSxRQUFBLENBQUUsSUFBRixDQUFBO0FBQ1osTUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBO0VBQUUsS0FBQSx5Q0FBQTs7SUFDRSxJQUFHLElBQUksQ0FBQyxVQUFMLENBQWdCLE1BQWhCLENBQUg7QUFDRSxhQUFPLEtBRFQ7O0VBREY7U0FHQTtBQUpVOztBQU1aLE1BQUEsR0FBUyxRQUFBLENBQUUsSUFBRixFQUFRLEtBQVIsQ0FBQTtFQUNQLElBQUcsT0FBTyxDQUFDLFFBQVIsQ0FBaUIsS0FBakIsQ0FBSDtXQUNFLE1BREY7R0FBQSxNQUVLLElBQUcsU0FBQSxDQUFVLElBQVYsQ0FBSDtXQUNILE1BREc7R0FBQSxNQUFBO1dBR0gsS0FIRzs7QUFIRTs7QUFTVCxNQUFBLEdBQVMsTUFBQSxRQUFBLENBQUUsVUFBVSxDQUFBLENBQVosQ0FBQTtBQUNULE1BQUEsUUFBQSxFQUFBO0VBQUUsQ0FBQSxDQUFFLE1BQUEsR0FBUyxFQUFYLEVBQWUsUUFBQSxHQUFXLFFBQTFCLENBQUEsR0FBdUMsT0FBdkM7U0FDQSxZQUFZLENBQUMsT0FBYixDQUFxQjtJQUFBLElBQUEsRUFBTSxPQUFOO0lBQWUsRUFBQSxFQUFJO0VBQW5CLENBQXJCLEVBQ0UsQ0FBQSxNQUFNLFlBQVksQ0FBQyxXQUFiLENBQXlCLE1BQXpCLENBQU4sQ0FERjtBQUZPOztBQUtULEdBQUEsR0FBTSxRQUFBLENBQUEsQ0FBQTtTQUFHLENBQUUsSUFBSSxJQUFKLENBQUEsQ0FBRixDQUFZLENBQUMsV0FBYixDQUFBO0FBQUg7O0FBSU4sT0FBQTtFQUNFLE1BREY7RUFFRSxNQUZGO0VBR0UsR0FIRjtFQUlFLElBSkY7RUFLRSxNQUxGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tIFwiQGRhc2hraXRlL2Fzc2VydFwiXG5pbXBvcnQgeyB0ZXN0IGFzIGFtZW5UZXN0IH0gZnJvbSBcIkBkYXNoa2l0ZS9hbWVuXCJcbmltcG9ydCB7IGNvbmZpZGVudGlhbCB9IGZyb20gXCJwYW5kYS1jb25maWRlbnRpYWxcIjtcblxuQ29uZmlkZW50aWFsID0gY29uZmlkZW50aWFsKClcblxudGVzdCA9ICggbmFtZSwgdmFsdWUgKSAtPlxuICBpZiBBcnJheS5pc0FycmF5IHZhbHVlXG4gICAgYW1lblRlc3QgbmFtZSwgdmFsdWVcbiAgZWxzZVxuICAgIGFtZW5UZXN0IGRlc2NyaXB0aW9uOiBuYW1lLCB3YWl0OiBmYWxzZSwgdmFsdWVcblxudGFyZ2V0cyA9IGRvIC0+XG4gIF90YXJnZXRzID0gKCBwcm9jZXNzLmVudi50YXJnZXRzPy5zcGxpdCAvXFxzKy8gKSA/IFsgXCJhbGxcIiBdXG4gIF90YXJnZXRzXG5cbmRvZXNNYXRjaCA9ICggbmFtZSApIC0+XG4gIGZvciB0YXJnZXQgaW4gdGFyZ2V0c1xuICAgIGlmIG5hbWUuc3RhcnRzV2l0aCB0YXJnZXRcbiAgICAgIHJldHVybiB0cnVlXG4gIGZhbHNlXG5cbnRhcmdldCA9ICggbmFtZSwgdmFsdWUgKSAtPlxuICBpZiB0YXJnZXRzLmluY2x1ZGVzIFwiYWxsXCJcbiAgICB2YWx1ZVxuICBlbHNlIGlmIGRvZXNNYXRjaCBuYW1lXG4gICAgdmFsdWVcbiAgZWxzZVxuICAgIG51bGxcblxuXG5yYW5kb20gPSAoIG9wdGlvbnMgPSB7fSApIC0+XG4gIHsgbGVuZ3RoID0gMTYsIGVuY29kaW5nID0gXCJiYXNlMzZcIiB9ID0gb3B0aW9uc1xuICBDb25maWRlbnRpYWwuY29udmVydCBmcm9tOiBcImJ5dGVzXCIsIHRvOiBlbmNvZGluZyxcbiAgICBhd2FpdCBDb25maWRlbnRpYWwucmFuZG9tQnl0ZXMgbGVuZ3RoXG5cbm5vdyA9IC0+ICggbmV3IERhdGUgKS50b0lTT1N0cmluZygpXG5cblxuXG5leHBvcnQge1xuICB0YXJnZXRcbiAgcmFuZG9tXG4gIG5vd1xuICB0ZXN0XG4gIGFzc2VydFxufVxuIl19
 //# sourceURL=/@dashkite/talos/test/helpers.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9oZWxwZXJzLmNvZmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJAZGFzaGtpdGUvYXNzZXJ0XCJcbmltcG9ydCB7IHRlc3QgYXMgYW1lblRlc3QgfSBmcm9tIFwiQGRhc2hraXRlL2FtZW5cIlxuaW1wb3J0IHsgY29uZmlkZW50aWFsIH0gZnJvbSBcInBhbmRhLWNvbmZpZGVudGlhbFwiO1xuXG5Db25maWRlbnRpYWwgPSBjb25maWRlbnRpYWwoKVxuXG50ZXN0ID0gKCBuYW1lLCB2YWx1ZSApIC0+XG4gIGlmIEFycmF5LmlzQXJyYXkgdmFsdWVcbiAgICBhbWVuVGVzdCBuYW1lLCB2YWx1ZVxuICBlbHNlXG4gICAgYW1lblRlc3QgZGVzY3JpcHRpb246IG5hbWUsIHdhaXQ6IGZhbHNlLCB2YWx1ZVxuXG50YXJnZXRzID0gZG8gLT5cbiAgX3RhcmdldHMgPSAoIHByb2Nlc3MuZW52LnRhcmdldHM/LnNwbGl0IC9cXHMrLyApID8gWyBcImFsbFwiIF1cbiAgX3RhcmdldHNcblxuZG9lc01hdGNoID0gKCBuYW1lICkgLT5cbiAgZm9yIHRhcmdldCBpbiB0YXJnZXRzXG4gICAgaWYgbmFtZS5zdGFydHNXaXRoIHRhcmdldFxuICAgICAgcmV0dXJuIHRydWVcbiAgZmFsc2VcblxudGFyZ2V0ID0gKCBuYW1lLCB2YWx1ZSApIC0+XG4gIGlmIHRhcmdldHMuaW5jbHVkZXMgXCJhbGxcIlxuICAgIHZhbHVlXG4gIGVsc2UgaWYgZG9lc01hdGNoIG5hbWVcbiAgICB2YWx1ZVxuICBlbHNlXG4gICAgbnVsbFxuXG5cbnJhbmRvbSA9ICggb3B0aW9ucyA9IHt9ICkgLT5cbiAgeyBsZW5ndGggPSAxNiwgZW5jb2RpbmcgPSBcImJhc2UzNlwiIH0gPSBvcHRpb25zXG4gIENvbmZpZGVudGlhbC5jb252ZXJ0IGZyb206IFwiYnl0ZXNcIiwgdG86IGVuY29kaW5nLFxuICAgIGF3YWl0IENvbmZpZGVudGlhbC5yYW5kb21CeXRlcyBsZW5ndGhcblxubm93ID0gLT4gKCBuZXcgRGF0ZSApLnRvSVNPU3RyaW5nKClcblxuXG5cbmV4cG9ydCB7XG4gIHRhcmdldFxuICByYW5kb21cbiAgbm93XG4gIHRlc3RcbiAgYXNzZXJ0XG59XG4iXSwibmFtZXMiOlsiQ29uZmlkZW50aWFsIiwiZG9lc01hdGNoIiwibm93IiwicmFuZG9tIiwidGFyZ2V0IiwidGFyZ2V0cyIsInRlc3QiLCJhc3NlcnQiLCJhbWVuVGVzdCIsImNvbmZpZGVudGlhbCIsIm5hbWUiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsImRlc2NyaXB0aW9uIiwid2FpdCIsIl90YXJnZXRzIiwicmVmIiwicmVmMSIsInByb2Nlc3MiLCJlbnYiLCJzcGxpdCIsImkiLCJsZW4iLCJsZW5ndGgiLCJzdGFydHNXaXRoIiwiaW5jbHVkZXMiLCJvcHRpb25zIiwiZW5jb2RpbmciLCJjb252ZXJ0IiwiZnJvbSIsInRvIiwicmFuZG9tQnl0ZXMiLCJEYXRlIiwidG9JU09TdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBLElBQUFBLGNBQUFDLFdBQUFDLEtBQUFDLFFBQUFDLFFBQUFDLFNBQUFDO0FBQUEsT0FBT0MsWUFBUCxtQkFBQTtBQUNBLFNBQVNELFFBQUFFLFFBQVQsUUFBQSxpQkFBQTtBQUNBLFNBQVNDLFlBQVQsUUFBQSxxQkFBQTtBQUVBVCxlQUFlUztBQUVmSCxPQUFPLFNBQUVJLElBQUYsRUFBUUMsS0FBUjtJQUNMLElBQUdDLE1BQU1DLE9BQU4sQ0FBY0YsUUFBakI7ZUFDRUgsU0FBU0UsTUFBTUM7V0FEakI7ZUFHRUgsU0FBUztZQUFBTSxhQUFhSjtZQUFNSyxNQUFNO1FBQXpCLEdBQWdDSjs7QUFKdEM7QUFNUE4sVUFBYTtJQUNiLElBQUFXLFVBQUFDLEtBQUFDO0lBQUVGLFdBQUEsQUFBQUMsQ0FBQUEsTUFBQSxBQUFBQyxDQUFBQSxPQUFBQyxRQUFBQyxHQUFBLENBQUFmLE9BQUEsS0FBQSxPQUFBYSxLQUFBRyxLQUFBLENBQUEsU0FBQSxLQUFBLENBQUEsS0FBQSxPQUFBSixNQUFrRDtRQUFFO0tBQUY7V0FDbEREO0FBRlc7QUFJYmYsWUFBWSxTQUFFUyxJQUFGO0lBQ1osSUFBQVksR0FBQUMsS0FBQW5CO0lBQUUsSUFBQWtCLElBQUEsR0FBQUMsTUFBQWxCLFFBQUFtQixNQUFBLEVBQUFGLElBQUFDLEtBQUFELElBQUE7O1FBQ0UsSUFBR1osS0FBS2UsVUFBTCxDQUFnQnJCLFNBQW5CO1lBQ0UsT0FBTzs7SUFGWDtXQUdBO0FBSlU7QUFNWkEsU0FBUyxTQUFFTSxJQUFGLEVBQVFDLEtBQVI7SUFDUCxJQUFHTixRQUFRcUIsUUFBUixDQUFpQixRQUFwQjtlQUNFZjtXQUNHLElBQUdWLFVBQVVTLE9BQWI7ZUFDSEM7V0FERztlQUdIOztBQU5LO0FBU1RSLFNBQVMsZUFBRXdCLFVBQVUsQ0FBQSxDQUFaO0lBQ1QsSUFBQUMsVUFBQUo7SUFBRSxDQUFBLEVBQUVBLFNBQVMsRUFBWCxFQUFlSSxXQUFXLFFBQTFCLEVBQUEsR0FBdUNELE9BQUE7V0FDdkMzQixhQUFhNkIsT0FBYixDQUFxQjtRQUFBQyxNQUFNO1FBQVNDLElBQUlIO0lBQW5CLEdBQ25CLE1BQU01QixhQUFhZ0MsV0FBYixDQUF5QlI7QUFIMUI7QUFLVHRCLE1BQU07V0FBRyxBQUFFLElBQUkrQixPQUFPQyxXQUFiO0FBQUg7QUFJTixTQUNFOUIsTUFERixFQUVFRCxNQUZGLEVBR0VELEdBSEYsRUFJRUksSUFKRixFQUtFQyxNQUxGIn0=