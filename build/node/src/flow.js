"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flow = void 0;
var Fn = _interopRequireWildcard(require("@dashkite/joy/function"));
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _generic = require("@dashkite/joy/generic");
var _index = require("./containers/index.js");
var _states = require("./states.js");
var Errors = _interopRequireWildcard(require("./containers/errors.js"));
var Sync = _interopRequireWildcard(require("./strict/sync.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var _flow, buildGraph, check, flow, isFunctionArray;
buildGraph = function (fx) {
  var current, f, graph, i, j, len, next;
  graph = {};
  for (i = j = 0, len = fx.length; j < len; i = ++j) {
    f = fx[i];
    current = i === 0 ? _states.$start : `${i}`;
    next = i === fx.length - 1 ? _states.$halt : `${i + 1}`;
    graph[current] = [{
      accept: true,
      run: f,
      move: next
    }];
  }
  return _index.Graph.make(graph);
};
check = function (talos) {
  if (talos.error != null) {
    throw talos.error.error;
  }
};
isFunctionArray = function (fx) {
  var f, j, len;
  if (!Type.isArray(fx)) {
    return false;
  }
  for (j = 0, len = fx.length; j < len; j++) {
    f = fx[j];
    if (!Type.isFunction(f)) {
      return false;
    }
  }
  return true;
};
exports.flow = flow = (0, _generic.generic)({
  name: "talos flow",
  default: function (...args) {
    throw new Error(`flow: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(flow, isFunctionArray, function (fx) {
  return _flow(fx);
});
_flow = function (fx) {
  var drive, f, graph, talos;
  if (fx.length === 0) {
    return Fn.identity;
  }
  f = fx[0];
  graph = buildGraph(fx);
  talos = _index.Talos.make();
  drive = Drive.make(graph, talos, Sync.step);
  return Fn.arity(f.length, async function (...args) {
    var j, ref;
    await drive.update(...args);
    check(talos);
    if (talos.halted) {
      return talos.context;
    }
    for (j = 1, ref = fx.length; 1 <= ref ? j < ref : j > ref; 1 <= ref ? j++ : j--) {
      await drive.update();
      check(talos);
    }
    return talos.context;
  });
};
//# sourceMappingURL=data:application/json;base64,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RUFBWCxDQUFBO0VBQ1IsS0FBQSxHQUFRLFlBQUssQ0FBQyxJQUFOLENBQUEsQ0FBQTtFQUNSLEtBQUEsR0FBUSxLQUFLLENBQUMsSUFBTixDQUFXLEtBQVgsRUFBa0IsS0FBbEIsRUFBeUIsSUFBSSxDQUFDLElBQTlCLENBQUE7U0FFUixFQUFFLENBQUMsS0FBSCxDQUFTLENBQUMsQ0FBQyxNQUFYLEVBQW1CLGdCQUFBLEdBQUUsSUFBRixFQUFBO0lBQ3JCLElBQUEsQ0FBQSxFQUFBLEdBQUE7SUFBSSxNQUFNLEtBQUssQ0FBQyxNQUFOLENBQWEsR0FBQSxJQUFiLENBQUE7SUFDTixLQUFBLENBQU0sS0FBTixDQUFBO0lBQ0EsSUFBRyxLQUFLLENBQUMsTUFBVCxFQUFBO01BQ0UsT0FBTyxLQUFLLENBQUMsT0FEZjs7SUFHQSxLQUFJLENBQUEsR0FBQSxDQUFBLEVBQUEsR0FBQSxHQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxJQUFBLEdBQUEsR0FBQSxDQUFBLEdBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxHQUFBLEVBQUEsQ0FBQSxJQUFBLEdBQUEsR0FBQSxDQUFBLEVBQUEsR0FBQSxDQUFBLEVBQUosRUFBQTtNQUNFLE1BQU0sS0FBSyxDQUFDLE1BQU4sQ0FBQSxDQUFBO01BQ04sS0FBQSxDQUFNLEtBQU4sQ0FBQTtJQUZGO1dBSUEsS0FBSyxDQUFDLE9BQUE7RUFWVyxDQUFuQixDQUFBO0FBVE0sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEZuIGZyb20gXCJAZGFzaGtpdGUvam95L2Z1bmN0aW9uXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgeyBHcmFwaCwgVGFsb3MgfSBmcm9tIFwiLi9jb250YWluZXJzXCJcbmltcG9ydCB7ICRzdGFydCwgJGhhbHQgfSBmcm9tIFwiLi9zdGF0ZXNcIlxuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gXCIuL2NvbnRhaW5lcnMvZXJyb3JzXCJcbmltcG9ydCAqIGFzIFN5bmMgZnJvbSBcIi4vc3RyaWN0L3N5bmNcIlxuXG5cbmJ1aWxkR3JhcGggPSAoIGZ4ICkgLT5cbiAgZ3JhcGggPSB7fSAgICBcbiAgZm9yIGYsIGkgaW4gZnhcbiAgICBjdXJyZW50ID0gaWYgaSA9PSAwIHRoZW4gJHN0YXJ0IGVsc2UgXCIjeyBpIH1cIlxuICAgIG5leHQgPSBpZiBpID09IGZ4Lmxlbmd0aCAtIDEgdGhlbiAkaGFsdCBlbHNlIFwiI3sgaSArIDEgfVwiXG5cbiAgICBncmFwaFsgY3VycmVudCBdID0gW1xuICAgICAgYWNjZXB0OiB0cnVlXG4gICAgICBydW46IGZcbiAgICAgIG1vdmU6IG5leHRcbiAgICBdIFxuICBcbiAgR3JhcGgubWFrZSBncmFwaFxuXG5jaGVjayA9ICggdGFsb3MgKSAtPlxuICBpZiB0YWxvcy5lcnJvcj9cbiAgICB0aHJvdyB0YWxvcy5lcnJvci5lcnJvclxuXG5cbmlzRnVuY3Rpb25BcnJheSA9ICggZnggKSAtPlxuICBpZiAhIFR5cGUuaXNBcnJheSBmeFxuICAgIHJldHVybiBmYWxzZVxuICBmb3IgZiBpbiBmeFxuICAgIHJldHVybiBmYWxzZSBpZiAhIFR5cGUuaXNGdW5jdGlvbiBmXG4gIHRydWVcblxuZmxvdyA9IGdlbmVyaWMgXG4gIG5hbWU6IFwidGFsb3MgZmxvd1wiXG4gIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgIHRocm93IG5ldyBFcnJvciBcImZsb3c6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuZ2VuZXJpYyBmbG93LCBpc0Z1bmN0aW9uQXJyYXksICggZnggKSAtPlxuICBfZmxvdyBmeFxuXG5cbl9mbG93ID0gKCBmeCApIC0+XG4gIGlmIGZ4Lmxlbmd0aCA9PSAwXG4gICAgcmV0dXJuIEZuLmlkZW50aXR5XG4gIFxuICBmID0gZnhbIDAgXVxuICBncmFwaCA9IGJ1aWxkR3JhcGggZnhcbiAgdGFsb3MgPSBUYWxvcy5tYWtlKClcbiAgZHJpdmUgPSBEcml2ZS5tYWtlIGdyYXBoLCB0YWxvcywgU3luYy5zdGVwXG5cbiAgRm4uYXJpdHkgZi5sZW5ndGgsICggYXJncy4uLiApIC0+XG4gICAgYXdhaXQgZHJpdmUudXBkYXRlIGFyZ3MuLi5cbiAgICBjaGVjayB0YWxvc1xuICAgIGlmIHRhbG9zLmhhbHRlZFxuICAgICAgcmV0dXJuIHRhbG9zLmNvbnRleHRcblxuICAgIGZvciBbIDEgLi4uIGZ4Lmxlbmd0aCBdXG4gICAgICBhd2FpdCBkcml2ZS51cGRhdGUoKVxuICAgICAgY2hlY2sgdGFsb3NcblxuICAgIHRhbG9zLmNvbnRleHRcblxuXG5leHBvcnQge1xuICBmbG93XG59Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=src/flow.coffee