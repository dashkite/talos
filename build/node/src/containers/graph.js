"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Graph = void 0;
var Meta = _interopRequireWildcard(require("@dashkite/joy/metaclass"));
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _generic = require("@dashkite/joy/generic");
var _vertex = require("./vertex.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Graph, make;
make = (0, _generic.generic)({
  name: "graph make",
  default: function (...args) {
    throw new Error(`Graph.make: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(make, Type.isObject, function (graph) {
  var i, len, ref, state, vertex;
  ref = Reflect.ownKeys(graph);
  for (i = 0, len = ref.length; i < len; i++) {
    state = ref[i];
    vertex = graph[state];
    graph[state] = _vertex.Vertex.make(state, vertex);
  }
  return new Graph({
    graph
  });
});
exports.Graph = Graph = function () {
  class Graph {
    constructor({
      graph: graph1
    }) {
      this.graph = graph1;
    }
    get(talos) {
      return this.graph[talos.state];
    }
    has(talos) {
      return this.graph[talos.state] != null;
    }
  }
  ;
  Meta.mixin(Graph.prototype, [Meta.getters({})]);
  Graph.make = make;
  Graph.isType = Type.isType(Graph);
  return Graph;
}.call(void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250YWluZXJzL2dyYXBoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBLElBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLElBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLFFBQUEsR0FBQSxPQUFBO0FBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQTtBQUFBLFNBQUEseUJBQUEsQ0FBQSw2QkFBQSxPQUFBLG1CQUFBLENBQUEsT0FBQSxPQUFBLElBQUEsQ0FBQSxPQUFBLE9BQUEsWUFBQSx3QkFBQSxZQUFBLENBQUEsQ0FBQSxXQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUE7QUFBQSxTQUFBLHdCQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsVUFBQSxTQUFBLENBQUEsZUFBQSxDQUFBLHVCQUFBLENBQUEseUJBQUEsQ0FBQSxXQUFBLE9BQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLHdCQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsU0FBQSxVQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLENBQUEsSUFBQSxDQUFBLG9CQUFBLENBQUEsSUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsWUFBQSxDQUFBLENBQUEsT0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUE7QUFGQSxJQUFBLEtBQUEsRUFBQSxJQUFBO0FBTUEsSUFBQSxHQUFPLElBQUEsZ0JBQUEsRUFDTDtFQUFBLElBQUEsRUFBTSxZQUFOO0VBQ0EsT0FBQSxFQUFTLFNBQUEsQ0FBQSxHQUFFLElBQUYsRUFBQTtJQUNQLE1BQU0sSUFBSSxLQUFKLENBQVUsa0NBQWtDLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBakQsQ0FBQSxFQUFWLENBQUE7RUFEQztBQURULENBREssQ0FBQTtBQUtQLElBQUEsZ0JBQUEsRUFBUSxJQUFSLEVBQWMsSUFBSSxDQUFDLFFBQW5CLEVBQTZCLFVBQUUsS0FBRixFQUFBO0VBQzdCLElBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUE7RUFBRSxHQUFBLEdBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLENBQUE7RUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxHQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQTs7SUFDRSxNQUFBLEdBQVMsS0FBSyxDQUFFLEtBQUYsQ0FBQTtJQUNkLEtBQUssQ0FBRSxLQUFGLENBQUwsR0FBaUIsY0FBTSxDQUFDLElBQVAsQ0FBWSxLQUFaLEVBQW1CLE1BQW5CLENBQUE7RUFGbkI7U0FJQSxJQUFJLEtBQUosQ0FBVTtJQUFFO0VBQUYsQ0FBVixDQUFBO0FBTDJCLENBQTdCLENBQUE7QUFRTSxPQUFBLENBQUEsS0FBQSxHQUFBLEtBQUEsR0FBQSxZQUFBO0VBQU4sTUFBQSxLQUFBLENBQUE7SUFDRSxXQUFhLENBQUM7TUFBRyxLQUFBLEVBQUE7SUFBSCxDQUFELEVBQUE7TUFBRyxJQUFDLENBQUEsS0FBQSxHQUFBLE1BQUE7SUFBSjtJQVNiLEdBQUssQ0FBRSxLQUFGLEVBQUE7YUFDSCxJQUFDLENBQUEsS0FBSyxDQUFFLEtBQUssQ0FBQyxLQUFSLENBQUE7SUFESDtJQUdMLEdBQUssQ0FBRSxLQUFGLEVBQUE7YUFDSCxJQUFBLENBQUEsS0FBQSxDQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsSUFBQSxJQUFBO0lBREc7RUFiUDtFQUFBO0VBR0UsSUFBSSxDQUFDLEtBQUwsQ0FBVyxLQUFDLENBQUEsU0FBWixFQUFnQixDQUNkLElBQUksQ0FBQyxPQUFMLENBQWEsQ0FBQSxDQUFiLENBRGMsQ0FBaEIsQ0FBQTtFQUlBLEtBQUMsQ0FBQSxJQUFELEdBQU8sSUFBQTtFQUNQLEtBQUMsQ0FBQSxNQUFELEdBQVMsSUFBSSxDQUFDLE1BQUwsQ0FBWSxLQUFaLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBNZXRhIGZyb20gXCJAZGFzaGtpdGUvam95L21ldGFjbGFzc1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgZ2VuZXJpYyB9IGZyb20gXCJAZGFzaGtpdGUvam95L2dlbmVyaWNcIlxuaW1wb3J0IHsgVmVydGV4IH0gZnJvbSBcIi4vdmVydGV4XCJcblxuXG5tYWtlID0gZ2VuZXJpYyBcbiAgbmFtZTogXCJncmFwaCBtYWtlXCJcbiAgZGVmYXVsdDogKCBhcmdzLi4uICkgLT4gXG4gICAgdGhyb3cgbmV3IEVycm9yIFwiR3JhcGgubWFrZTogaW5wdXQgaXMgbWFsZm9ybWVkICN7SlNPTi5zdHJpbmdpZnkgYXJnc31cIlxuXG5nZW5lcmljIG1ha2UsIFR5cGUuaXNPYmplY3QsICggZ3JhcGggKSAtPlxuICBmb3Igc3RhdGUgaW4gUmVmbGVjdC5vd25LZXlzIGdyYXBoXG4gICAgdmVydGV4ID0gZ3JhcGhbIHN0YXRlIF1cbiAgICBncmFwaFsgc3RhdGUgXSA9IFZlcnRleC5tYWtlIHN0YXRlLCB2ZXJ0ZXhcblxuICBuZXcgR3JhcGggeyBncmFwaCB9XG5cblxuY2xhc3MgR3JhcGhcbiAgY29uc3RydWN0b3I6ICh7IEBncmFwaCB9KSAtPlxuXG4gIE1ldGEubWl4aW4gQDo6LCBbXG4gICAgTWV0YS5nZXR0ZXJzIHt9XG4gIF1cblxuICBAbWFrZTogbWFrZVxuICBAaXNUeXBlOiBUeXBlLmlzVHlwZSBAXG5cbiAgZ2V0OiAoIHRhbG9zICkgLT5cbiAgICBAZ3JhcGhbIHRhbG9zLnN0YXRlIF1cblxuICBoYXM6ICggdGFsb3MgKSAtPlxuICAgIEBncmFwaFsgdGFsb3Muc3RhdGUgXT9cblxuXG5leHBvcnQge1xuICBHcmFwaFxufSJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=src/containers/graph.coffee