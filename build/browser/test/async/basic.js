var add, grow, test;
import { Machine, Talos, $start, $end } from "../../src";
import { start, run } from "../../src/async";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        h.test("start", h.target("async", function() {
            var cycle;
            cycle = start(A);
            return h.assert(Type.isAsyncIterator(cycle));
        })),
        h.test("run while consuming events", h.target("async", async function() {
            var events, ref, talos;
            events = [
                new Promise(function(resolve, reject) {
                    return resolve(1);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(2);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(3);
                })
            ];
            talos = await run(A, {
                sum: 0
            }, events);
            return h.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        h.test("run without events and reconsume context", h.target("async", async function() {
            var ref, talos;
            talos = await run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("functional composition", h.target("async", async function() {
            var a, b, c, ref, talos;
            a = async function(talos, context) {
                return context.sum = await 1;
            };
            b = async function(talos, context) {
                return context.sum += await 2;
            };
            c = async function(talos, context) {
                return context.sum += await 3;
            };
            talos = await run([
                a,
                b,
                c
            ]);
            return h.assert.equal(6, talos != null ? (ref = talos.context) != null ? ref.sum : void 0 : void 0);
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9hc3luYy9iYXNpYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0VBQWtCLEtBQWxCO0VBQXlCLE1BQXpCO0VBQWlDLElBQWpDO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsS0FBVDtFQUFnQixHQUFoQjtDQUFBLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFPLENBQUEsS0FBUCxNQUFBOztBQUVBLEdBQUEsR0FBTSxRQUFBLENBQUUsS0FBRixFQUFTLEtBQVQsQ0FBQTtTQUNKLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBZCxJQUFxQjtBQURqQjs7QUFFTixJQUFBLEdBQU8sUUFBQSxDQUFFLEtBQUYsQ0FBQTtTQUNMLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBZCxJQUF5QjtBQURwQjs7QUFJUCxJQUFBLEdBQU8sUUFBQSxDQUFBLENBQUE7QUFDUCxNQUFBLENBQUEsRUFBQTtFQUFFLENBQUEsR0FBSSxPQUFPLENBQUMsSUFBUixDQUNGO0lBQUEsS0FBQSxFQUNFO01BQUEsSUFBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERixDQURGO0lBR0EsSUFBQSxFQUNFO01BQUEsSUFBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERjtFQUpGLENBREU7RUFRSixDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FDRjtJQUFBLEtBQUEsRUFDRTtNQUFBLEtBQUEsRUFDRTtRQUFBLEdBQUEsRUFBSztNQUFMO0lBREYsQ0FERjtJQUdBLEtBQUEsRUFDRTtNQUFBLE1BQUEsRUFDRTtRQUFBLEdBQUEsRUFBSztNQUFMO0lBREYsQ0FKRjtJQU1BLE1BQUEsRUFDRTtNQUFBLEdBQUEsRUFDRTtRQUFBLEdBQUEsRUFBSztNQUFMO0lBREY7RUFQRixDQURFO1NBWUo7SUFDRSxDQUFDLENBQUMsSUFBRixDQUFPLE9BQVA7SUFBZ0IsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxPQUFUO0lBQWtCLFFBQUEsQ0FBQSxDQUFBO0FBQ3RDLFVBQUE7TUFBTSxLQUFBLEdBQVEsS0FBQSxDQUFNLENBQU47YUFDUixDQUFDLENBQUMsTUFBRixDQUFTLElBQUksQ0FBQyxlQUFMLENBQXFCLEtBQXJCLENBQVQ7SUFGZ0MsQ0FBbEIsQ0FBaEIsQ0FERjtJQUtFLENBQUMsQ0FBQyxJQUFGLENBQU8sNEJBQVA7SUFBcUMsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxPQUFUO0lBQWtCLE1BQUEsUUFBQSxDQUFBLENBQUE7QUFDM0QsVUFBQSxNQUFBO0lBQUEsR0FBQTtJQUFBO01BQU0sTUFBQSxHQUFTO1FBQ1AsSUFBSSxPQUFKLENBQVksUUFBQSxDQUFFLE9BQUY7UUFBVyxNQUFYLENBQUE7aUJBQXVCLE9BQUEsQ0FBUSxDQUFSO1FBQXZCLENBQVosQ0FETztRQUVQLElBQUksT0FBSixDQUFZLFFBQUEsQ0FBRSxPQUFGO1FBQVcsTUFBWCxDQUFBO2lCQUF1QixPQUFBLENBQVEsQ0FBUjtRQUF2QixDQUFaLENBRk87UUFHUCxJQUFJLE9BQUosQ0FBWSxRQUFBLENBQUUsT0FBRjtRQUFXLE1BQVgsQ0FBQTtpQkFBdUIsT0FBQSxDQUFRLENBQVI7UUFBdkIsQ0FBWixDQUhPOztNQUtULEtBQUEsR0FBUSxDQUFBLE1BQU0sR0FBQSxDQUFJLENBQUo7SUFBTztRQUFBLEdBQUEsRUFBSztNQUFMLENBQVA7SUFBZSxNQUFmLENBQU47YUFDUixDQUFDLENBQUMsTUFBTSxDQUFDLEtBQVQsQ0FBZSxDQUFmO3VDQUErQixDQUFFLFlBQWpDO0lBUHFELENBQWxCLENBQXJDLENBTEY7SUFjRSxDQUFDLENBQUMsSUFBRixDQUFPLDBDQUFQO0lBQW1ELENBQUMsQ0FBQyxNQUFGLENBQVMsT0FBVDtJQUFrQixNQUFBLFFBQUEsQ0FBQSxDQUFBO0FBQ3pFLFVBQUEsR0FBQTtJQUFBO01BQU0sS0FBQSxHQUFRLENBQUEsTUFBTSxHQUFBLENBQUksQ0FBSjtJQUFPO1FBQUEsT0FBQSxFQUFTO01BQVQsQ0FBUCxDQUFOO2FBQ1IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsQ0FBZjt1Q0FBK0IsQ0FBRSxnQkFBakM7SUFGbUUsQ0FBbEIsQ0FBbkQsQ0FkRjtJQWtCRSxDQUFDLENBQUMsSUFBRixDQUFPLHdCQUFQO0lBQWlDLENBQUMsQ0FBQyxNQUFGLENBQVMsT0FBVDtJQUFrQixNQUFBLFFBQUEsQ0FBQSxDQUFBO0FBQ3ZELFVBQUEsQ0FBQTtJQUFBLENBQUE7SUFBQSxDQUFBO0lBQUEsR0FBQTtJQUFBO01BQU0sQ0FBQSxHQUFJLE1BQUEsUUFBQSxDQUFFLEtBQUY7SUFBUyxPQUFULENBQUE7ZUFBc0IsT0FBTyxDQUFDLEdBQVIsR0FBYyxDQUFBLE1BQU0sQ0FBTjtNQUFwQztNQUNKLENBQUEsR0FBSSxNQUFBLFFBQUEsQ0FBRSxLQUFGO0lBQVMsT0FBVCxDQUFBO2VBQXNCLE9BQU8sQ0FBQyxHQUFSLElBQWUsQ0FBQSxNQUFNLENBQU47TUFBckM7TUFDSixDQUFBLEdBQUksTUFBQSxRQUFBLENBQUUsS0FBRjtJQUFTLE9BQVQsQ0FBQTtlQUFzQixPQUFPLENBQUMsR0FBUixJQUFlLENBQUEsTUFBTSxDQUFOO01BQXJDO01BRUosS0FBQSxHQUFRLENBQUEsTUFBTSxHQUFBLENBQUksQ0FBRSxDQUFGO0lBQUssQ0FBTDtJQUFRLENBQVIsQ0FBSixDQUFOO2FBQ1IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsQ0FBZjt1REFBZ0MsQ0FBRSxxQkFBbEM7SUFOaUQsQ0FBbEIsQ0FBakMsQ0FsQkY7O0FBckJLOztBQWlEUCxPQUFBO0VBQVMsSUFBQSxTQUFUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0IHsgc3RhcnQsIHJ1biB9IGZyb20gXCIuLi8uLi9zcmMvYXN5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGN5Y2xlID0gc3RhcnQgQVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0FzeW5jSXRlcmF0b3IgY3ljbGVcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSBjb25zdW1pbmcgZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAxXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAyXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAzXG4gICAgICBdXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJydW4gd2l0aG91dCBldmVudHMgYW5kIHJlY29uc3VtZSBjb250ZXh0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImZ1bmN0aW9uYWwgY29tcG9zaXRpb25cIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSA9IGF3YWl0IDFcbiAgICAgIGIgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gKz0gYXdhaXQgMlxuICAgICAgYyA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSArPSBhd2FpdCAzIFxuXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBbIGEsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3M/LmNvbnRleHQ/LnN1bVxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBiYXNpYyB9Il19
 //# sourceURL=test/async/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYXN5bmMvYmFzaWMuY29mZmVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsIFRhbG9zLCAkc3RhcnQsICRlbmQgfSBmcm9tIFwiLi4vLi4vc3JjXCJcbmltcG9ydCB7IHN0YXJ0LCBydW4gfSBmcm9tIFwiLi4vLi4vc3JjL2FzeW5jXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuYWRkID0gKCB0YWxvcywgZXZlbnQgKSAtPlxuICB0YWxvcy5jb250ZXh0LnN1bSArPSBldmVudFxuZ3JvdyA9ICggdGFsb3MgKSAtPlxuICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gMlxuXG5cbnRlc3QgPSAtPlxuICBBID0gTWFjaGluZS5tYWtlXG4gICAgc3RhcnQ6XG4gICAgICBob2xkOiBcbiAgICAgICAgcnVuOiBhZGRcbiAgICBob2xkOlxuICAgICAgaG9sZDpcbiAgICAgICAgcnVuOiBhZGRcblxuICBCID0gTWFjaGluZS5tYWtlXG4gICAgc3RhcnQ6XG4gICAgICBmaXJzdDogXG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIGZpcnN0OlxuICAgICAgc2Vjb25kOlxuICAgICAgICBydW46IGdyb3dcbiAgICBzZWNvbmQ6IFxuICAgICAgZW5kOlxuICAgICAgICBydW46IGdyb3dcblxuXG4gIFtcbiAgICBoLnRlc3QgXCJzdGFydFwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBjeWNsZSA9IHN0YXJ0IEFcbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNBc3luY0l0ZXJhdG9yIGN5Y2xlXG5cbiAgICBoLnRlc3QgXCJydW4gd2hpbGUgY29uc3VtaW5nIGV2ZW50c1wiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBldmVudHMgPSBbIFxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgMVxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgMlxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgM1xuICAgICAgXVxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gQSwgc3VtOiAwLCBldmVudHNcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIHRhbG9zLmNvbnRleHQ/LnN1bVxuXG4gICAgaC50ZXN0IFwicnVuIHdpdGhvdXQgZXZlbnRzIGFuZCByZWNvbnN1bWUgY29udGV4dFwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBCLCBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJmdW5jdGlvbmFsIGNvbXBvc2l0aW9uXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGEgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gPSBhd2FpdCAxXG4gICAgICBiID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtICs9IGF3YWl0IDJcbiAgICAgIGMgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gWyBhLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIHRhbG9zPy5jb250ZXh0Py5zdW1cblxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSJdLCJuYW1lcyI6WyJhZGQiLCJncm93IiwidGVzdCIsIk1hY2hpbmUiLCJUYWxvcyIsIiRzdGFydCIsIiRlbmQiLCJzdGFydCIsInJ1biIsIlR5cGUiLCJoIiwidGFsb3MiLCJldmVudCIsImNvbnRleHQiLCJzdW0iLCJwcm9kdWN0IiwiQSIsIkIiLCJtYWtlIiwiaG9sZCIsImZpcnN0Iiwic2Vjb25kIiwiZW5kIiwidGFyZ2V0IiwiY3ljbGUiLCJhc3NlcnQiLCJpc0FzeW5jSXRlcmF0b3IiLCJldmVudHMiLCJyZWYiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVxdWFsIiwiYSIsImIiLCJjIiwiYmFzaWMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUFBLEtBQUFDLE1BQUFDO0FBQUEsU0FBU0MsT0FBVCxFQUFrQkMsS0FBbEIsRUFBeUJDLE1BQXpCLEVBQWlDQyxJQUFqQyxRQUFBLFlBQUE7QUFDQSxTQUFTQyxLQUFULEVBQWdCQyxHQUFoQixRQUFBLGtCQUFBO0FBQ0EsWUFBT0MsVUFBUCxxQkFBQTtBQUNBLFlBQU9DLE9BQVAsYUFBQTtBQUVBVixNQUFNLFNBQUVXLEtBQUYsRUFBU0MsS0FBVDtXQUNKRCxNQUFNRSxPQUFPLENBQUNDLEdBQWQsSUFBcUJGO0FBRGpCO0FBRU5YLE9BQU8sU0FBRVUsS0FBRjtXQUNMQSxNQUFNRSxPQUFPLENBQUNFLE9BQWQsSUFBeUI7QUFEcEI7QUFJUGIsT0FBTztJQUNQLElBQUFjLEdBQUFDO0lBQUVELElBQUliLFFBQVFlLElBQVIsQ0FDRjtRQUFBWCxPQUNFO1lBQUFZLE1BQ0U7Z0JBQUFYLEtBQUtSO1lBQUw7UUFERjtRQUVGbUIsTUFDRTtZQUFBQSxNQUNFO2dCQUFBWCxLQUFLUjtZQUFMO1FBREY7SUFKRjtJQU9GaUIsSUFBSWQsUUFBUWUsSUFBUixDQUNGO1FBQUFYLE9BQ0U7WUFBQWEsT0FDRTtnQkFBQVosS0FBS1A7WUFBTDtRQURGO1FBRUZtQixPQUNFO1lBQUFDLFFBQ0U7Z0JBQUFiLEtBQUtQO1lBQUw7UUFERjtRQUVGb0IsUUFDRTtZQUFBQyxLQUNFO2dCQUFBZCxLQUFLUDtZQUFMO1FBREY7SUFQRjtXQVdGO1FBQ0VTLEVBQUVSLElBQUYsQ0FBTyxTQUFTUSxFQUFFYSxNQUFGLENBQVMsU0FBUztZQUN0QyxJQUFBQztZQUFNQSxRQUFRakIsTUFBTVM7bUJBQ2ROLEVBQUVlLE1BQUYsQ0FBU2hCLEtBQUtpQixlQUFMLENBQXFCRjtRQUZFO1FBSWxDZCxFQUFFUixJQUFGLENBQU8sOEJBQThCUSxFQUFFYSxNQUFGLENBQVMsU0FBUztZQUMzRCxJQUFBSSxRQUFBQyxLQUFBakI7WUFBTWdCLFNBQVM7Z0JBQ1AsSUFBSUUsUUFBUSxTQUFFQyxPQUFGLEVBQVdDLE1BQVg7MkJBQXVCRCxRQUFRO2dCQUEvQjtnQkFDWixJQUFJRCxRQUFRLFNBQUVDLE9BQUYsRUFBV0MsTUFBWDsyQkFBdUJELFFBQVE7Z0JBQS9CO2dCQUNaLElBQUlELFFBQVEsU0FBRUMsT0FBRixFQUFXQyxNQUFYOzJCQUF1QkQsUUFBUTtnQkFBL0I7O1lBRWRuQixRQUFRLE1BQU1ILElBQUlRLEdBQUc7Z0JBQUFGLEtBQUs7WUFBTCxHQUFRYTttQkFDN0JqQixFQUFFZSxNQUFNLENBQUNPLEtBQVQsQ0FBZSx1Q0FBa0JsQixHQUFBLEdBQUEsS0FBQTtRQVBvQjtRQVN2REosRUFBRVIsSUFBRixDQUFPLDRDQUE0Q1EsRUFBRWEsTUFBRixDQUFTLFNBQVM7WUFDekUsSUFBQUssS0FBQWpCO1lBQU1BLFFBQVEsTUFBTUgsSUFBSVMsR0FBRztnQkFBQUYsU0FBUztZQUFUO21CQUNyQkwsRUFBRWUsTUFBTSxDQUFDTyxLQUFULENBQWUsdUNBQWtCakIsT0FBQSxHQUFBLEtBQUE7UUFGa0M7UUFJckVMLEVBQUVSLElBQUYsQ0FBTywwQkFBMEJRLEVBQUVhLE1BQUYsQ0FBUyxTQUFTO1lBQ3ZELElBQUFVLEdBQUFDLEdBQUFDLEdBQUFQLEtBQUFqQjtZQUFNc0IsSUFBSSxlQUFFdEIsS0FBRixFQUFTRSxPQUFUO3VCQUFzQkEsUUFBUUMsR0FBUixHQUFjLE1BQU07WUFBMUM7WUFDSm9CLElBQUksZUFBRXZCLEtBQUYsRUFBU0UsT0FBVDt1QkFBc0JBLFFBQVFDLEdBQVIsSUFBZSxNQUFNO1lBQTNDO1lBQ0pxQixJQUFJLGVBQUV4QixLQUFGLEVBQVNFLE9BQVQ7dUJBQXNCQSxRQUFRQyxHQUFSLElBQWUsTUFBTTtZQUEzQztZQUVKSCxRQUFRLE1BQU1ILElBQUk7Z0JBQUV5QjtnQkFBR0M7Z0JBQUdDO2FBQVo7bUJBQ2R6QixFQUFFZSxNQUFNLENBQUNPLEtBQVQsQ0FBZSx1REFBbUJsQixHQUFBLEdBQUEsS0FBQSxJQUFBLEtBQUE7UUFOZTs7QUF2Q2hEO0FBaURQLFNBQVNaLFFBQUFrQyxLQUFUIn0=