var Edge, Edges, Graph, Machine, Vertex, areVertexEdges, isEdgeShorthand, isFunctionArray, isMachineDescription, isNamedFunctionArray, isState, normalizeMove, normalizeWhen, prioritize, indexOf = [].indexOf;
import { generic } from "@dashkite/joy/generic";
import * as Type from "@dashkite/joy/type";
import { $start, $end } from "./states";
isState = function(x) {
    return Type.isString(x) || Type.isSymbol(x);
};
areVertexEdges = function(x) {
    var edge, j, len, ref;
    if (x.edges == null) {
        return false;
    }
    if (!Type.isArray(x.edges)) {
        return false;
    }
    ref = x.edges;
    for(j = 0, len = ref.length; j < len; j++){
        edge = ref[j];
        if (!Type.isObject(edge)) {
            return false;
        }
    }
    return true;
};
normalizeWhen = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return event === condition;
        };
    } else if (Type.isFunction(x)) {
        return x;
    } else if (Type.isBoolean(x)) {
        return function() {
            return x;
        };
    } else {
        throw new Error("unable to normalize when description");
    }
};
normalizeMove = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return talos.state = x;
        };
    } else if (Type.isFunction(x)) {
        return x;
    } else {
        throw new Error("unable to normalize move description");
    }
};
prioritize = function(frames) {
    return frames.sort(function(a, b) {
        if (a.priority < b.priority) {
            return -1;
        } else if (a.priority > b.priority) {
            return 1;
        } else {
            return 0;
        }
    });
};
Edge = {
    make: generic({
        name: "talos: edge make"
    })
};
generic(Edge.make, Type.isObject, function(object) {
    return {
        when: normalizeWhen(object.when),
        run: object.run,
        move: normalizeMove(object.move)
    };
});
generic(Edge.make, isState, Type.isAny, function(move, _when) {
    return Edge.make({
        move,
        when: _when
    });
});
generic(Edge.make, isState, Type.isObject, function(move, object) {
    var ref, ref1;
    return {
        when: normalizeWhen((ref = object.when) != null ? ref : true),
        run: object.run,
        move: normalizeMove((ref1 = object.move) != null ? ref1 : move)
    };
});
isEdgeShorthand = function(value) {
    var allowed, j, key, len, ref;
    if (!Type.isObject(value)) {
        return false;
    }
    allowed = [
        "when",
        "run",
        "move"
    ];
    ref = Reflect.ownKeys(value);
    for(j = 0, len = ref.length; j < len; j++){
        key = ref[j];
        if (indexOf.call(allowed, key) < 0) {
            return false;
        }
    }
    return true;
};
Edges = {
    make: generic({
        name: "talos: edges make"
    })
};
generic(Edges.make, Type.isObject, function(object) {
    var defaultFrame, edges, frames, j, k, key, len, len1, priority, ref, ref1, value;
    frames = [];
    defaultFrame = null;
    ref = Reflect.ownKeys(object);
    for(j = 0, len = ref.length; j < len; j++){
        key = ref[j];
        value = object[key];
        priority = (ref1 = value.priority) != null ? ref1 : 100;
        if (key === "default") {
            defaultFrame = {
                key,
                value
            };
        } else {
            if (key === "end") {
                key = $end;
            }
            frames.push({
                key,
                value,
                priority
            });
        }
    }
    prioritize(frames);
    edges = [];
    for(k = 0, len1 = frames.length; k < len1; k++){
        ({ key, value } = frames[k]);
        edges.push(Edge.make(key, value));
    }
    if (defaultFrame != null) {
        // default is a special case emphasizing an always true "when" function.
        ({ value } = defaultFrame);
        if (Type.isObject(value)) {
            edges.push(Edge.make({
                ...value,
                when: true
            }));
        } else {
            edges.push(Edge.make({
                when: true,
                move: value
            }));
        }
    }
    return edges;
});
generic(Edges.make, isEdgeShorthand, function(short) {
    var ref, ref1;
    return Edges.make({
        short: {
            when: (ref = short.when) != null ? ref : true,
            run: short.run,
            move: (ref1 = short.move) != null ? ref1 : $end
        }
    });
});
generic(Edges.make, Type.isArray, function(array) {
    var edge, j, len, results;
    results = [];
    for(j = 0, len = array.length; j < len; j++){
        edge = array[j];
        results.push(Edge.make(edge));
    }
    return results;
});
generic(Edges.make, Type.isFunction, function(f) {
    var edge;
    edge = {
        when: true,
        run: f,
        move: $end
    };
    return [
        Edge.make(edge)
    ];
});
generic(Edges.make, isState, function(move) {
    return Edges.make({
        [move]: true
    });
});
generic(Edges.make, areVertexEdges, function(param) {
    let { edges } = param;
    var edge, j, len, results;
    results = [];
    for(j = 0, len = edges.length; j < len; j++){
        edge = edges[j];
        results.push({
            when: edge.when,
            run: edge.run,
            move: edge.move
        });
    }
    return results;
});
Vertex = {
    make: function(key, value) {
        return {
            name: key,
            edges: Edges.make(value)
        };
    }
};
Graph = {
    fromObject: function(object) {
        var graph, j, key, len, ref;
        if (object[$start] == null) {
            if (object.start != null) {
                object[$start] = object.start;
                delete object.start;
            } else {
                throw new Error("no start state defined for this machine");
            }
        }
        if (object[$end] == null) {
            if (object.end != null) {
                object[$end] = object.end;
                delete object.end;
            }
        }
        graph = {};
        ref = Reflect.ownKeys(object);
        for(j = 0, len = ref.length; j < len; j++){
            key = ref[j];
            graph[key] = Vertex.make(key, object[key]);
        }
        return graph;
    },
    fromFunctionArray: function(fx) {
        var f, getName, graph, i, j, len, name, names, previous;
        if (fx.length === 0) {
            return {
                start: {
                    move: $end
                }
            };
        }
        names = {};
        getName = function(f) {
            var name;
            name = f.name || "anonymous";
            if (names[name] != null) {
                return `${name}-${++names[name]}`;
            } else {
                names[name] = 1;
                return name;
            }
        };
        graph = {
            start: {}
        };
        previous = "start";
        for(i = j = 0, len = fx.length; j < len; i = ++j){
            f = fx[i];
            name = getName(f);
            graph[name] = {
                run: f
            };
            graph[previous].move = name;
            previous = name;
        }
        graph[previous].move = $end;
        return graph;
    },
    fromNamedFunctionArray: function(array) {
        var f, graph, i, j, k, len, len1, name, pair, pairs, previous;
        if (array.length === 0) {
            return {
                start: {
                    move: $end
                }
            };
        }
        pairs = [];
        for(i = j = 0, len = array.length; j < len; i = j += 2){
            name = array[i];
            pairs.push([
                name,
                array[i + 1]
            ]);
        }
        graph = {
            start: {}
        };
        previous = "start";
        for(k = 0, len1 = pairs.length; k < len1; k++){
            pair = pairs[k];
            name = pair[0];
            f = pair[1];
            graph[name] = {
                run: f
            };
            graph[previous].move = name;
            previous = name;
        }
        graph[previous].move = $end;
        return graph;
    }
};
isMachineDescription = function(value) {
    return Type.isObject(value) && Type.isObject(value.graph);
};
isFunctionArray = function(value) {
    var item, j, len;
    if (!Type.isArray(value)) {
        return false;
    }
    for(j = 0, len = value.length; j < len; j++){
        item = value[j];
        if (!Type.isFunction(item)) {
            return false;
        }
    }
    return true;
};
isNamedFunctionArray = function(value) {
    var index, item, j, len;
    if (!Type.isArray(value)) {
        return false;
    }
    for(index = j = 0, len = value.length; j < len; index = ++j){
        item = value[index];
        if (index % 2 === 0) {
            if (!Type.isString(item)) {
                return false;
            }
        } else {
            if (!Type.isFunction(item)) {
                return false;
            }
        }
    }
    return true;
};
Machine = {
    make: generic({
        name: "talos: machine make"
    })
};
generic(Machine.make, Type.isObject, function(graph) {
    return Machine.make({
        graph
    });
});
generic(Machine.make, Type.isString, Type.isObject, function(name, graph) {
    return Machine.make({
        name,
        graph
    });
});
generic(Machine.make, isMachineDescription, function(machine) {
    var ref;
    return {
        name: (ref = machine.name) != null ? ref : "anonymous",
        graph: Graph.fromObject(machine.graph)
    };
});
generic(Machine.make, Type.isString, isMachineDescription, function(name, machine) {
    return Machine.make({
        name,
        graph: machine.graph
    });
});
generic(Machine.make, isNamedFunctionArray, function(ax) {
    return Machine.make({
        graph: Graph.fromNamedFunctionArray(ax)
    });
});
generic(Machine.make, isFunctionArray, function(fx) {
    return Machine.make({
        graph: Graph.fromFunctionArray(fx)
    });
});
generic(Machine.make, Type.isString, isNamedFunctionArray, function(name, ax) {
    return Machine.make({
        name,
        graph: Graph.fromNamedFunctionArray(ax)
    });
});
generic(Machine.make, Type.isString, isFunctionArray, function(name, fx) {
    return Machine.make({
        name,
        graph: Graph.fromFunctionArray(fx)
    });
});
export { Machine, Vertex, Edges, Edge }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=src/machine.coffee

//# sourceMappingURL=data:application/json;base64,