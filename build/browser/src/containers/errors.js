var FailedMove, FailedRun, InvalidState, MissingTransition, TalosError, _make, isError;
import * as Meta from "@dashkite/joy/metaclass";
import * as Type from "@dashkite/joy/type";
import { generic } from "@dashkite/joy/generic";
isError = Type.isKind(Error);
_make = function(type) {
    var make;
    make = generic({
        name: "error make",
        default: function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            throw new Error(`TalosError.make: input is malformed ${JSON.stringify(args)}`);
        }
    });
    generic(make, function() {
        return new type({
            message: "talos encountered an error"
        });
    });
    generic(make, Type.isString, function(message) {
        return new type({
            message
        });
    });
    generic(make, isError, Type.isString, function(error, message) {
        return new type({
            message,
            error
        });
    });
    return make;
};
TalosError = (function() {
    class TalosError extends Error {
        constructor({ message }){
            super(message);
        }
    }
    ;
    TalosError.make = _make(TalosError);
    TalosError.isType = Type.isType(TalosError);
    TalosError.isKind = Type.isKind(TalosError);
    return TalosError;
}).call(this);
InvalidState = (function() {
    class InvalidState extends TalosError {
        constructor({ message }){
            super(message);
        }
    }
    ;
    InvalidState.make = _make(InvalidState);
    InvalidState.isType = Type.isType(InvalidState);
    return InvalidState;
}).call(this);
MissingTransition = (function() {
    class MissingTransition extends TalosError {
        constructor({ message }){
            super(message);
        }
    }
    ;
    MissingTransition.make = _make(MissingTransition);
    MissingTransition.isType = Type.isType(MissingTransition);
    return MissingTransition;
}).call(this);
FailedRun = (function() {
    class FailedRun extends TalosError {
        constructor({ error, message }){
            super(message);
            this.error = error;
        }
    }
    ;
    FailedRun.make = _make(FailedRun);
    FailedRun.isType = Type.isType(FailedRun);
    return FailedRun;
}).call(this);
FailedMove = (function() {
    class FailedMove extends TalosError {
        constructor({ error, message }){
            super(message);
            this.error = error;
        }
    }
    ;
    FailedMove.make = _make(FailedMove);
    FailedMove.isType = Type.isType(FailedMove);
    return FailedMove;
}).call(this);
export { TalosError, InvalidState, MissingTransition, FailedRun, FailedMove }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL2NvbnRhaW5lcnMvZXJyb3JzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsWUFBQSxFQUFBLGlCQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBQTs7QUFBQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE9BQVQ7Q0FBQSxNQUFBOztBQUVBLE9BQUEsR0FBVSxJQUFJLENBQUMsTUFBTCxDQUFZLEtBQVo7O0FBRVYsS0FBQSxHQUFRLFFBQUEsQ0FBRSxJQUFGLENBQUE7QUFDUixNQUFBO0VBQUUsSUFBQSxHQUFPLE9BQUEsQ0FDTDtJQUFBLElBQUEsRUFBTSxZQUFOO0lBQ0EsT0FBQSxFQUFTLFFBQUEsQ0FBQSxHQUFFLElBQUYsQ0FBQTtNQUNQLE1BQU0sSUFBSSxLQUFKLENBQVUsQ0FBQSxvQ0FBQSxDQUFBLENBQXVDLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixDQUF2QyxDQUFBLENBQVY7SUFEQztFQURULENBREs7RUFLUCxPQUFBLENBQVEsSUFBUixFQUFjLFFBQUEsQ0FBQSxDQUFBO1dBQ1osSUFBSSxJQUFKLENBQVM7TUFBQSxPQUFBLEVBQVM7SUFBVCxDQUFUO0VBRFksQ0FBZDtFQUdBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsSUFBSSxDQUFDLFFBQW5CLEVBQTZCLFFBQUEsQ0FBRSxPQUFGLENBQUE7V0FDM0IsSUFBSSxJQUFKLENBQVMsQ0FBRSxPQUFGLENBQVQ7RUFEMkIsQ0FBN0I7RUFHQSxPQUFBLENBQVEsSUFBUixFQUFjLE9BQWQsRUFBdUIsSUFBSSxDQUFDLFFBQTVCLEVBQXNDLFFBQUEsQ0FBRSxLQUFGLEVBQVMsT0FBVCxDQUFBO1dBQ3BDLElBQUksSUFBSixDQUFTLENBQUUsT0FBRixFQUFXLEtBQVgsQ0FBVDtFQURvQyxDQUF0QztTQUdBO0FBZk07O0FBaUJGO0VBQU4sTUFBQSxXQUFBLFFBQXlCLE1BQXpCO0lBQ0UsV0FBYSxDQUFDLENBQUUsT0FBRixDQUFELENBQUE7V0FDWCxDQUFNLE9BQU47SUFEVzs7RUFEZjs7RUFJRSxVQUFDLENBQUEsSUFBRCxHQUFPLEtBQUEsQ0FBTSxVQUFOOztFQUNQLFVBQUMsQ0FBQSxNQUFELEdBQVMsSUFBSSxDQUFDLE1BQUwsQ0FBWSxVQUFaOztFQUNULFVBQUMsQ0FBQSxNQUFELEdBQVMsSUFBSSxDQUFDLE1BQUwsQ0FBWSxVQUFaOzs7Ozs7QUFHTDtFQUFOLE1BQUEsYUFBQSxRQUEyQixXQUEzQjtJQUNFLFdBQWEsQ0FBQyxDQUFFLE9BQUYsQ0FBRCxDQUFBO1dBQ1gsQ0FBTSxPQUFOO0lBRFc7O0VBRGY7O0VBSUUsWUFBQyxDQUFBLElBQUQsR0FBTyxLQUFBLENBQU0sWUFBTjs7RUFDUCxZQUFDLENBQUEsTUFBRCxHQUFTLElBQUksQ0FBQyxNQUFMLENBQVksWUFBWjs7Ozs7O0FBRUw7RUFBTixNQUFBLGtCQUFBLFFBQWdDLFdBQWhDO0lBQ0UsV0FBYSxDQUFDLENBQUUsT0FBRixDQUFELENBQUE7V0FDWCxDQUFNLE9BQU47SUFEVzs7RUFEZjs7RUFJRSxpQkFBQyxDQUFBLElBQUQsR0FBTyxLQUFBLENBQU0saUJBQU47O0VBQ1AsaUJBQUMsQ0FBQSxNQUFELEdBQVMsSUFBSSxDQUFDLE1BQUwsQ0FBWSxpQkFBWjs7Ozs7O0FBRUw7RUFBTixNQUFBLFVBQUEsUUFBd0IsV0FBeEI7SUFDRSxXQUFhLENBQUMsQ0FBRSxLQUFGLEVBQVMsT0FBVCxDQUFELENBQUE7V0FDWCxDQUFNLE9BQU47TUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTO0lBRkU7O0VBRGY7O0VBS0UsU0FBQyxDQUFBLElBQUQsR0FBTyxLQUFBLENBQU0sU0FBTjs7RUFDUCxTQUFDLENBQUEsTUFBRCxHQUFTLElBQUksQ0FBQyxNQUFMLENBQVksU0FBWjs7Ozs7O0FBRUw7RUFBTixNQUFBLFdBQUEsUUFBeUIsV0FBekI7SUFDRSxXQUFhLENBQUMsQ0FBRSxLQUFGLEVBQVMsT0FBVCxDQUFELENBQUE7V0FDWCxDQUFNLE9BQU47TUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTO0lBRkU7O0VBRGY7O0VBS0UsVUFBQyxDQUFBLElBQUQsR0FBTyxLQUFBLENBQU0sVUFBTjs7RUFDUCxVQUFDLENBQUEsTUFBRCxHQUFTLElBQUksQ0FBQyxNQUFMLENBQVksVUFBWjs7Ozs7O0FBR1gsT0FBQTtFQUNFLFVBREY7RUFFRSxZQUZGO0VBR0UsaUJBSEY7RUFJRSxTQUpGO0VBS0UsVUFMRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE1ldGEgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvbWV0YWNsYXNzXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5cbmlzRXJyb3IgPSBUeXBlLmlzS2luZCBFcnJvclxuXG5fbWFrZSA9ICggdHlwZSApIC0+XG4gIG1ha2UgPSBnZW5lcmljIFxuICAgIG5hbWU6IFwiZXJyb3IgbWFrZVwiXG4gICAgZGVmYXVsdDogKCBhcmdzLi4uICkgLT4gXG4gICAgICB0aHJvdyBuZXcgRXJyb3IgXCJUYWxvc0Vycm9yLm1ha2U6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuICBnZW5lcmljIG1ha2UsIC0+XG4gICAgbmV3IHR5cGUgbWVzc2FnZTogXCJ0YWxvcyBlbmNvdW50ZXJlZCBhbiBlcnJvclwiXG5cbiAgZ2VuZXJpYyBtYWtlLCBUeXBlLmlzU3RyaW5nLCAoIG1lc3NhZ2UgKSAtPlxuICAgIG5ldyB0eXBlIHsgbWVzc2FnZSB9XG5cbiAgZ2VuZXJpYyBtYWtlLCBpc0Vycm9yLCBUeXBlLmlzU3RyaW5nLCAoIGVycm9yLCBtZXNzYWdlICkgLT5cbiAgICBuZXcgdHlwZSB7IG1lc3NhZ2UsIGVycm9yIH1cblxuICBtYWtlXG5cbmNsYXNzIFRhbG9zRXJyb3IgZXh0ZW5kcyBFcnJvclxuICBjb25zdHJ1Y3RvcjogKHsgbWVzc2FnZSB9KSAtPlxuICAgIHN1cGVyIG1lc3NhZ2VcblxuICBAbWFrZTogX21ha2UgQFxuICBAaXNUeXBlOiBUeXBlLmlzVHlwZSBAXG4gIEBpc0tpbmQ6IFR5cGUuaXNLaW5kIEBcblxuXG5jbGFzcyBJbnZhbGlkU3RhdGUgZXh0ZW5kcyBUYWxvc0Vycm9yXG4gIGNvbnN0cnVjdG9yOiAoeyBtZXNzYWdlIH0pIC0+XG4gICAgc3VwZXIgbWVzc2FnZVxuXG4gIEBtYWtlOiBfbWFrZSBAXG4gIEBpc1R5cGU6IFR5cGUuaXNUeXBlIEBcblxuY2xhc3MgTWlzc2luZ1RyYW5zaXRpb24gZXh0ZW5kcyBUYWxvc0Vycm9yXG4gIGNvbnN0cnVjdG9yOiAoeyBtZXNzYWdlIH0pIC0+XG4gICAgc3VwZXIgbWVzc2FnZVxuXG4gIEBtYWtlOiBfbWFrZSBAXG4gIEBpc1R5cGU6IFR5cGUuaXNUeXBlIEBcblxuY2xhc3MgRmFpbGVkUnVuIGV4dGVuZHMgVGFsb3NFcnJvclxuICBjb25zdHJ1Y3RvcjogKHsgZXJyb3IsIG1lc3NhZ2UgfSkgLT5cbiAgICBzdXBlciBtZXNzYWdlXG4gICAgQGVycm9yID0gZXJyb3JcblxuICBAbWFrZTogX21ha2UgQFxuICBAaXNUeXBlOiBUeXBlLmlzVHlwZSBAXG5cbmNsYXNzIEZhaWxlZE1vdmUgZXh0ZW5kcyBUYWxvc0Vycm9yXG4gIGNvbnN0cnVjdG9yOiAoeyBlcnJvciwgbWVzc2FnZSB9KSAtPlxuICAgIHN1cGVyIG1lc3NhZ2VcbiAgICBAZXJyb3IgPSBlcnJvclxuXG4gIEBtYWtlOiBfbWFrZSBAXG4gIEBpc1R5cGU6IFR5cGUuaXNUeXBlIEBcblxuXG5leHBvcnQge1xuICBUYWxvc0Vycm9yXG4gIEludmFsaWRTdGF0ZVxuICBNaXNzaW5nVHJhbnNpdGlvblxuICBGYWlsZWRSdW5cbiAgRmFpbGVkTW92ZVxufSJdfQ==
 //# sourceURL=src/containers/errors.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250YWluZXJzL2Vycm9ycy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTWV0YSBmcm9tIFwiQGRhc2hraXRlL2pveS9tZXRhY2xhc3NcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcblxuaXNFcnJvciA9IFR5cGUuaXNLaW5kIEVycm9yXG5cbl9tYWtlID0gKCB0eXBlICkgLT5cbiAgbWFrZSA9IGdlbmVyaWMgXG4gICAgbmFtZTogXCJlcnJvciBtYWtlXCJcbiAgICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICAgIHRocm93IG5ldyBFcnJvciBcIlRhbG9zRXJyb3IubWFrZTogaW5wdXQgaXMgbWFsZm9ybWVkICN7SlNPTi5zdHJpbmdpZnkgYXJnc31cIlxuXG4gIGdlbmVyaWMgbWFrZSwgLT5cbiAgICBuZXcgdHlwZSBtZXNzYWdlOiBcInRhbG9zIGVuY291bnRlcmVkIGFuIGVycm9yXCJcblxuICBnZW5lcmljIG1ha2UsIFR5cGUuaXNTdHJpbmcsICggbWVzc2FnZSApIC0+XG4gICAgbmV3IHR5cGUgeyBtZXNzYWdlIH1cblxuICBnZW5lcmljIG1ha2UsIGlzRXJyb3IsIFR5cGUuaXNTdHJpbmcsICggZXJyb3IsIG1lc3NhZ2UgKSAtPlxuICAgIG5ldyB0eXBlIHsgbWVzc2FnZSwgZXJyb3IgfVxuXG4gIG1ha2VcblxuY2xhc3MgVGFsb3NFcnJvciBleHRlbmRzIEVycm9yXG4gIGNvbnN0cnVjdG9yOiAoeyBtZXNzYWdlIH0pIC0+XG4gICAgc3VwZXIgbWVzc2FnZVxuXG4gIEBtYWtlOiBfbWFrZSBAXG4gIEBpc1R5cGU6IFR5cGUuaXNUeXBlIEBcbiAgQGlzS2luZDogVHlwZS5pc0tpbmQgQFxuXG5cbmNsYXNzIEludmFsaWRTdGF0ZSBleHRlbmRzIFRhbG9zRXJyb3JcbiAgY29uc3RydWN0b3I6ICh7IG1lc3NhZ2UgfSkgLT5cbiAgICBzdXBlciBtZXNzYWdlXG5cbiAgQG1ha2U6IF9tYWtlIEBcbiAgQGlzVHlwZTogVHlwZS5pc1R5cGUgQFxuXG5jbGFzcyBNaXNzaW5nVHJhbnNpdGlvbiBleHRlbmRzIFRhbG9zRXJyb3JcbiAgY29uc3RydWN0b3I6ICh7IG1lc3NhZ2UgfSkgLT5cbiAgICBzdXBlciBtZXNzYWdlXG5cbiAgQG1ha2U6IF9tYWtlIEBcbiAgQGlzVHlwZTogVHlwZS5pc1R5cGUgQFxuXG5jbGFzcyBGYWlsZWRSdW4gZXh0ZW5kcyBUYWxvc0Vycm9yXG4gIGNvbnN0cnVjdG9yOiAoeyBlcnJvciwgbWVzc2FnZSB9KSAtPlxuICAgIHN1cGVyIG1lc3NhZ2VcbiAgICBAZXJyb3IgPSBlcnJvclxuXG4gIEBtYWtlOiBfbWFrZSBAXG4gIEBpc1R5cGU6IFR5cGUuaXNUeXBlIEBcblxuY2xhc3MgRmFpbGVkTW92ZSBleHRlbmRzIFRhbG9zRXJyb3JcbiAgY29uc3RydWN0b3I6ICh7IGVycm9yLCBtZXNzYWdlIH0pIC0+XG4gICAgc3VwZXIgbWVzc2FnZVxuICAgIEBlcnJvciA9IGVycm9yXG5cbiAgQG1ha2U6IF9tYWtlIEBcbiAgQGlzVHlwZTogVHlwZS5pc1R5cGUgQFxuXG5cbmV4cG9ydCB7XG4gIFRhbG9zRXJyb3JcbiAgSW52YWxpZFN0YXRlXG4gIE1pc3NpbmdUcmFuc2l0aW9uXG4gIEZhaWxlZFJ1blxuICBGYWlsZWRNb3ZlXG59Il0sIm5hbWVzIjpbIkZhaWxlZE1vdmUiLCJGYWlsZWRSdW4iLCJJbnZhbGlkU3RhdGUiLCJNaXNzaW5nVHJhbnNpdGlvbiIsIlRhbG9zRXJyb3IiLCJfbWFrZSIsImlzRXJyb3IiLCJNZXRhIiwiVHlwZSIsImdlbmVyaWMiLCJpc0tpbmQiLCJFcnJvciIsInR5cGUiLCJtYWtlIiwibmFtZSIsImRlZmF1bHQiLCJhcmdzIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1lc3NhZ2UiLCJpc1N0cmluZyIsImVycm9yIiwiY29uc3RydWN0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