var Step, flow, run, start;
import { generic } from "@dashkite/joy/generic";
import * as Fn from "@dashkite/joy/function";
import * as Type from "@dashkite/joy/type";
import { Machine } from "./machine";
import { Talos } from "./talos";
import { isMachine, isIteratorKind, isGeneratorFunctionKind } from "./types";
Step = {
    matchVertex: function(talos) {
        var vertex;
        vertex = talos.machine.graph[talos.state];
        if (vertex == null) {
            talos.catch(new Error("talos: state is not in machine graph"));
        }
        return vertex;
    },
    matchEdge: async function(vertex, talos, event) {
        var edge, error, i, len, ref;
        ref = vertex.edges;
        for(i = 0, len = ref.length; i < len; i++){
            edge = ref[i];
            try {
                if (await edge.when(talos, event) === true) {
                    return edge;
                }
            } catch (error1) {
                error = error1;
                return talos.catch(error);
            }
        }
        return talos.catch(new Error("talos: no matching when condition"));
    },
    run: async function*(edge, talos, event) {
        var error;
        try {
            if (isGeneratorFunctionKind(edge.run)) {
                return yield* await edge.run(talos, event);
            } else if (Type.isFunction(edge.run)) {
                return await edge.run(talos, event);
            }
        } catch (error1) {
            error = error1;
            return talos.catch(error);
        }
    },
    move: async function(edge, talos, event) {
        var error, previous;
        try {
            previous = talos.state;
            await edge.move(talos, event);
            return talos.previousState = previous;
        } catch (error1) {
            error = error1;
            return talos.catch(error);
        }
    },
    tick: async function*(talos, event) {
        var edge, vertex;
        vertex = Step.matchVertex(talos);
        if (talos.ended) {
            yield talos;
        }
        edge = await Step.matchEdge(vertex, talos, event);
        if (talos.ended) {
            yield talos;
        }
        yield* await Step.run(edge, talos, event);
        if (talos.ended) {
            yield talos;
        }
        await Step.move(edge, talos, event);
        return yield talos; // this is the happy-path yield
    }
};
start = generic({
    name: "talos: async start"
});
generic(start, isMachine, function(machine) {
    var talos;
    talos = Talos.make(machine);
    return start(talos);
});
// Create generator where state machine consumes its own context repeatedly.
generic(start, Talos.isType, async function*(talos) {
    var current, ref;
    while(true){
        ref = Step.tick(talos, talos.context);
        for await (current of ref){
            yield current;
            if (talos.ended) {
                return;
            }
        }
    }
});
generic(start, isMachine, isIteratorKind, function(machine, events) {
    var talos;
    talos = Talos.make(machine);
    return start(talos, events);
});
// Create generator where state machine consumes values from reactor.
generic(start, Talos.isType, isIteratorKind, async function*(talos, events) {
    var current, event, ref;
    for await (event of events){
        ref = Step.tick(talos, event);
        for await (current of ref){
            yield current;
            if (talos.ended) {
                return;
            }
        }
    }
});
generic(start, isMachine, Type.isObject, function(machine, context) {
    var talos;
    talos = Talos.make(machine);
    talos.context = context;
    return start(talos);
});
generic(start, Talos.isType, Type.isObject, function(talos, context) {
    talos.context = context;
    return start(talos);
});
generic(start, isMachine, Type.isObject, isIteratorKind, function(machine, context, events) {
    var talos;
    talos = Talos.make(machine);
    talos.context = context;
    return start(talos, events);
});
generic(start, Talos.isType, Type.isObject, isIteratorKind, function(talos, context, events) {
    talos.context = context;
    return start(talos, events);
});
// Convenience function to keep going and only return the final talos.
run = generic({
    name: "talos: async run"
});
// Further convenience to support automatically using start.
generic(run, Type.isAny, function() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    return run(start(...args));
});
generic(run, Type.isReactor, async function(reactor) {
    var result, talos;
    for await (talos of reactor){
        result = talos;
    }
    return result;
});
flow = function(fx) {
    return async function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var talos;
        talos = await run(start(fx, ...args));
        if (talos.error != null) {
            throw talos.error;
        }
        return talos.context;
    };
};
export * from "./states";
export * from "./machine";
export * from "./talos";
export * from "./types";
export { Step, start, run, flow }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL2FzeW5jLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBOztBQUFBLE9BQUE7RUFBUyxPQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFPLENBQUEsTUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE9BQVQ7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsU0FBVDtFQUFvQixjQUFwQjtFQUFvQyx1QkFBcEM7Q0FBQSxNQUFBOztBQUdBLElBQUEsR0FDRTtFQUFBLFdBQUEsRUFBYSxRQUFBLENBQUUsS0FBRixDQUFBO0FBQ2YsUUFBQTtJQUFJLE1BQUEsR0FBUyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBRSxLQUFLLENBQUMsS0FBUjtJQUM1QixJQUFJLGNBQUo7TUFDRSxLQUFLLENBQUMsS0FBTixDQUFZLElBQUksS0FBSixDQUFVLHNDQUFWLENBQVosRUFERjs7V0FFQTtFQUpXLENBQWI7RUFNQSxTQUFBLEVBQVcsTUFBQSxRQUFBLENBQUUsTUFBRixFQUFVLEtBQVYsRUFBaUIsS0FBakIsQ0FBQTtBQUNiLFFBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUk7SUFBQSxLQUFBLHFDQUFBOztBQUNFO1FBQ0UsSUFBRyxDQUFFLENBQUEsTUFBTSxJQUFJLENBQUMsSUFBTCxDQUFVLEtBQVYsRUFBaUIsS0FBakIsQ0FBTixDQUFGLENBQUEsS0FBb0MsSUFBdkM7QUFDRSxpQkFBTyxLQURUO1NBREY7T0FHQSxjQUFBO1FBQU07QUFDSixlQUFPLEtBQUssQ0FBQyxLQUFOLENBQVksS0FBWixFQURUOztJQUpGO1dBTUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFJLEtBQUosQ0FBVSxtQ0FBVixD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YjtBQUYwRCxDQUE1RCxFQTFGQTs7O0FBZ0dBLEdBQUEsR0FBTSxPQUFBLENBQVE7RUFBQSxJQUFBLEVBQU07QUFBTixDQUFSLEVBaEdOOzs7QUFtR0EsT0FBQSxDQUFRLEdBQVIsRUFBYSxJQUFJLENBQUMsS0FBbEIsRUFBeUIsUUFBQSxDQUFBLEdBQUUsSUFBRixDQUFBO1NBQ3ZCLEdBQUEsQ0FBSSxLQUFBLENBQU0sR0FBQSxJQUFOLENBQUo7QUFEdUIsQ0FBekI7O0FBR0EsT0FBQSxDQUFRLEdBQVIsRUFBYSxJQUFJLENBQUMsU0FBbEIsRUFBNkIsTUFBQSxRQUFBLENBQUUsT0FBRixDQUFBO0FBQzdCLE1BQUEsTUFBQSxFQUFBO0VBQUUsNEJBQUE7SUFDRSxNQUFBLEdBQVM7RUFEWDtTQUVBO0FBSDJCLENBQTdCOztBQUtBLElBQUEsR0FBTyxRQUFBLENBQUUsRUFBRixDQUFBO1NBQ0wsTUFBQSxRQUFBLENBQUEsR0FBRSxJQUFGLENBQUE7QUFDRixRQUFBO0lBQUksS0FBQSxHQUFRLENBQUEsTUFBTSxHQUFBLENBQUksS0FBQSxDQUFNLEVBQU4sRUFBVSxHQUFBLElBQVYsQ0FBSixDQUFOO0lBQ1IsSUFBRyxtQkFBSDtNQUNFLE1BQU0sS0FBSyxDQUFDLE1BRGQ7O1dBRUEsS0FBSyxDQUFDO0VBSlI7QUFESzs7QUFPUCxPQUFBLENBQUE7O0FBQ0EsT0FBQSxDQUFBOztBQUNBLE9BQUEsQ0FBQTs7QUFDQSxPQUFBLENBQUE7O0FBQ0EsT0FBQTtFQUNFLElBREY7RUFFRSxLQUZGO0VBR0UsR0FIRjtFQUlFLElBSkYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgKiBhcyBGbiBmcm9tIFwiQGRhc2hraXRlL2pveS9mdW5jdGlvblwiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgTWFjaGluZSB9IGZyb20gXCIuL21hY2hpbmVcIlxuaW1wb3J0IHsgVGFsb3MgfSBmcm9tIFwiLi90YWxvc1wiXG5pbXBvcnQgeyBpc01hY2hpbmUsIGlzSXRlcmF0b3JLaW5kLCBpc0dlbmVyYXRvckZ1bmN0aW9uS2luZCB9IGZyb20gXCIuL3R5cGVzXCJcblxuXG5TdGVwID1cbiAgbWF0Y2hWZXJ0ZXg6ICggdGFsb3MgKSAtPlxuICAgIHZlcnRleCA9IHRhbG9zLm1hY2hpbmUuZ3JhcGhbIHRhbG9zLnN0YXRlIF1cbiAgICBpZiAhdmVydGV4P1xuICAgICAgdGFsb3MuY2F0Y2ggbmV3IEVycm9yIFwidGFsb3M6IHN0YXRlIGlzIG5vdCBpbiBtYWNoaW5lIGdyYXBoXCJcbiAgICB2ZXJ0ZXhcblxuICBtYXRjaEVkZ2U6ICggdmVydGV4LCB0YWxvcywgZXZlbnQgKSAtPlxuICAgIGZvciBlZGdlIGluIHZlcnRleC5lZGdlc1xuICAgICAgdHJ5XG4gICAgICAgIGlmICggYXdhaXQgZWRnZS53aGVuIHRhbG9zLCBldmVudCApID09IHRydWVcbiAgICAgICAgICByZXR1cm4gZWRnZVxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgcmV0dXJuIHRhbG9zLmNhdGNoIGVycm9yXG4gICAgdGFsb3MuY2F0Y2ggbmV3IEVycm9yIFwidGFsb3M6IG5vIG1hdGNoaW5nIHdoZW4gY29uZGl0aW9uXCJcblxuICBydW46ICggZWRnZSwgdGFsb3MsIGV2ZW50ICkgLT5cbiAgICB0cnlcbiAgICAgIGlmIGlzR2VuZXJhdG9yRnVuY3Rpb25LaW5kIGVkZ2UucnVuXG4gICAgICAgIHlpZWxkIGZyb20gYXdhaXQgZWRnZS5ydW4gdGFsb3MsIGV2ZW50XG4gICAgICBlbHNlIGlmIFR5cGUuaXNGdW5jdGlvbiBlZGdlLnJ1blxuICAgICAgICBhd2FpdCBlZGdlLnJ1biB0YWxvcywgZXZlbnRcbiAgICBjYXRjaCBlcnJvclxuICAgICAgdGFsb3MuY2F0Y2ggZXJyb3JcblxuICBtb3ZlOiAoIGVkZ2UsIHRhbG9zLCBldmVudCApIC0+XG4gICAgdHJ5XG4gICAgICBwcmV2aW91cyA9IHRhbG9zLnN0YXRlXG4gICAgICBhd2FpdCBlZGdlLm1vdmUgdGFsb3MsIGV2ZW50XG4gICAgICB0YWxvcy5wcmV2aW91c1N0YXRlID0gcHJldmlvdXNcbiAgICBjYXRjaCBlcnJvclxuICAgICAgdGFsb3MuY2F0Y2ggZXJyb3JcblxuICB0aWNrOiAoIHRhbG9zLCBldmVudCApIC0+XG4gICAgdmVydGV4ID0gU3RlcC5tYXRjaFZlcnRleCB0YWxvc1xuICAgIHlpZWxkIHRhbG9zIGlmIHRhbG9zLmVuZGVkXG4gICAgZWRnZSA9IGF3YWl0IFN0ZXAubWF0Y2hFZGdlIHZlcnRleCwgdGFsb3MsIGV2ZW50XG4gICAgeWllbGQgdGFsb3MgaWYgdGFsb3MuZW5kZWRcbiAgICB5aWVsZCBmcm9tIGF3YWl0IFN0ZXAucnVuIGVkZ2UsIHRhbG9zLCBldmVudFxuICAgIHlpZWxkIHRhbG9zIGlmIHRhbG9zLmVuZGVkXG4gICAgYXdhaXQgU3RlcC5tb3ZlIGVkZ2UsIHRhbG9zLCBldmVudFxuICAgIHlpZWxkIHRhbG9zICAgIyB0aGlzIGlzIHRoZSBoYXBweS1wYXRoIHlpZWxkXG5cblxuc3RhcnQgPSBnZW5lcmljIG5hbWU6IFwidGFsb3M6IGFzeW5jIHN0YXJ0XCJcblxuZ2VuZXJpYyBzdGFydCwgaXNNYWNoaW5lLCAoIG1hY2hpbmUgKSAtPlxuICB0YWxvcyA9IFRhbG9zLm1ha2UgbWFjaGluZVxuICBzdGFydCB0YWxvc1xuXG4jIENyZWF0ZSBnZW5lcmF0b3Igd2hlcmUgc3RhdGUgbWFjaGluZSBjb25zdW1lcyBpdHMgb3duIGNvbnRleHQgcmVwZWF0ZWRseS5cbmdlbmVyaWMgc3RhcnQsIFRhbG9zLmlzVHlwZSwgKCB0YWxvcyApIC0+XG4gIGxvb3BcbiAgICBmb3IgYXdhaXQgY3VycmVudCBmcm9tIFN0ZXAudGljayB0YWxvcywgdGFsb3MuY29udGV4dFxuICAgICAgeWllbGQgY3VycmVudFxuICAgICAgcmV0dXJuIGlmIHRhbG9zLmVuZGVkXG5cbmdlbmVyaWMgc3RhcnQsIGlzTWFjaGluZSwgaXNJdGVyYXRvcktpbmQsICggbWFjaGluZSwgZXZlbnRzICkgLT5cbiAgdGFsb3MgPSBUYWxvcy5tYWtlIG1hY2hpbmVcbiAgc3RhcnQgdGFsb3MsIGV2ZW50c1xuXG4jIENyZWF0ZSBnZW5lcmF0b3Igd2hlcmUgc3RhdGUgbWFjaGluZSBjb25zdW1lcyB2YWx1ZXMgZnJvbSByZWFjdG9yLlxuZ2VuZXJpYyBzdGFydCwgVGFsb3MuaXNUeXBlLCBpc0l0ZXJhdG9yS2luZCwgKCB0YWxvcywgZXZlbnRzICkgLT5cbiAgZm9yIGF3YWl0IGV2ZW50IGZyb20gZXZlbnRzXG4gICAgZm9yIGF3YWl0IGN1cnJlbnQgZnJvbSBTdGVwLnRpY2sgdGFsb3MsIGV2ZW50XG4gICAgICB5aWVsZCBjdXJyZW50XG4gICAgICByZXR1cm4gaWYgdGFsb3MuZW5kZWRcblxuZ2VuZXJpYyBzdGFydCwgaXNNYWNoaW5lLCBUeXBlLmlzT2JqZWN0LCAoIG1hY2hpbmUsIGNvbnRleHQgKSAtPlxuICB0YWxvcyA9IFRhbG9zLm1ha2UgbWFjaGluZVxuICB0YWxvcy5jb250ZXh0ID0gY29udGV4dFxuICBzdGFydCB0YWxvc1xuXG5nZW5lcmljIHN0YXJ0LCBUYWxvcy5pc1R5cGUsIFR5cGUuaXNPYmplY3QsICggdGFsb3MsIGNvbnRleHQgKSAtPlxuICB0YWxvcy5jb250ZXh0ID0gY29udGV4dFxuICBzdGFydCB0YWxvc1xuXG5nZW5lcmljIHN0YXJ0LCBpc01hY2hpbmUsIFR5cGUuaXNPYmplY3QsIGlzSXRlcmF0b3JLaW5kLCAoIG1hY2hpbmUsIGNvbnRleHQsIGV2ZW50cyApIC0+XG4gIHRhbG9zID0gVGFsb3MubWFrZSBtYWNoaW5lXG4gIHRhbG9zLmNvbnRleHQgPSBjb250ZXh0XG4gIHN0YXJ0IHRhbG9zLCBldmVudHNcblxuZ2VuZXJpYyBzdGFydCwgVGFsb3MuaXNUeXBlLCBUeXBlLmlzT2JqZWN0LCBpc0l0ZXJhdG9yS2luZCwgKCB0YWxvcywgY29udGV4dCwgZXZlbnRzICkgLT5cbiAgdGFsb3MuY29udGV4dCA9IGNvbnRleHRcbiAgc3RhcnQgdGFsb3MsIGV2ZW50c1xuXG5cbiMgQ29udmVuaWVuY2UgZnVuY3Rpb24gdG8ga2VlcCBnb2luZyBhbmQgb25seSByZXR1cm4gdGhlIGZpbmFsIHRhbG9zLlxucnVuID0gZ2VuZXJpYyBuYW1lOiBcInRhbG9zOiBhc3luYyBydW5cIlxuXG4jIEZ1cnRoZXIgY29udmVuaWVuY2UgdG8gc3VwcG9ydCBhdXRvbWF0aWNhbGx5IHVzaW5nIHN0YXJ0LlxuZ2VuZXJpYyBydW4sIFR5cGUuaXNBbnksICggYXJncy4uLiApIC0+XG4gIHJ1biBzdGFydCBhcmdzLi4uXG5cbmdlbmVyaWMgcnVuLCBUeXBlLmlzUmVhY3RvciwgKCByZWFjdG9yICkgLT5cbiAgZm9yIGF3YWl0IHRhbG9zIGZyb20gcmVhY3RvclxuICAgIHJlc3VsdCA9IHRhbG9zXG4gIHJlc3VsdFxuXG5mbG93ID0gKCBmeCApIC0+XG4gICggYXJncy4uLiApIC0+XG4gICAgdGFsb3MgPSBhd2FpdCBydW4gc3RhcnQgZngsIGFyZ3MuLi5cbiAgICBpZiB0YWxvcy5lcnJvcj9cbiAgICAgIHRocm93IHRhbG9zLmVycm9yXG4gICAgdGFsb3MuY29udGV4dFxuXG5leHBvcnQgKiBmcm9tIFwiLi9zdGF0ZXNcIlxuZXhwb3J0ICogZnJvbSBcIi4vbWFjaGluZVwiXG5leHBvcnQgKiBmcm9tIFwiLi90YWxvc1wiXG5leHBvcnQgKiBmcm9tIFwiLi90eXBlc1wiXG5leHBvcnQge1xuICBTdGVwICBcbiAgc3RhcnRcbiAgcnVuXG4gIGZsb3dcbn0iXX0=
 //# sourceURL=src/async.coffee

//# sourceMappingURL=data:application/json;base64,