var Step, pipe, run, start;
import { generic } from "@dashkite/joy/generic";
import * as Fn from "@dashkite/joy/function";
import * as Type from "@dashkite/joy/type";
import { Machine } from "./machine";
import { Talos } from "./talos";
import { isMachine, isGeneratorFunction } from "./types";
Step = {
    matchVertex: function(talos) {
        var vertex;
        vertex = talos.machine.graph[talos.state];
        if (vertex == null) {
            talos.catch(new Error("talos state is not in machine graph"));
        }
        return vertex;
    },
    matchEdge: function(vertex, talos, event) {
        var edge, error, i, len, ref;
        ref = vertex.edges;
        for(i = 0, len = ref.length; i < len; i++){
            edge = ref[i];
            try {
                if (edge.when(talos, event) === true) {
                    return edge;
                }
            } catch (error1) {
                error = error1;
                return talos.catch(error);
            }
        }
        return talos.catch(new Error("no matching when condition"));
    },
    run: function*(edge, talos, event) {
        var error;
        try {
            if (isGeneratorFunction(edge.run)) {
                return yield* edge.run(talos, event);
            } else if (Type.isFunction(edge.run)) {
                return edge.run(talos, event);
            }
        } catch (error1) {
            error = error1;
            return talos.catch(error);
        }
    },
    move: function(edge, talos, event) {
        var error, previous;
        try {
            previous = talos.state;
            edge.move(talos, event);
            return talos.previousState = previous;
        } catch (error1) {
            error = error1;
            return talos.catch(error);
        }
    },
    tick: function*(talos, event) {
        var edge, vertex;
        vertex = Step.matchVertex(talos);
        if (talos.ended) {
            yield talos;
        }
        edge = Step.matchEdge(vertex, talos, event);
        if (talos.ended) {
            yield talos;
        }
        yield* Step.run(edge, talos, event);
        if (talos.ended) {
            yield talos;
        }
        Step.move(edge, talos, event);
        return yield talos; // this is the happy-path yield
    }
};
start = generic({
    name: "talos: sync start"
});
generic(start, isMachine, function(machine) {
    var talos;
    talos = Talos.make(machine);
    return start(talos);
});
// Create generator where state machine consumes its own context repeatedly.
generic(start, Talos.isType, function*(talos) {
    var current, ref;
    while(true){
        ref = Step.tick(talos, talos.context);
        for (current of ref){
            yield current;
            if (talos.ended) {
                return;
            }
        }
    }
});
generic(start, isMachine, Type.isIterable, function(machine, events) {
    var talos;
    talos = Talos.make(machine);
    return start(talos, events);
});
// Create generator where state machine consumes values from iterator.
generic(start, Talos.isType, Type.isIterable, function*(talos, events) {
    var current, event, ref;
    for (event of events){
        ref = Step.tick(talos, event);
        for (current of ref){
            yield current;
            if (talos.ended) {
                return;
            }
        }
    }
});
generic(start, isMachine, Type.isObject, function(machine, context) {
    var talos;
    talos = Talos.make(machine);
    talos.context = context;
    return start(talos);
});
generic(start, Talos.isType, Type.isObject, function(talos, context) {
    talos.context = context;
    return start(talos);
});
generic(start, isMachine, Type.isObject, Type.isIterable, function(machine, context, events) {
    var talos;
    talos = Talos.make(machine);
    talos.context = context;
    return start(talos, events);
});
generic(start, Talos.isType, Type.isObject, Type.isIterable, function(talos, context, events) {
    talos.context = context;
    return start(talos, events);
});
// Convenience function to keep going and only return the final talos.
run = generic({
    name: "talos: sync run"
});
// Further convenience to support automatically using start.
generic(run, Type.isAny, function() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    return run(start(...args));
});
generic(run, Type.isIterator, function(iterator) {
    var result, talos;
    for (talos of iterator){
        result = talos;
    }
    return result;
});
pipe = function(fx) {
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var talos;
        talos = run(start(fx, ...args));
        if (talos.error != null) {
            throw talos.error;
        }
        return talos.context;
    };
};
export * from "./states";
export * from "./machine";
export * from "./talos";
export * from "./types";
export { Step, start, run, pipe }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=src/sync.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zeW5jLmNvZmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgKiBhcyBGbiBmcm9tIFwiQGRhc2hraXRlL2pveS9mdW5jdGlvblwiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgTWFjaGluZSB9IGZyb20gXCIuL21hY2hpbmVcIlxuaW1wb3J0IHsgVGFsb3MgfSBmcm9tIFwiLi90YWxvc1wiXG5pbXBvcnQgeyBpc01hY2hpbmUsIGlzR2VuZXJhdG9yRnVuY3Rpb24gfSBmcm9tIFwiLi90eXBlc1wiXG5cblxuU3RlcCA9XG4gIG1hdGNoVmVydGV4OiAoIHRhbG9zICkgLT5cbiAgICB2ZXJ0ZXggPSB0YWxvcy5tYWNoaW5lLmdyYXBoWyB0YWxvcy5zdGF0ZSBdXG4gICAgaWYgIXZlcnRleD9cbiAgICAgIHRhbG9zLmNhdGNoIG5ldyBFcnJvciBcInRhbG9zIHN0YXRlIGlzIG5vdCBpbiBtYWNoaW5lIGdyYXBoXCJcbiAgICB2ZXJ0ZXhcblxuICBtYXRjaEVkZ2U6ICggdmVydGV4LCB0YWxvcywgZXZlbnQgKSAtPlxuICAgIGZvciBlZGdlIGluIHZlcnRleC5lZGdlc1xuICAgICAgdHJ5XG4gICAgICAgIGlmICggZWRnZS53aGVuIHRhbG9zLCBldmVudCApID09IHRydWVcbiAgICAgICAgICByZXR1cm4gZWRnZVxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgcmV0dXJuIHRhbG9zLmNhdGNoIGVycm9yXG4gICAgdGFsb3MuY2F0Y2ggbmV3IEVycm9yIFwibm8gbWF0Y2hpbmcgd2hlbiBjb25kaXRpb25cIlxuXG4gIHJ1bjogKCBlZGdlLCB0YWxvcywgZXZlbnQgKSAtPlxuICAgIHRyeVxuICAgICAgaWYgaXNHZW5lcmF0b3JGdW5jdGlvbiBlZGdlLnJ1blxuICAgICAgICB5aWVsZCBmcm9tIGVkZ2UucnVuIHRhbG9zLCBldmVudFxuICAgICAgZWxzZSBpZiBUeXBlLmlzRnVuY3Rpb24gZWRnZS5ydW5cbiAgICAgICAgZWRnZS5ydW4gdGFsb3MsIGV2ZW50XG4gICAgY2F0Y2ggZXJyb3JcbiAgICAgIHRhbG9zLmNhdGNoIGVycm9yXG5cbiAgbW92ZTogKCBlZGdlLCB0YWxvcywgZXZlbnQgKSAtPlxuICAgIHRyeVxuICAgICAgcHJldmlvdXMgPSB0YWxvcy5zdGF0ZVxuICAgICAgZWRnZS5tb3ZlIHRhbG9zLCBldmVudFxuICAgICAgdGFsb3MucHJldmlvdXNTdGF0ZSA9IHByZXZpb3VzXG4gICAgY2F0Y2ggZXJyb3JcbiAgICAgIHRhbG9zLmNhdGNoIGVycm9yXG5cbiAgdGljazogKCB0YWxvcywgZXZlbnQgKSAtPlxuICAgIHZlcnRleCA9IFN0ZXAubWF0Y2hWZXJ0ZXggdGFsb3NcbiAgICB5aWVsZCB0YWxvcyBpZiB0YWxvcy5lbmRlZFxuICAgIGVkZ2UgPSBTdGVwLm1hdGNoRWRnZSB2ZXJ0ZXgsIHRhbG9zLCBldmVudFxuICAgIHlpZWxkIHRhbG9zIGlmIHRhbG9zLmVuZGVkXG4gICAgeWllbGQgZnJvbSBTdGVwLnJ1biBlZGdlLCB0YWxvcywgZXZlbnRcbiAgICB5aWVsZCB0YWxvcyBpZiB0YWxvcy5lbmRlZFxuICAgIFN0ZXAubW92ZSBlZGdlLCB0YWxvcywgZXZlbnRcbiAgICB5aWVsZCB0YWxvcyAgICMgdGhpcyBpcyB0aGUgaGFwcHktcGF0aCB5aWVsZFxuXG5cbnN0YXJ0ID0gZ2VuZXJpYyBuYW1lOiBcInRhbG9zOiBzeW5jIHN0YXJ0XCJcblxuZ2VuZXJpYyBzdGFydCwgaXNNYWNoaW5lLCAoIG1hY2hpbmUgKSAtPlxuICB0YWxvcyA9IFRhbG9zLm1ha2UgbWFjaGluZVxuICBzdGFydCB0YWxvc1xuXG4jIENyZWF0ZSBnZW5lcmF0b3Igd2hlcmUgc3RhdGUgbWFjaGluZSBjb25zdW1lcyBpdHMgb3duIGNvbnRleHQgcmVwZWF0ZWRseS5cbmdlbmVyaWMgc3RhcnQsIFRhbG9zLmlzVHlwZSwgKCB0YWxvcyApIC0+XG4gIGxvb3BcbiAgICBmb3IgY3VycmVudCBmcm9tIFN0ZXAudGljayB0YWxvcywgdGFsb3MuY29udGV4dFxuICAgICAgeWllbGQgY3VycmVudFxuICAgICAgcmV0dXJuIGlmIHRhbG9zLmVuZGVkXG5cbmdlbmVyaWMgc3RhcnQsIGlzTWFjaGluZSwgVHlwZS5pc0l0ZXJhYmxlLCAoIG1hY2hpbmUsIGV2ZW50cyApIC0+XG4gIHRhbG9zID0gVGFsb3MubWFrZSBtYWNoaW5lXG4gIHN0YXJ0IHRhbG9zLCBldmVudHNcblxuIyBDcmVhdGUgZ2VuZXJhdG9yIHdoZXJlIHN0YXRlIG1hY2hpbmUgY29uc3VtZXMgdmFsdWVzIGZyb20gaXRlcmF0b3IuXG5nZW5lcmljIHN0YXJ0LCBUYWxvcy5pc1R5cGUsIFR5cGUuaXNJdGVyYWJsZSwgKCB0YWxvcywgZXZlbnRzICkgLT5cbiAgZm9yIGV2ZW50IGZyb20gZXZlbnRzXG4gICAgZm9yIGN1cnJlbnQgZnJvbSBTdGVwLnRpY2sgdGFsb3MsIGV2ZW50XG4gICAgICB5aWVsZCBjdXJyZW50XG4gICAgICByZXR1cm4gaWYgdGFsb3MuZW5kZWRcblxuZ2VuZXJpYyBzdGFydCwgaXNNYWNoaW5lLCBUeXBlLmlzT2JqZWN0LCAoIG1hY2hpbmUsIGNvbnRleHQgKSAtPlxuICB0YWxvcyA9IFRhbG9zLm1ha2UgbWFjaGluZVxuICB0YWxvcy5jb250ZXh0ID0gY29udGV4dFxuICBzdGFydCB0YWxvc1xuXG5nZW5lcmljIHN0YXJ0LCBUYWxvcy5pc1R5cGUsIFR5cGUuaXNPYmplY3QsICggdGFsb3MsIGNvbnRleHQgKSAtPlxuICB0YWxvcy5jb250ZXh0ID0gY29udGV4dFxuICBzdGFydCB0YWxvc1xuXG5nZW5lcmljIHN0YXJ0LCBpc01hY2hpbmUsIFR5cGUuaXNPYmplY3QsIFR5cGUuaXNJdGVyYWJsZSwgKCBtYWNoaW5lLCBjb250ZXh0LCBldmVudHMgKSAtPlxuICB0YWxvcyA9IFRhbG9zLm1ha2UgbWFjaGluZVxuICB0YWxvcy5jb250ZXh0ID0gY29udGV4dFxuICBzdGFydCB0YWxvcywgZXZlbnRzXG5cbmdlbmVyaWMgc3RhcnQsIFRhbG9zLmlzVHlwZSwgVHlwZS5pc09iamVjdCwgVHlwZS5pc0l0ZXJhYmxlLCAoIHRhbG9zLCBjb250ZXh0LCBldmVudHMgKSAtPlxuICB0YWxvcy5jb250ZXh0ID0gY29udGV4dFxuICBzdGFydCB0YWxvcywgZXZlbnRzXG5cblxuIyBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byBrZWVwIGdvaW5nIGFuZCBvbmx5IHJldHVybiB0aGUgZmluYWwgdGFsb3MuXG5ydW4gPSBnZW5lcmljIG5hbWU6IFwidGFsb3M6IHN5bmMgcnVuXCJcblxuIyBGdXJ0aGVyIGNvbnZlbmllbmNlIHRvIHN1cHBvcnQgYXV0b21hdGljYWxseSB1c2luZyBzdGFydC5cbmdlbmVyaWMgcnVuLCBUeXBlLmlzQW55LCAoIGFyZ3MuLi4gKSAtPlxuICBydW4gc3RhcnQgYXJncy4uLlxuXG5nZW5lcmljIHJ1biwgVHlwZS5pc0l0ZXJhdG9yLCAoIGl0ZXJhdG9yICkgLT5cbiAgZm9yIHRhbG9zIGZyb20gaXRlcmF0b3JcbiAgICByZXN1bHQgPSB0YWxvc1xuICByZXN1bHRcblxucGlwZSA9ICggZnggKSAtPlxuICAoIGFyZ3MuLi4gKSAtPlxuICAgIHRhbG9zID0gcnVuIHN0YXJ0IGZ4LCBhcmdzLi4uXG4gICAgaWYgdGFsb3MuZXJyb3I/XG4gICAgICB0aHJvdyB0YWxvcy5lcnJvclxuICAgIHRhbG9zLmNvbnRleHRcblxuZXhwb3J0ICogZnJvbSBcIi4vc3RhdGVzXCJcbmV4cG9ydCAqIGZyb20gXCIuL21hY2hpbmVcIlxuZXhwb3J0ICogZnJvbSBcIi4vdGFsb3NcIlxuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXNcIlxuZXhwb3J0IHtcbiAgU3RlcCAgXG4gIHN0YXJ0XG4gIHJ1blxuICBwaXBlXG59Il0sIm5hbWVzIjpbIlN0ZXAiLCJwaXBlIiwicnVuIiwic3RhcnQiLCJnZW5lcmljIiwiRm4iLCJUeXBlIiwiTWFjaGluZSIsIlRhbG9zIiwiaXNNYWNoaW5lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsIm1hdGNoVmVydGV4IiwidGFsb3MiLCJ2ZXJ0ZXgiLCJtYWNoaW5lIiwiZ3JhcGgiLCJzdGF0ZSIsImNhdGNoIiwiRXJyb3IiLCJtYXRjaEVkZ2UiLCJldmVudCIsImVkZ2UiLCJlcnJvciIsImkiLCJsZW4iLCJyZWYiLCJlZGdlcyIsImxlbmd0aCIsIndoZW4iLCJlcnJvcjEiLCJpc0Z1bmN0aW9uIiwibW92ZSIsInByZXZpb3VzIiwicHJldmlvdXNTdGF0ZSIsInRpY2siLCJlbmRlZCIsIm5hbWUiLCJtYWtlIiwiaXNUeXBlIiwiY3VycmVudCIsImNvbnRleHQiLCJpc0l0ZXJhYmxlIiwiZXZlbnRzIiwiaXNPYmplY3QiLCJpc0FueSIsImFyZ3MiLCJpc0l0ZXJhdG9yIiwiaXRlcmF0b3IiLCJyZXN1bHQiLCJmeCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUEsTUFBQUMsTUFBQUMsS0FBQUM7QUFBQSxTQUFTQyxPQUFULFFBQUEsd0JBQUE7QUFDQSxZQUFPQyxRQUFQLHlCQUFBO0FBQ0EsWUFBT0MsVUFBUCxxQkFBQTtBQUNBLFNBQVNDLE9BQVQsUUFBQSxZQUFBO0FBQ0EsU0FBU0MsS0FBVCxRQUFBLFVBQUE7QUFDQSxTQUFTQyxTQUFULEVBQW9CQyxtQkFBcEIsUUFBQSxVQUFBO0FBR0FWLE9BQ0U7SUFBQVcsYUFBYSxTQUFFQyxLQUFGO1FBQ2YsSUFBQUM7UUFBSUEsU0FBU0QsTUFBTUUsT0FBTyxDQUFDQyxLQUFLLENBQUVILE1BQU1JLEtBQVIsQ0FBQTtRQUM1QixJQUFJSCxVQUFBLE1BQUo7WUFDRUQsTUFBTUssS0FBTixDQUFZLElBQUlDLE1BQU07O2VBQ3hCTDtJQUpXO0lBTWJNLFdBQVcsU0FBRU4sTUFBRixFQUFVRCxLQUFWLEVBQWlCUSxLQUFqQjtRQUNiLElBQUFDLE1BQUFDLE9BQUFDLEdBQUFDLEtBQUFDO1FBQUlBLE1BQUFaLE9BQUFhLEtBQUE7UUFBQSxJQUFBSCxJQUFBLEdBQUFDLE1BQUFDLElBQUFFLE1B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