var Talos;
import * as Meta from "@dashkite/joy/metaclass";
import * as Type from "@dashkite/joy/type";
import { Machine } from "./machine";
import { $start, $end, atStart, atEnd } from "./states";
Talos = (function() {
    class Talos {
        constructor({ machine: machine1 }){
            this.machine = machine1;
            this.name = this.machine.name;
            this.previousState = null;
            this.state = $start;
            this.context = {};
            this.error = null;
        }
        static make(_machine) {
            var machine;
            machine = Machine.make(_machine);
            return new Talos({
                machine
            });
        }
        end() {
            this.previousState = this.state;
            return this.state = $end;
        }
        catch(error) {
            this.end();
            return this.error = error;
        }
    }
    ;
    Meta.mixin(Talos.prototype, [
        Meta.getters({
            ended: function() {
                return atEnd(this.state);
            },
            success: function() {
                return this.ended && this.error == null;
            },
            failure: function() {
                return this.ended && this.error != null;
            },
            running: function() {
                return !this.ended;
            }
        })
    ]);
    Talos.isType = Type.isType(Talos);
    return Talos;
}).call(this);
export { Talos }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL3RhbG9zLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFBO0VBQVMsT0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE1BQVQ7RUFBaUIsSUFBakI7RUFBdUIsT0FBdkI7RUFBZ0MsS0FBaEM7Q0FBQSxNQUFBOztBQUdNO0VBQU4sTUFBQSxNQUFBO0lBQ0UsV0FBYSxDQUFDO1FBQUc7TUFBSCxDQUFELENBQUE7TUFBRyxJQUFDLENBQUE7TUFDZixJQUFDLENBQUEsSUFBRCxHQUFRLElBQUMsQ0FBQSxPQUFPLENBQUM7TUFDakIsSUFBQyxDQUFBLGFBQUQsR0FBaUI7TUFDakIsSUFBQyxDQUFBLEtBQUQsR0FBUztNQUNULElBQUMsQ0FBQSxPQUFELEdBQVcsQ0FBQTtNQUNYLElBQUMsQ0FBQSxLQUFELEdBQVM7SUFMRTs7SUFlTixPQUFOLElBQU0sQ0FBRSxRQUFGLENBQUE7QUFDVCxVQUFBO01BQUksT0FBQSxHQUFVLE9BQU8sQ0FBQyxJQUFSLENBQWEsUUFBYjthQUNWLElBQUksS0FBSixDQUFVLENBQUUsT0FBRixDQUFWO0lBRks7O0lBTVAsR0FBSyxDQUFBLENBQUE7TUFDSCxJQUFDLENBQUEsYUFBRCxHQUFpQixJQUFDLENBQUE7YUFDbEIsSUFBQyxDQUFBLEtBQUQsR0FBUztJQUZOOztJQUlMLEtBQU8sQ0FBRSxLQUFGLENBQUE7TUFDTCxJQUFDLENBQUEsR0FBRCxDQUFBO2FBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUztJQUZKOztFQTFCVDs7RUFRRSxJQUFJLENBQUMsS0FBTCxDQUFXLEtBQUMsQ0FBQSxTQUFaLEVBQWdCO0lBQ2QsSUFBSSxDQUFDLE9BQUwsQ0FDRTtNQUFBLEtBQUEsRUFBTyxRQUFBLENBQUEsQ0FBQTtlQUFHLEtBQUEsQ0FBTSxJQUFDLENBQUEsS0FBUDtNQUFILENBQVA7TUFDQSxPQUFBLEVBQVMsUUFBQSxDQUFBLENBQUE7ZUFBRyxJQUFDLENBQUEsS0FBRCxJQUFXO01BQWQsQ0FEVDtNQUVBLE9BQUEsRUFBUyxRQUFBLENBQUEsQ0FBQTtlQUFHLElBQUMsQ0FBQSxLQUFELElBQVU7TUFBYixDQUZUO01BR0EsT0FBQSxFQUFTLFFBQUEsQ0FBQSxDQUFBO2VBQUcsQ0FBQyxJQUFDLENBQUE7TUFBTDtJQUhULENBREYsQ0FEYztHQUFoQjs7RUFZQSxLQUFDLENBQUEsTUFBRCxHQUFTLElBQUksQ0FBQyxNQUFMLENBQVksS0FBWjs7Ozs7O0FBV1gsT0FBQTtFQUNFLEtBREYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBNZXRhIGZyb20gXCJAZGFzaGtpdGUvam95L21ldGFjbGFzc1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgTWFjaGluZSB9IGZyb20gXCIuL21hY2hpbmVcIlxuaW1wb3J0IHsgJHN0YXJ0LCAkZW5kLCBhdFN0YXJ0LCBhdEVuZCB9IGZyb20gXCIuL3N0YXRlc1wiXG5cblxuY2xhc3MgVGFsb3NcbiAgY29uc3RydWN0b3I6ICh7IEBtYWNoaW5lIH0pIC0+XG4gICAgQG5hbWUgPSBAbWFjaGluZS5uYW1lXG4gICAgQHByZXZpb3VzU3RhdGUgPSBudWxsXG4gICAgQHN0YXRlID0gJHN0YXJ0XG4gICAgQGNvbnRleHQgPSB7fVxuICAgIEBlcnJvciA9IG51bGxcblxuICBNZXRhLm1peGluIEA6OiwgW1xuICAgIE1ldGEuZ2V0dGVyc1xuICAgICAgZW5kZWQ6IC0+IGF0RW5kIEBzdGF0ZVxuICAgICAgc3VjY2VzczogLT4gQGVuZGVkICYmICFAZXJyb3I/XG4gICAgICBmYWlsdXJlOiAtPiBAZW5kZWQgJiYgQGVycm9yP1xuICAgICAgcnVubmluZzogLT4gIUBlbmRlZFxuICBdXG5cbiAgQG1ha2U6ICggX21hY2hpbmUgKSAtPiBcbiAgICBtYWNoaW5lID0gTWFjaGluZS5tYWtlIF9tYWNoaW5lXG4gICAgbmV3IFRhbG9zIHsgbWFjaGluZSB9XG4gIFxuICBAaXNUeXBlOiBUeXBlLmlzVHlwZSBAXG5cbiAgZW5kOiAtPlxuICAgIEBwcmV2aW91c1N0YXRlID0gQHN0YXRlXG4gICAgQHN0YXRlID0gJGVuZFxuXG4gIGNhdGNoOiAoIGVycm9yICkgLT5cbiAgICBAZW5kKClcbiAgICBAZXJyb3IgPSBlcnJvclxuXG5cbmV4cG9ydCB7XG4gIFRhbG9zXG59Il19
 //# sourceURL=src/talos.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy90YWxvcy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTWV0YSBmcm9tIFwiQGRhc2hraXRlL2pveS9tZXRhY2xhc3NcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCB7IE1hY2hpbmUgfSBmcm9tIFwiLi9tYWNoaW5lXCJcbmltcG9ydCB7ICRzdGFydCwgJGVuZCwgYXRTdGFydCwgYXRFbmQgfSBmcm9tIFwiLi9zdGF0ZXNcIlxuXG5cbmNsYXNzIFRhbG9zXG4gIGNvbnN0cnVjdG9yOiAoeyBAbWFjaGluZSB9KSAtPlxuICAgIEBuYW1lID0gQG1hY2hpbmUubmFtZVxuICAgIEBwcmV2aW91c1N0YXRlID0gbnVsbFxuICAgIEBzdGF0ZSA9ICRzdGFydFxuICAgIEBjb250ZXh0ID0ge31cbiAgICBAZXJyb3IgPSBudWxsXG5cbiAgTWV0YS5taXhpbiBAOjosIFtcbiAgICBNZXRhLmdldHRlcnNcbiAgICAgIGVuZGVkOiAtPiBhdEVuZCBAc3RhdGVcbiAgICAgIHN1Y2Nlc3M6IC0+IEBlbmRlZCAmJiAhQGVycm9yP1xuICAgICAgZmFpbHVyZTogLT4gQGVuZGVkICYmIEBlcnJvcj9cbiAgICAgIHJ1bm5pbmc6IC0+ICFAZW5kZWRcbiAgXVxuXG4gIEBtYWtlOiAoIF9tYWNoaW5lICkgLT4gXG4gICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZSBfbWFjaGluZVxuICAgIG5ldyBUYWxvcyB7IG1hY2hpbmUgfVxuICBcbiAgQGlzVHlwZTogVHlwZS5pc1R5cGUgQFxuXG4gIGVuZDogLT5cbiAgICBAcHJldmlvdXNTdGF0ZSA9IEBzdGF0ZVxuICAgIEBzdGF0ZSA9ICRlbmRcblxuICBjYXRjaDogKCBlcnJvciApIC0+XG4gICAgQGVuZCgpXG4gICAgQGVycm9yID0gZXJyb3JcblxuXG5leHBvcnQge1xuICBUYWxvc1xufSJdLCJuYW1lcyI6WyJUYWxvcyIsIk1ldGEiLCJUeXBlIiwiTWFjaGluZSIsIiRzdGFydCIsIiRlbmQiLCJhdFN0YXJ0IiwiYXRFbmQiLCJjb25zdHJ1Y3RvciIsIm1hY2hpbmUiLCJtYWNoaW5lMSIsIm5hbWUiLCJwcmV2aW91c1N0YXRlIiwic3RhdGUiLCJjb250ZXh0IiwiZXJyb3IiLCJtYWtlIiwiX21hY2hpbmUiLCJlbmQiLCJjYXRjaCIsIm1peGluIiwicHJvdG90eXBlIiwiZ2V0dGVycyIsImVuZGVkIiwic3VjY2VzcyIsImZhaWx1cmUiLCJydW5uaW5nIiwiaXNUeXBlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQTtBQUFBLFlBQU9DLFVBQVAsMEJBQUE7QUFDQSxZQUFPQyxVQUFQLHFCQUFBO0FBQ0EsU0FBU0MsT0FBVCxRQUFBLFlBQUE7QUFDQSxTQUFTQyxNQUFULEVBQWlCQyxJQUFqQixFQUF1QkMsT0FBdkIsRUFBZ0NDLEtBQWhDLFFBQUEsV0FBQTtBQUdNUCxRQUFBLENBQUE7SUFBTixNQUFBQTtRQUNFUSxZQUFjLEVBQUdDLFNBQUFDLFFBQUEsRUFBSixDQUFBO1lBQUcsSUFBQyxDQUFBRCxPQUFBLEdBQUFDO1lBQ2YsSUFBQyxDQUFBQyxJQUFELEdBQVEsSUFBQyxDQUFBRixPQUFPLENBQUNFLElBQUE7WUFDakIsSUFBQyxDQUFBQyxhQUFELEdBQWlCO1lBQ2pCLElBQUMsQ0FBQUMsS0FBRCxHQUFTVDtZQUNULElBQUMsQ0FBQVUsT0FBRCxHQUFXLENBQUE7WUFDWCxJQUFDLENBQUFDLEtBQUQsR0FBUztRQUxFO1FBZU4sT0FBTkMsS0FBUUMsUUFBRixFQUFBO1lBQ1QsSUFBQVI7WUFBSUEsVUFBVU4sUUFBUWEsSUFBUixDQUFhQzttQkFDdkIsSUFBSWpCLE1BQU07Z0JBQUVTO1lBQUY7UUFGTDtRQU1QUyxNQUFLO1lBQ0gsSUFBQyxDQUFBTixhQUFELEdBQWlCLElBQUMsQ0FBQUMsS0FBQTttQkFDbEIsSUFBQyxDQUFBQSxLQUFELEdBQVNSO1FBRk47UUFJTGMsTUFBU0osS0FBRixFQUFBO1lBQ0wsSUFBQyxDQUFBRyxHQUFEO21CQUNBLElBQUMsQ0FBQUgsS0FBRCxHQUFTQTtRQUZKO0lBMUJUOztJQVFFZCxLQUFLbUIsS0FBTCxDQUFXcEIsTUFBQ3FCLFNBQVosRUFBZ0I7UUFDZHBCLEtBQUtxQixPQUFMLENBQ0U7WUFBQUMsT0FBTzt1QkFBR2hCLE1BQU0sSUFBQyxDQUFBTSxLQUFQO1lBQUg7WUFDUFcsU0FBUzt1QkFBRyxJQUFDLENBQUFELEtBQUQsSUFBVyxJQUFBLENBQUFSLEtBQUEsSUFBQTtZQUFkO1lBQ1RVLFNBQVM7dUJBQUcsSUFBQyxDQUFBRixLQUFELElBQVUsSUFBQSxDQUFBUixLQUFBLElBQUE7WUFBYjtZQUNUVyxTQUFTO3VCQUFHLENBQUMsSUFBQyxDQUFBSCxLQUFBO1lBQUw7UUFIVDtLQUZKO0lBWUF2QixNQUFDMkIsTUFBRCxHQUFTekIsS0FBS3lCLE1BQUwsQ0FBWTNCOzs7QUFXdkIsU0FDRUEsS0FERiJ9