var Vertex, _make, isState;
import * as Meta from "@dashkite/joy/metaclass";
import * as Type from "@dashkite/joy/type";
import * as Value from "@dashkite/joy/value";
import { generic } from "@dashkite/joy/generic";
import { oneOf } from "../helpers";
import { Edge } from "./edge";
isState = oneOf([
    Type.isString,
    Type.isSymbol
]);
_make = function(type) {
    var make;
    make = generic({
        name: "vertex make",
        default: function() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            throw new Error(`Vertex.make: input is malformed ${JSON.stringify(args)}`);
        }
    });
    generic(make, isState, Type.isArray, function(state, edges) {
        var edge;
        return new Vertex({
            state: state,
            edges: function() {
                var i, len, results;
                results = [];
                for(i = 0, len = edges.length; i < len; i++){
                    edge = edges[i];
                    results.push(Edge.make(edge));
                }
                return results;
            }()
        });
    });
    generic(make, isState, Type.isObject, function(state, _vertex) {
        var edge, edges, metadata;
        ({ edges, ...metadata } = _vertex);
        return new Vertex({
            metadata,
            state,
            edges: function() {
                var i, len, results;
                results = [];
                for(i = 0, len = edges.length; i < len; i++){
                    edge = edges[i];
                    results.push(Edge.make(edge));
                }
                return results;
            }()
        });
    });
    generic(make, isState, Type.isUndefined(function(state, _null) {
        return make(state, []);
    }));
    generic(make, isState, function(state) {
        return make(state, []);
    });
    generic(make, type.isType, function(vertex) {
        return vertex.clone();
    });
    generic(make, isState, type.isType, function(state, _vertex) {
        var vertex;
        vertex = _vertex.clone();
        vertex.state = state;
        return vertex;
    });
    return make;
};
Vertex = (function() {
    class Vertex {
        constructor({ state: state1, edges: edges1, metadata: metadata1 }){
            this.state = state1;
            this.edges = edges1;
            this.metadata = metadata1;
        }
        clone() {
            var edge, edges, state;
            state = Value.clone(this.state);
            edges = (function() {
                var i, len, ref, results;
                ref = this.edges;
                results = [];
                for(i = 0, len = ref.length; i < len; i++){
                    edge = ref[i];
                    results.push(edge.clone());
                }
                return results;
            }).call(this);
            return new Vertex({
                state,
                edges
            });
        }
    }
    ;
    Meta.mixin(Vertex.prototype, [
        Meta.getters({})
    ]);
    Vertex.make = _make(Vertex);
    Vertex.isType = Type.isType(Vertex);
    return Vertex;
}).call(this);
export { isState, Vertex }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL2NvbnRhaW5lcnMvdmVydGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUE7O0FBQUEsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxTQUFQLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE9BQVQ7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsSUFBVDtDQUFBLE1BQUE7O0FBR0EsT0FBQSxHQUFVLEtBQUEsQ0FBTSxDQUNkLElBQUksQ0FBQyxRQURTLEVBRWQsSUFBSSxDQUFDLFFBRlMsQ0FBTjs7QUFLVixLQUFBLEdBQVEsUUFBQSxDQUFFLElBQUYsQ0FBQTtBQUNSLE1BQUE7RUFBRSxJQUFBLEdBQU8sT0FBQSxDQUNMO0lBQUEsSUFBQSxFQUFNLGFBQU47SUFDQSxPQUFBLEVBQVMsUUFBQSxDQUFBLEdBQUUsSUFBRixDQUFBO01BQ1AsTUFBTSxJQUFJLEtBQUosQ0FBVSxDQUFBLGdDQUFBLENBQUEsQ0FBbUMsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFmLENBQW5DLENBQUEsQ0FBVjtJQURDO0VBRFQsQ0FESztFQUtQLE9BQUEsQ0FBUSxJQUFSLEVBQWMsT0FBZCxFQUF1QixJQUFJLENBQUMsT0FBNUIsRUFBcUMsUUFBQSxDQUFFLEtBQUYsRUFBUyxLQUFULENBQUE7QUFDdkMsUUFBQTtXQUFJLElBQUksTUFBSixDQUNFO01BQUEsS0FBQSxFQUFPLEtBQVA7TUFDQSxLQUFBOztBQUFTO1FBQUEsS0FBQSx1Q0FBQTs7dUJBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWO1FBQUEsQ0FBQTs7O0lBRFQsQ0FERjtFQURtQyxDQUFyQztFQUtBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsT0FBZCxFQUF1QixJQUFJLENBQUMsUUFBNUIsRUFBc0MsUUFBQSxDQUFFLEtBQUYsRUFBUyxPQUFULENBQUE7QUFDeEMsUUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBO0lBQUksQ0FBQSxDQUFFLEtBQUYsRUFBUyxHQUFBLFFBQVQsQ0FBQSxHQUF5QixPQUF6QjtXQUNBLElBQUksTUFBSixDQUFXO01BQ1QsUUFEUztNQUVULEtBRlM7TUFHVCxLQUFBOztBQUFTO1FBQUEsS0FBQSx1Q0FBQTs7dUJBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWO1FBQUEsQ0FBQTs7O0lBSEEsQ0FBWDtFQUZvQyxDQUF0QztFQVFBLE9BQUEsQ0FBUSxJQUFSLEVBQWMsT0FBZCxFQUF1QixJQUFJLENBQUMsV0FBTCxDQUFpQixRQUFBLENBQUUsS0FBRixFQUFTLEtBQVQsQ0FBQTtXQUN0QyxJQUFBLENBQUssS0FBTCxFQUFZLEVBQVo7RUFEc0MsQ0FBakIsQ0FBdkI7RUFHQSxPQUFBLENBQVEsSUFBUixFQUFjLE9BQWQsRUFBdUIsUUFBQSxDQUFFLEtBQUYsQ0FBQTtXQUNyQixJQUFBLENBQUssS0FBTCxFQUFZLEVBQVo7RUFEcUIsQ0FBdkI7RUFHQSxPQUFBLENBQVEsSUFBUixFQUFjLElBQUksQ0FBQyxNQUFuQixFQUEyQixRQUFBLENBQUUsTUFBRixDQUFBO1dBQ3pCLE1BQU0sQ0FBQyxLQUFQLENBQUE7RUFEeUIsQ0FBM0I7RUFHQSxPQUFBLENBQVEsSUFBUixFQUFjLE9BQWQsRUFBdUIsSUFBSSxDQUFDLE1BQTVCLEVBQW9DLFFBQUEsQ0FBRSxLQUFGLEVBQVMsT0FBVCxDQUFBO0FBQ3RDLFFBQUE7SUFBSSxNQUFBLEdBQVMsT0FBTyxDQUFDLEtBQVIsQ0FBQTtJQUNULE1BQU0sQ0FBQyxLQUFQLEdBQWU7V0FDZjtFQUhrQyxDQUFwQztTQUtBO0FBakNNOztBQW9DRjtFQUFOLE1BQUEsT0FBQTtJQUNFLFdBQWEsQ0FBQztRQUFHLGFBQUg7UUFBVyxhQUFYO1FBQW1CO01BQW5CLENBQUQsQ0FBQTtNQUFHLElBQUMsQ0FBQTtNQUFPLElBQUMsQ0FBQTtNQUFPLElBQUMsQ0FBQTtJQUFwQjs7SUFTYixLQUFPLENBQUEsQ0FBQTtBQUNULFVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQTtNQUFJLEtBQUEsR0FBUSxLQUFLLENBQUMsS0FBTixDQUFZLElBQUMsQ0FBQSxLQUFiO01BQ1IsS0FBQTs7QUFBVTtBQUFBO1FBQUEsS0FBQSxxQ0FBQTs7dUJBQUEsSUFBSSxDQUFDLEtBQUwsQ0FBQTtRQUFBLENBQUE7OzthQUNWLElBQUksTUFBSixDQUFXLENBQUUsS0FBRixFQUFTLEtBQVQsQ0FBWDtJQUhLOztFQVZUOztFQUdFLElBQUksQ0FBQyxLQUFMLENBQVcsTUFBQyxDQUFBLFNBQVosRUFBZ0IsQ0FDZCxJQUFJLENBQUMsT0FBTCxDQUFhLENBQUEsQ0FBYixDQURjLENBQWhCOztFQUlBLE1BQUMsQ0FBQSxJQUFELEdBQU8sS0FBQSxDQUFNLE1BQU47O0VBQ1AsTUFBQyxDQUFBLE1BQUQsR0FBUyxJQUFJLENBQUMsTUFBTCxDQUFZLE1BQVo7Ozs7OztBQVFYLE9BQUE7RUFDRSxPQURGO0VBRUUsTUFGRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE1ldGEgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvbWV0YWNsYXNzXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBWYWx1ZSBmcm9tIFwiQGRhc2hraXRlL2pveS92YWx1ZVwiXG5pbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgeyBvbmVPZiB9IGZyb20gXCIuLi9oZWxwZXJzXCJcbmltcG9ydCB7IEVkZ2UgfSBmcm9tIFwiLi9lZGdlXCJcblxuXG5pc1N0YXRlID0gb25lT2YgW1xuICBUeXBlLmlzU3RyaW5nXG4gIFR5cGUuaXNTeW1ib2xcbl1cblxuX21ha2UgPSAoIHR5cGUgKSAtPlxuICBtYWtlID0gZ2VuZXJpYyBcbiAgICBuYW1lOiBcInZlcnRleCBtYWtlXCJcbiAgICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICAgIHRocm93IG5ldyBFcnJvciBcIlZlcnRleC5tYWtlOiBpbnB1dCBpcyBtYWxmb3JtZWQgI3tKU09OLnN0cmluZ2lmeSBhcmdzfVwiXG5cbiAgZ2VuZXJpYyBtYWtlLCBpc1N0YXRlLCBUeXBlLmlzQXJyYXksICggc3RhdGUsIGVkZ2VzICkgLT5cbiAgICBuZXcgVmVydGV4XG4gICAgICBzdGF0ZTogc3RhdGVcbiAgICAgIGVkZ2VzOiAoIEVkZ2UubWFrZSBlZGdlIGZvciBlZGdlIGluIGVkZ2VzIClcblxuICBnZW5lcmljIG1ha2UsIGlzU3RhdGUsIFR5cGUuaXNPYmplY3QsICggc3RhdGUsIF92ZXJ0ZXggKSAtPlxuICAgIHsgZWRnZXMsIG1ldGFkYXRhLi4uIH0gPSBfdmVydGV4ICAgIFxuICAgIG5ldyBWZXJ0ZXgge1xuICAgICAgbWV0YWRhdGFcbiAgICAgIHN0YXRlXG4gICAgICBlZGdlczogKCBFZGdlLm1ha2UgZWRnZSBmb3IgZWRnZSBpbiBlZGdlcyApXG4gICAgfVxuXG4gIGdlbmVyaWMgbWFrZSwgaXNTdGF0ZSwgVHlwZS5pc1VuZGVmaW5lZCAoIHN0YXRlLCBfbnVsbCApIC0+XG4gICAgbWFrZSBzdGF0ZSwgW11cblxuICBnZW5lcmljIG1ha2UsIGlzU3RhdGUsICggc3RhdGUgKSAtPlxuICAgIG1ha2Ugc3RhdGUsIFtdXG5cbiAgZ2VuZXJpYyBtYWtlLCB0eXBlLmlzVHlwZSwgKCB2ZXJ0ZXggKSAtPlxuICAgIHZlcnRleC5jbG9uZSgpXG5cbiAgZ2VuZXJpYyBtYWtlLCBpc1N0YXRlLCB0eXBlLmlzVHlwZSwgKCBzdGF0ZSwgX3ZlcnRleCApIC0+XG4gICAgdmVydGV4ID0gX3ZlcnRleC5jbG9uZSgpXG4gICAgdmVydGV4LnN0YXRlID0gc3RhdGVcbiAgICB2ZXJ0ZXhcblxuICBtYWtlXG5cblxuY2xhc3MgVmVydGV4XG4gIGNvbnN0cnVjdG9yOiAoeyBAc3RhdGUsIEBlZGdlcywgQG1ldGFkYXRhIH0pIC0+XG5cbiAgTWV0YS5taXhpbiBAOjosIFtcbiAgICBNZXRhLmdldHRlcnMge31cbiAgXVxuXG4gIEBtYWtlOiBfbWFrZSBAXG4gIEBpc1R5cGU6IFR5cGUuaXNUeXBlIEBcblxuICBjbG9uZTogLT5cbiAgICBzdGF0ZSA9IFZhbHVlLmNsb25lIEBzdGF0ZVxuICAgIGVkZ2VzID0gKCBlZGdlLmNsb25lKCkgZm9yIGVkZ2UgaW4gQGVkZ2VzIClcbiAgICBuZXcgVmVydGV4IHsgc3RhdGUsIGVkZ2VzIH1cblxuXG5leHBvcnQge1xuICBpc1N0YXRlXG4gIFZlcnRleFxufSJdfQ==
 //# sourceURL=src/containers/vertex.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250YWluZXJzL3ZlcnRleC5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTWV0YSBmcm9tIFwiQGRhc2hraXRlL2pveS9tZXRhY2xhc3NcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIFZhbHVlIGZyb20gXCJAZGFzaGtpdGUvam95L3ZhbHVlXCJcbmltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcbmltcG9ydCB7IG9uZU9mIH0gZnJvbSBcIi4uL2hlbHBlcnNcIlxuaW1wb3J0IHsgRWRnZSB9IGZyb20gXCIuL2VkZ2VcIlxuXG5cbmlzU3RhdGUgPSBvbmVPZiBbXG4gIFR5cGUuaXNTdHJpbmdcbiAgVHlwZS5pc1N5bWJvbFxuXVxuXG5fbWFrZSA9ICggdHlwZSApIC0+XG4gIG1ha2UgPSBnZW5lcmljIFxuICAgIG5hbWU6IFwidmVydGV4IG1ha2VcIlxuICAgIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgICAgdGhyb3cgbmV3IEVycm9yIFwiVmVydGV4Lm1ha2U6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuICBnZW5lcmljIG1ha2UsIGlzU3RhdGUsIFR5cGUuaXNBcnJheSwgKCBzdGF0ZSwgZWRnZXMgKSAtPlxuICAgIG5ldyBWZXJ0ZXhcbiAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgZWRnZXM6ICggRWRnZS5tYWtlIGVkZ2UgZm9yIGVkZ2UgaW4gZWRnZXMgKVxuXG4gIGdlbmVyaWMgbWFrZSwgaXNTdGF0ZSwgVHlwZS5pc09iamVjdCwgKCBzdGF0ZSwgX3ZlcnRleCApIC0+XG4gICAgeyBlZGdlcywgbWV0YWRhdGEuLi4gfSA9IF92ZXJ0ZXggICAgXG4gICAgbmV3IFZlcnRleCB7XG4gICAgICBtZXRhZGF0YVxuICAgICAgc3RhdGVcbiAgICAgIGVkZ2VzOiAoIEVkZ2UubWFrZSBlZGdlIGZvciBlZGdlIGluIGVkZ2VzIClcbiAgICB9XG5cbiAgZ2VuZXJpYyBtYWtlLCBpc1N0YXRlLCBUeXBlLmlzVW5kZWZpbmVkICggc3RhdGUsIF9udWxsICkgLT5cbiAgICBtYWtlIHN0YXRlLCBbXVxuXG4gIGdlbmVyaWMgbWFrZSwgaXNTdGF0ZSwgKCBzdGF0ZSApIC0+XG4gICAgbWFrZSBzdGF0ZSwgW11cblxuICBnZW5lcmljIG1ha2UsIHR5cGUuaXNUeXBlLCAoIHZlcnRleCApIC0+XG4gICAgdmVydGV4LmNsb25lKClcblxuICBnZW5lcmljIG1ha2UsIGlzU3RhdGUsIHR5cGUuaXNUeXBlLCAoIHN0YXRlLCBfdmVydGV4ICkgLT5cbiAgICB2ZXJ0ZXggPSBfdmVydGV4LmNsb25lKClcbiAgICB2ZXJ0ZXguc3RhdGUgPSBzdGF0ZVxuICAgIHZlcnRleFxuXG4gIG1ha2VcblxuXG5jbGFzcyBWZXJ0ZXhcbiAgY29uc3RydWN0b3I6ICh7IEBzdGF0ZSwgQGVkZ2VzLCBAbWV0YWRhdGEgfSkgLT5cblxuICBNZXRhLm1peGluIEA6OiwgW1xuICAgIE1ldGEuZ2V0dGVycyB7fVxuICBdXG5cbiAgQG1ha2U6IF9tYWtlIEBcbiAgQGlzVHlwZTogVHlwZS5pc1R5cGUgQFxuXG4gIGNsb25lOiAtPlxuICAgIHN0YXRlID0gVmFsdWUuY2xvbmUgQHN0YXRlXG4gICAgZWRnZXMgPSAoIGVkZ2UuY2xvbmUoKSBmb3IgZWRnZSBpbiBAZWRnZXMgKVxuICAgIG5ldyBWZXJ0ZXggeyBzdGF0ZSwgZWRnZXMgfVxuXG5cbmV4cG9ydCB7XG4gIGlzU3RhdGVcbiAgVmVydGV4XG59Il0sIm5hbWVzIjpbIlZlcnRleCIsIl9tYWtlIiwiaXNTdGF0ZSIsIk1ldGEiLCJUeXBlIiwiVmFsdWUiLCJnZW5lcmljIiwib25lT2YiLCJFZGdlIiwiaXNTdHJpbmciLCJpc1N5bWJvbCIsInR5cGUiLCJtYWtlIiwibmFtZSIsImRlZmF1bHQiLCJhcmdzIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNBcnJheSIsInN0YXRlIiwiZWRnZXMiLCJlZGdlIiwicmVzdWx0cyIsImkiLCJsZW4iLCJsZW5ndGgiLCJpc09iamVjdCIsIl92ZXJ0ZXgiLCJtZXRhZGF0YSIsImlzVW5kZWZpbmVkIiwiX251bGwiLCJpc1R5cGUiLCJ2ZXJ0ZXgiLCJjbG9uZSIsImNvbnN0cnVjdG9yIiwic3RhdGUxIiwiZWRnZXMxIiwibWV0YWRhdGExIiwicmVmIiwibWl4aW4iLCJwcm90b3R5cGUiLCJnZXR0ZXJzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSxRQUFBQyxPQUFBQztBQUFBLFlBQU9DLFVBQVAsMEJBQUE7QUFDQSxZQUFPQyxVQUFQLHFCQUFBO0FBQ0EsWUFBT0MsV0FBUCxzQkFBQTtBQUNBLFNBQVNDLE9BQVQsUUFBQSx3QkFBQTtBQUNBLFNBQVNDLEtBQVQsUUFBQSxhQUFBO0FBQ0EsU0FBU0MsSUFBVCxRQUFBLFNBQUE7QUFHQU4sVUFBVUssTUFBTTtJQUNkSCxLQUFLSyxRQURTO0lBRWRMLEtBQUtNLFFBRlM7Q0FBTjtBQUtWVCxRQUFRLFNBQUVVLElBQUY7SUFDUixJQUFBQztJQUFFQSxPQUFPTixRQUNMO1FBQUFPLE1BQU07UUFDTkMsU0FBUztZQUFBLElBQUEsSUFBQSxPQUFBLFVBQUEsUUFBQSxBQUFFQyxPQUFGLFVBQUEsT0FBQSxPQUFBLEdBQUEsT0FBQSxNQUFBLE9BQUE7Z0JBQUVBLEtBQUYsUUFBQSxTQUFBLENBQUEsS0FBQTtZQUFFO1lBQ1QsTUFBTSxJQUFJQyxNQUFNLENBQUEsZ0NBQUEsRUFBbUNDLEtBQUtDLFNBQUwsQ0FBZUgsTUFBbEQsQ0FBVjtRQURDO0lBRFQ7SUFJRlQsUUFBUU0sTUFBTVYsU0FBU0UsS0FBS2UsT0FBNUIsRUFBcUMsU0FBRUMsS0FBRixFQUFTQyxLQUFUO1FBQ3ZDLElBQUFDO2VBQUksSUFBSXRCLE9BQ0Y7WUFBQW9CLE9BQU9BO1lBQ1BDLE9BQUE7O2dCQUFTRSxVQUFBLEVBQUE7Z0JBQUEsSUFBQUMsSUFBQSxHQUFBQyxNQUFBSixNQUFBSyxNQUFBLEVBQUFGLElBQUFDLEtBQUFELElBQUE7O2lDQUFBaEIsS0FBS0ksSUFBTCxDQUFVVTtnQkFBVjs7O1FBRFQ7SUFGaUM7SUFLckNoQixRQUFRTSxNQUFNVixTQUFTRSxLQUFLdUIsUUFBNUIsRUFBc0MsU0FBRVAsS0FBRixFQUFTUSxPQUFUO1FBQ3hDLElBQUFOLE1BQUFELE9BQUFRO1FBQUksQ0FBQSxFQUFFUixLQUFGLEVBQVMsR0FBQVEsVUFBVCxHQUF5QkQsT0FBQTtlQUN6QixJQUFJNUIsT0FBTztZQUNUNkI7WUFDQVQ7WUFDQUMsT0FBQTs7Z0JBQVNFLFVBQUEsRUFBQTtnQkFBQSxJQUFBQyxJQUFBLEdBQUFDLE1BQUFKLE1BQUFLLE1BQUEsRUFBQUYsSUFBQUMsS0FBQUQsSUFBQTs7aUNBQUFoQixLQUFLSSxJQUFMLENBQVVVO2dCQUFWOzs7UUFIQTtJQUZ5QjtJQVF0Q2hCLFFBQVFNLE1BQU1WLFNBQVNFLEtBQUswQixXQUFMLENBQWlCLFNBQUVWLEtBQUYsRUFBU1csS0FBVDtlQUN0Q25CLEtBQUtRLE9BQU8sRUFBWjtJQURzQztJQUd4Q2QsUUFBUU0sTUFBTVYsU0FBUyxTQUFFa0IsS0FBRjtlQUNyQlIsS0FBS1EsT0FBTyxFQUFaO0lBRHFCO0lBR3ZCZCxRQUFRTSxNQUFNRCxLQUFLcUIsTUFBbkIsRUFBMkIsU0FBRUMsTUFBRjtlQUN6QkEsT0FBT0MsS0FBUDtJQUR5QjtJQUczQjVCLFFBQVFNLE1BQU1WLFNBQVNTLEtBQUtxQixNQUE1QixFQUFvQyxTQUFFWixLQUFGLEVBQVNRLE9BQVQ7UUFDdEMsSUFBQUs7UUFBSUEsU0FBU0wsUUFBUU0sS0FBUjtRQUNURCxPQUFPYixLQUFQLEdBQWVBO2VBQ2ZhO0lBSGtDO1dBS3BDckI7QUFqQ007QUFvQ0ZaLFNBQUEsQ0FBQTtJQUFOLE1BQUFBO1FBQ0VtQyxZQUFjLEVBQUdmLE9BQUFnQixNQUFILEVBQVdmLE9BQUFnQixNQUFYLEVBQW1CUixVQUFBUyxTQUFBLEVBQXBCLENBQUE7WUFBRyxJQUFDLENBQUFsQixLQUFBLEdBQUFnQjtZQUFPLElBQUMsQ0FBQWYsS0FBQSxHQUFBZ0I7WUFBTyxJQUFDLENBQUFSLFFBQUEsR0FBQVM7UUFBcEI7UUFTYkosUUFBTztZQUNULElBQUFaLE1BQUFELE9BQUFEO1lBQUlBLFFBQVFmLE1BQU02QixLQUFOLENBQVksSUFBQyxDQUFBZCxLQUFiO1lBQ1JDLFFBQUEsQ0FBQTs7Z0JBQVVrQixNQUFBLElBQUEsQ0FBQWxCLEtBQUE7Z0JBQUFFLFVBQUEsRUFBQTtnQkFBQSxJQUFBQyxJQUFBLEdBQUFDLE1BQUFjLElBQUFiLE1BQUEsRUFBQUYsSUFBQUMsS0FBQUQsSUFBQTs7aUNBQUFGLEtBQUtZLEtBQUw7Z0JBQUE7OzttQkFDVixJQUFJbEMsT0FBTztnQkFBRW9CO2dCQUFPQztZQUFUO1FBSE47SUFWVDs7SUFHRWxCLEtBQUtxQyxLQUFMLENBQVd4QyxPQUFDeUMsU0FBWixFQUFnQjtRQUNkdEMsS0FBS3VDLE9BQUwsQ0FBYSxDQUFBO0tBRGY7SUFJQTFDLE9BQUNZLElBQUQsR0FBT1gsTUFBTUQ7SUFDYkEsT0FBQ2dDLE1BQUQsR0FBUzVCLEtBQUs0QixNQUFMLENBQVloQzs7O0FBUXZCLFNBQ0VFLE9BREYsRUFFRUYsTUFGRiJ9