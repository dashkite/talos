"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stepSync = void 0;
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _predicate = require("@dashkite/joy/predicate");
var _generic = require("@dashkite/joy/generic");
var _index = require("../containers/index.js");
var Errors = _interopRequireWildcard(require("../containers/errors.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var _step, matchEdge, matchVertex, move, run, step;
matchVertex = function (graph, talos) {
  var vertex;
  vertex = graph.get(talos);
  if (vertex == null) {
    talos.throw(Errors.InvalidState.create(`talos state ${talos.state} is not in graph`));
  }
  return vertex;
};
matchEdge = function (vertex, talos, transform) {
  var edge, i, len, ref;
  ref = vertex.edges;
  for (i = 0, len = ref.length; i < len; i++) {
    edge = ref[i];
    if (edge.accept(transform, talos) === true) {
      return edge;
    }
  }
  return talos.throw(Errors.MissingTransition.create(`no edge matches transform ${transform}`));
};
run = function (talos, edge) {
  var error;
  if (edge.run != null) {
    try {
      return edge.run(talos);
    } catch (error1) {
      error = error1;
      return talos.throw(Errors.FailedRun.create(error, "encountered an error while running edge function"));
    }
  }
};
move = function (talos, edge) {
  var error;
  try {
    return edge.move(talos);
  } catch (error1) {
    error = error1;
    return talos.throw(Errors.FailedMove.create(error, "encountered an error while moving states"));
  }
};
exports.stepSync = step = (0, _generic.generic)({
  name: "step talos",
  default: function (...args) {
    throw new Error(`step: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(step, _index.Graph.isType, _index.Talos.isType, Type.isAny, function (graph, talos, transform) {
  return _step(graph, talos, transform);
});
(0, _generic.generic)(step, _index.Graph.isType, (0, _predicate.negate)(_index.Talos.isType), function (graph, transform) {
  return step(graph, _index.Talos.create(), transform);
});
_step = function (graph, talos, transform) {
  var edge, vertex;
  vertex = matchVertex(graph, talos);
  if (talos.halted) {
    return talos;
  }
  edge = matchEdge(vertex, talos, transform);
  if (talos.halted) {
    return talos;
  }
  run(talos, edge);
  if (talos.halted) {
    return talos;
  }
  move(talos, edge);
  return talos;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9mdW5jdGlvbnMvc3RlcC1zeW5jLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBLElBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLFVBQUEsR0FBQSxPQUFBO0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQTtBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUE7QUFBQSxJQUFBLE1BQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUE7QUFBQSxTQUFBLHlCQUFBLENBQUEsNkJBQUEsT0FBQSxtQkFBQSxDQUFBLE9BQUEsT0FBQSxJQUFBLENBQUEsT0FBQSxPQUFBLFlBQUEsd0JBQUEsWUFBQSxDQUFBLENBQUEsV0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBO0FBQUEsU0FBQSx3QkFBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLFVBQUEsU0FBQSxDQUFBLGVBQUEsQ0FBQSx1QkFBQSxDQUFBLHlCQUFBLENBQUEsV0FBQSxPQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSx3QkFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLFNBQUEsVUFBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsSUFBQSxNQUFBLENBQUEsd0JBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxvQkFBQSxDQUFBLElBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxVQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsR0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEs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LFNBQXBCLENBQUE7QUFEb0QsQ0FBdEQsQ0FBQTtBQUdBLElBQUEsZ0JBQUEsRUFBUSxJQUFSLEVBQWMsWUFBSyxDQUFDLE1BQXBCLEVBQThCLElBQUEsaUJBQUEsRUFBTyxZQUFLLENBQUMsTUFBYixDQUE5QixFQUFxRCxVQUFFLEtBQUYsRUFBUyxTQUFULEVBQUE7U0FDbkQsSUFBQSxDQUFLLEtBQUwsRUFBWSxZQUFLLENBQUMsTUFBTixDQUFBLENBQVosRUFBNEIsU0FBNUIsQ0FBQTtBQURtRCxDQUFyRCxDQUFBO0FBSUEsS0FBQSxHQUFRLFNBQUEsQ0FBRSxLQUFGLEVBQVMsS0FBVCxFQUFnQixTQUFoQixFQUFBO0VBQ1IsSUFBQSxJQUFBLEVBQUEsTUFBQTtFQUFFLE1BQUEsR0FBUyxXQUFBLENBQVksS0FBWixFQUFtQixLQUFuQixDQUFBO0VBQ1QsSUFBZ0IsS0FBSyxDQUFDLE1BQXRCLEVBQUE7SUFBQSxPQUFPLEtBQVA7O0VBRUEsSUFBQSxHQUFPLFNBQUEsQ0FBVSxNQUFWLEVBQWtCLEtBQWxCLEVBQXlCLFNBQXpCLENBQUE7RUFDUCxJQUFnQixLQUFLLENBQUMsTUFBdEIsRUFBQTtJQUFBLE9BQU8sS0FBUDs7RUFFQSxHQUFBLENBQUksS0FBSixFQUFXLElBQVgsQ0FBQTtFQUNBLElBQWdCLEtBQUssQ0FBQyxNQUF0QixFQUFBO0lBQUEsT0FBTyxLQUFQOztFQUVBLElBQUEsQ0FBSyxLQUFMLEVBQVksSUFBWixDQUFBO1NBQ0EsS0FBQTtBQVhNLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgbmVnYXRlIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvcHJlZGljYXRlXCJcbmltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcbmltcG9ydCB7IEdyYXBoLCBUYWxvcyB9IGZyb20gXCIuLi9jb250YWluZXJzXCJcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi4vY29udGFpbmVycy9lcnJvcnNcIlxuXG5cbm1hdGNoVmVydGV4ID0gKCBncmFwaCwgdGFsb3MgKSAtPlxuICB2ZXJ0ZXggPSBncmFwaC5nZXQgdGFsb3NcbiAgaWYgIXZlcnRleD9cbiAgICB0YWxvcy50aHJvdyBFcnJvcnMuSW52YWxpZFN0YXRlLmNyZWF0ZSBcInRhbG9zIHN0YXRlICN7IHRhbG9zLnN0YXRlIH0gaXNcbiAgICAgIG5vdCBpbiBncmFwaFwiXG4gIHZlcnRleFxuXG5tYXRjaEVkZ2UgPSAoIHZlcnRleCwgdGFsb3MsIHRyYW5zZm9ybSApIC0+XG4gIGZvciBlZGdlIGluIHZlcnRleC5lZGdlc1xuICAgIGlmICggZWRnZS5hY2NlcHQgdHJhbnNmb3JtLCB0YWxvcyApID09IHRydWVcbiAgICAgIHJldHVybiBlZGdlXG4gIHRhbG9zLnRocm93IEVycm9ycy5NaXNzaW5nVHJhbnNpdGlvbi5jcmVhdGUgXCJubyBlZGdlIG1hdGNoZXMgdHJhbnNmb3JtIFxuICAgICN7IHRyYW5zZm9ybSB9XCJcblxucnVuID0gKCB0YWxvcywgZWRnZSApIC0+XG4gIGlmIGVkZ2UucnVuP1xuICAgIHRyeVxuICAgICAgZWRnZS5ydW4gdGFsb3NcbiAgICBjYXRjaCBlcnJvclxuICAgICAgdGFsb3MudGhyb3cgRXJyb3JzLkZhaWxlZFJ1bi5jcmVhdGUgZXJyb3IsIFxuICAgICAgICBcImVuY291bnRlcmVkIGFuIGVycm9yIHdoaWxlIHJ1bm5pbmcgZWRnZSBmdW5jdGlvblwiXG5cbm1vdmUgPSAoIHRhbG9zLCBlZGdlICkgLT5cbiAgdHJ5XG4gICAgZWRnZS5tb3ZlIHRhbG9zXG4gIGNhdGNoIGVycm9yXG4gICAgdGFsb3MudGhyb3cgRXJyb3JzLkZhaWxlZE1vdmUuY3JlYXRlIGVycm9yLCBcbiAgICAgIFwiZW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgbW92aW5nIHN0YXRlc1wiXG5cblxuc3RlcCA9IGdlbmVyaWMgXG4gIG5hbWU6IFwic3RlcCB0YWxvc1wiXG4gIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgIHRocm93IG5ldyBFcnJvciBcInN0ZXA6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuZ2VuZXJpYyBzdGVwLCBHcmFwaC5pc1R5cGUsIFRhbG9zLmlzVHlwZSwgVHlwZS5pc0FueSwgKCBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybSApIC0+XG4gIF9zdGVwIGdyYXBoLCB0YWxvcywgdHJhbnNmb3JtXG5cbmdlbmVyaWMgc3RlcCwgR3JhcGguaXNUeXBlLCAoIG5lZ2F0ZSBUYWxvcy5pc1R5cGUgKSwgKCBncmFwaCwgdHJhbnNmb3JtICkgLT5cbiAgc3RlcCBncmFwaCwgVGFsb3MuY3JlYXRlKCksIHRyYW5zZm9ybVxuXG5cbl9zdGVwID0gKCBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybSApIC0+XG4gIHZlcnRleCA9IG1hdGNoVmVydGV4IGdyYXBoLCB0YWxvc1xuICByZXR1cm4gdGFsb3MgaWYgdGFsb3MuaGFsdGVkXG5cbiAgZWRnZSA9IG1hdGNoRWRnZSB2ZXJ0ZXgsIHRhbG9zLCB0cmFuc2Zvcm1cbiAgcmV0dXJuIHRhbG9zIGlmIHRhbG9zLmhhbHRlZFxuXG4gIHJ1biB0YWxvcywgZWRnZVxuICByZXR1cm4gdGFsb3MgaWYgdGFsb3MuaGFsdGVkXG5cbiAgbW92ZSB0YWxvcywgZWRnZVxuICB0YWxvc1xuXG5cbmV4cG9ydCB7XG4gIHN0ZXAgYXMgc3RlcFN5bmNcbn0iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=src/functions/step-sync.coffee