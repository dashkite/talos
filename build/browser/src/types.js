var asyncGeneratorFunction, generatorFunction, isAsyncGeneratorFunction, isGeneratorFunction, isGeneratorFunctionKind, isIteratorKind, isMachine;
import * as Type from "@dashkite/joy/type";
// Async state machines can consume sync event iterators, so long as we let async
// behavior take over downstream.
isIteratorKind = function(x) {
    return x[Symbol.asyncIterator] != null || x[Symbol.iterator] != null;
};
// TODO: Rely on errors from machine expansion for now, but this is starting to
// look like an externally useful type.
isMachine = function(x) {
    return Type.isObject(x) || Type.isArray(x);
};
// The async module handles both sync and async cases, so we need to be pedantic
// in our type resolution so we match on both for nested machines.
generatorFunction = (function*() {
    return yield null;
}).constructor;
isGeneratorFunction = Type.isKind(generatorFunction);
asyncGeneratorFunction = (async function*() {
    return yield await null;
}).constructor;
isAsyncGeneratorFunction = Type.isKind(asyncGeneratorFunction);
isGeneratorFunctionKind = function(x) {
    return isAsyncGeneratorFunction(x) || isGeneratorFunction(x);
};
export { isIteratorKind, isMachine, isGeneratorFunction, isAsyncGeneratorFunction, isGeneratorFunctionKind }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL3R5cGVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLHNCQUFBLEVBQUEsaUJBQUEsRUFBQSx3QkFBQSxFQUFBLG1CQUFBLEVBQUEsdUJBQUEsRUFBQSxjQUFBLEVBQUE7O0FBQUEsT0FBTyxDQUFBLFFBQVAsTUFBQSxxQkFBQTs7OztBQUlBLGNBQUEsR0FBaUIsUUFBQSxDQUFFLENBQUYsQ0FBQTtTQUFTLGlDQUFBLElBQThCO0FBQXZDLEVBSmpCOzs7O0FBUUEsU0FBQSxHQUFZLFFBQUEsQ0FBRSxDQUFGLENBQUE7U0FBUyxDQUFFLElBQUksQ0FBQyxRQUFMLENBQWMsQ0FBZCxDQUFGLENBQUEsSUFBdUIsQ0FBRSxJQUFJLENBQUMsT0FBTCxDQUFhLENBQWIsQ0FBRjtBQUFoQyxFQVJaOzs7O0FBWUEsaUJBQUEsR0FBb0IsQ0FBQyxTQUFBLENBQUEsQ0FBQTtTQUFHLENBQUEsTUFBTSxJQUFOO0FBQUgsQ0FBRCxDQUFlLENBQUM7O0FBQ3BDLG1CQUFBLEdBQXNCLElBQUksQ0FBQyxNQUFMLENBQVksaUJBQVo7O0FBQ3RCLHNCQUFBLEdBQXlCLENBQUMsTUFBQSxTQUFBLENBQUEsQ0FBQTtTQUFHLENBQUEsTUFBTSxDQUFBLE1BQU0sSUFBTixDQUFOO0FBQUgsQ0FBRCxDQUFxQixDQUFDOztBQUMvQyx3QkFBQSxHQUEyQixJQUFJLENBQUMsTUFBTCxDQUFZLHNCQUFaOztBQUMzQix1QkFBQSxHQUEwQixRQUFBLENBQUUsQ0FBRixDQUFBO1NBQ3hCLENBQUMsd0JBQUEsQ0FBeUIsQ0FBekIsQ0FBRCxDQUFBLElBQWdDLENBQUMsbUJBQUEsQ0FBb0IsQ0FBcEIsQ0FBRDtBQURSOztBQUcxQixPQUFBO0VBQ0UsY0FERjtFQUVFLFNBRkY7RUFHRSxtQkFIRjtFQUlFLHdCQUpGO0VBS0UsdUJBTEYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuXG4jIEFzeW5jIHN0YXRlIG1hY2hpbmVzIGNhbiBjb25zdW1lIHN5bmMgZXZlbnQgaXRlcmF0b3JzLCBzbyBsb25nIGFzIHdlIGxldCBhc3luY1xuIyBiZWhhdmlvciB0YWtlIG92ZXIgZG93bnN0cmVhbS5cbmlzSXRlcmF0b3JLaW5kID0gKCB4ICkgLT4geFsgU3ltYm9sLmFzeW5jSXRlcmF0b3IgXT8gfHwgeFsgU3ltYm9sLml0ZXJhdG9yIF0/XG5cbiMgVE9ETzogUmVseSBvbiBlcnJvcnMgZnJvbSBtYWNoaW5lIGV4cGFuc2lvbiBmb3Igbm93LCBidXQgdGhpcyBpcyBzdGFydGluZyB0b1xuIyBsb29rIGxpa2UgYW4gZXh0ZXJuYWxseSB1c2VmdWwgdHlwZS5cbmlzTWFjaGluZSA9ICggeCApIC0+ICggVHlwZS5pc09iamVjdCB4ICkgfHwgKCBUeXBlLmlzQXJyYXkgeCApXG5cbiMgVGhlIGFzeW5jIG1vZHVsZSBoYW5kbGVzIGJvdGggc3luYyBhbmQgYXN5bmMgY2FzZXMsIHNvIHdlIG5lZWQgdG8gYmUgcGVkYW50aWNcbiMgaW4gb3VyIHR5cGUgcmVzb2x1dGlvbiBzbyB3ZSBtYXRjaCBvbiBib3RoIGZvciBuZXN0ZWQgbWFjaGluZXMuXG5nZW5lcmF0b3JGdW5jdGlvbiA9ICgtPiB5aWVsZCBudWxsKS5jb25zdHJ1Y3RvclxuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IFR5cGUuaXNLaW5kIGdlbmVyYXRvckZ1bmN0aW9uXG5hc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gKC0+IHlpZWxkIGF3YWl0IG51bGwpLmNvbnN0cnVjdG9yXG5pc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24gPSBUeXBlLmlzS2luZCBhc3luY0dlbmVyYXRvckZ1bmN0aW9uXG5pc0dlbmVyYXRvckZ1bmN0aW9uS2luZCA9ICggeCApIC0+IFxuICAoaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uIHgpIHx8IChpc0dlbmVyYXRvckZ1bmN0aW9uIHgpXG5cbmV4cG9ydCB7XG4gIGlzSXRlcmF0b3JLaW5kXG4gIGlzTWFjaGluZVxuICBpc0dlbmVyYXRvckZ1bmN0aW9uXG4gIGlzQXN5bmNHZW5lcmF0b3JGdW5jdGlvblxuICBpc0dlbmVyYXRvckZ1bmN0aW9uS2luZFxufSJdfQ==
 //# sourceURL=src/types.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy90eXBlcy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcblxuIyBBc3luYyBzdGF0ZSBtYWNoaW5lcyBjYW4gY29uc3VtZSBzeW5jIGV2ZW50IGl0ZXJhdG9ycywgc28gbG9uZyBhcyB3ZSBsZXQgYXN5bmNcbiMgYmVoYXZpb3IgdGFrZSBvdmVyIGRvd25zdHJlYW0uXG5pc0l0ZXJhdG9yS2luZCA9ICggeCApIC0+IHhbIFN5bWJvbC5hc3luY0l0ZXJhdG9yIF0/IHx8IHhbIFN5bWJvbC5pdGVyYXRvciBdP1xuXG4jIFRPRE86IFJlbHkgb24gZXJyb3JzIGZyb20gbWFjaGluZSBleHBhbnNpb24gZm9yIG5vdywgYnV0IHRoaXMgaXMgc3RhcnRpbmcgdG9cbiMgbG9vayBsaWtlIGFuIGV4dGVybmFsbHkgdXNlZnVsIHR5cGUuXG5pc01hY2hpbmUgPSAoIHggKSAtPiAoIFR5cGUuaXNPYmplY3QgeCApIHx8ICggVHlwZS5pc0FycmF5IHggKVxuXG4jIFRoZSBhc3luYyBtb2R1bGUgaGFuZGxlcyBib3RoIHN5bmMgYW5kIGFzeW5jIGNhc2VzLCBzbyB3ZSBuZWVkIHRvIGJlIHBlZGFudGljXG4jIGluIG91ciB0eXBlIHJlc29sdXRpb24gc28gd2UgbWF0Y2ggb24gYm90aCBmb3IgbmVzdGVkIG1hY2hpbmVzLlxuZ2VuZXJhdG9yRnVuY3Rpb24gPSAoLT4geWllbGQgbnVsbCkuY29uc3RydWN0b3JcbmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBUeXBlLmlzS2luZCBnZW5lcmF0b3JGdW5jdGlvblxuYXN5bmNHZW5lcmF0b3JGdW5jdGlvbiA9ICgtPiB5aWVsZCBhd2FpdCBudWxsKS5jb25zdHJ1Y3RvclxuaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gVHlwZS5pc0tpbmQgYXN5bmNHZW5lcmF0b3JGdW5jdGlvblxuaXNHZW5lcmF0b3JGdW5jdGlvbktpbmQgPSAoIHggKSAtPiBcbiAgKGlzQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiB4KSB8fCAoaXNHZW5lcmF0b3JGdW5jdGlvbiB4KVxuXG5leHBvcnQge1xuICBpc0l0ZXJhdG9yS2luZFxuICBpc01hY2hpbmVcbiAgaXNHZW5lcmF0b3JGdW5jdGlvblxuICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb25cbiAgaXNHZW5lcmF0b3JGdW5jdGlvbktpbmRcbn0iXSwibmFtZXMiOlsiYXN5bmNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbmVyYXRvckZ1bmN0aW9uIiwiaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb25LaW5kIiwiaXNJdGVyYXRvcktpbmQiLCJpc01hY2hpbmUiLCJUeXBlIiwieCIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJpdGVyYXRvciIsImlzT2JqZWN0IiwiaXNBcnJheSIsImNvbnN0cnVjdG9yIiwiaXNLaW5kIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSx3QkFBQUMsbUJBQUFDLDBCQUFBQyxxQkFBQUMseUJBQUFDLGdCQUFBQztBQUFBLFlBQU9DLFVBQVAscUJBQUE7OztBQUlBRixpQkFBaUIsU0FBRUcsQ0FBRjtXQUFTLEFBQUFBLENBQUEsQ0FBQUMsT0FBQUMsYUFBQSxDQUFBLElBQUEsUUFBOEJGLENBQUEsQ0FBQUMsT0FBQUUsUUFBQSxDQUFBLElBQUE7QUFBdkM7OztBQUlqQkwsWUFBWSxTQUFFRSxDQUFGO1dBQVMsQUFBRUQsS0FBS0ssUUFBTCxDQUFjSixNQUFTRCxLQUFLTSxPQUFMLENBQWFMO0FBQS9DOzs7QUFJWlAsb0JBQW9CLEFBQUMsQ0FBQTtXQUFHLE1BQU07QUFBVCxDQUFBLEVBQWVhLFdBQUE7QUFDcENYLHNCQUFzQkksS0FBS1EsTUFBTCxDQUFZZDtBQUNsQ0QseUJBQXlCLEFBQUMsQ0FBQTtXQUFHLE1BQU0sTUFBTTtBQUFmLENBQUEsRUFBcUJjLFdBQUE7QUFDL0NaLDJCQUEyQkssS0FBS1EsTUFBTCxDQUFZZjtBQUN2Q0ksMEJBQTBCLFNBQUVJLENBQUY7V0FDeEIsQUFBQ04seUJBQXlCTSxNQUFPTCxvQkFBb0JLO0FBRDdCO0FBRzFCLFNBQ0VILGNBREYsRUFFRUMsU0FGRixFQUdFSCxtQkFIRixFQUlFRCx3QkFKRixFQUtFRSx1QkFMRiJ9