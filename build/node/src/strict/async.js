"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    step: function() {
        return step;
    },
    debug: function() {
        return debug;
    },
    matchVertex: function() {
        return matchVertex;
    },
    matchEdge: function() {
        return matchEdge;
    },
    run: function() {
        return run;
    },
    move: function() {
        return move;
    }
});
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _predicate = require("@dashkite/joy/predicate");
const _generic = require("@dashkite/joy/generic");
const _containers = require("../containers");
const _errors = /*#__PURE__*/ _interop_require_wildcard(require("../containers/errors"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var _debug, _step, debug, matchEdge, matchVertex, move, run, step;
matchVertex = function(graph, talos) {
    var vertex;
    vertex = graph.get(talos);
    if (vertex == null) {
        talos.throw(_errors.InvalidState.make("talos state is not in graph"));
    }
    return vertex;
};
matchEdge = async function(vertex, talos, transforms) {
    var edge, i, len, ref;
    ref = vertex.edges;
    for(i = 0, len = ref.length; i < len; i++){
        edge = ref[i];
        if (await edge.accept(talos, ...transforms) === true) {
            return edge;
        }
    }
    return talos.throw(_errors.MissingTransition.make("no edge matches transforms"));
};
run = async function(edge, talos, transforms) {
    var error;
    if (edge.run != null) {
        try {
            return await edge.run(talos, ...transforms);
        } catch (error1) {
            error = error1;
            return talos.throw(_errors.FailedRun.make(error, "encountered an error while running edge function"));
        }
    }
};
move = async function(edge, talos, transforms) {
    var error;
    try {
        return await edge.move(talos, ...transforms);
    } catch (error1) {
        error = error1;
        return talos.throw(_errors.FailedMove.make(error, "encountered an error while moving states"));
    }
};
step = (0, _generic.generic)({
    name: "step talos",
    default: function(...args) {
        throw new Error(`step: input is malformed ${JSON.stringify(args)}`);
    }
});
(0, _generic.generic)(step, _containers.Graph.isType, _containers.Talos.isType, _type.isAny, function(graph, talos, ...transforms) {
    return _step(graph, talos, transforms);
});
(0, _generic.generic)(step, _containers.Graph.isType, _containers.Talos.isType, function(graph, talos) {
    return _step(graph, talos, []);
});
(0, _generic.generic)(step, _containers.Graph.isType, (0, _predicate.negate)(_containers.Talos.isType), function(graph, ...transforms) {
    return _step(graph, _containers.Talos.make(), transforms);
});
_step = async function(graph, talos, transforms) {
    var edge, vertex;
    vertex = matchVertex(graph, talos);
    if (talos.halted) {
        return talos;
    }
    edge = await matchEdge(vertex, talos, transforms);
    if (talos.halted) {
        return talos;
    }
    await run(edge, talos, transforms);
    if (talos.halted) {
        return talos;
    }
    await move(edge, talos, transforms);
    return talos;
};
debug = (0, _generic.generic)({
    name: "debug step talos",
    default: function(...args) {
        throw new Error(`debug step: input is malformed ${JSON.stringify(args)}`);
    }
});
(0, _generic.generic)(debug, _containers.Graph.isType, _containers.Talos.isType, _type.isAny, function(graph, talos, ...transforms) {
    return _debug(graph, talos, transforms);
});
(0, _generic.generic)(debug, _containers.Graph.isType, _containers.Talos.isType, function(graph, talos) {
    return _debug(graph, talos, []);
});
(0, _generic.generic)(debug, _containers.Graph.isType, (0, _predicate.negate)(_containers.Talos.isType), function(graph, ...transforms) {
    return _debug(graph, _containers.Talos.make(), transforms);
});
_debug = async function(graph, talos, transforms) {
    var edge, vertex;
    console.log("starting step", {
        graph,
        talos,
        transforms
    });
    vertex = matchVertex(graph, talos);
    if (talos.halted) {
        console.error("encountered error matching vertex", talos.error.error, talos);
        return talos;
    } else {
        console.log("vertex matched", {
            vertex,
            talos
        });
    }
    edge = await matchEdge(vertex, talos, transforms);
    if (talos.halted) {
        console.error("encountered error matching edge", talos.error.error, talos);
        return talos;
    } else {
        console.log("edge matched", {
            edge,
            talos
        });
    }
    await run(edge, talos, transforms);
    if (talos.halted) {
        console.error("encountered error running edge function", talos.error.error, talos);
        return talos;
    } else {
        console.log("edge function complete", {
            talos
        });
    }
    await move(edge, talos, transforms);
    if (talos.halted) {
        console.error("encountered error running move function", talos.error.error, talos);
        return talos;
    } else {
        console.log("talos move complete", {
            talos
        });
    }
    return talos;
};
 //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=/@dashkite/talos/src/strict/async.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3Mvc3JjL3N0cmljdC9hc3luYy5jb2ZmZWUiLCI8YW5vbj4iXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCB7IG5lZ2F0ZSB9IGZyb20gXCJAZGFzaGtpdGUvam95L3ByZWRpY2F0ZVwiXG5pbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgeyBHcmFwaCwgVGFsb3MgfSBmcm9tIFwiLi4vY29udGFpbmVyc1wiXG5pbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSBcIi4uL2NvbnRhaW5lcnMvZXJyb3JzXCJcblxuXG5tYXRjaFZlcnRleCA9ICggZ3JhcGgsIHRhbG9zICkgLT5cbiAgdmVydGV4ID0gZ3JhcGguZ2V0IHRhbG9zXG4gIGlmICF2ZXJ0ZXg/XG4gICAgdGFsb3MudGhyb3cgRXJyb3JzLkludmFsaWRTdGF0ZS5tYWtlIFwidGFsb3Mgc3RhdGUgaXMgbm90XG4gICAgICBpbiBncmFwaFwiXG4gIHZlcnRleFxuXG5tYXRjaEVkZ2UgPSAoIHZlcnRleCwgdGFsb3MsIHRyYW5zZm9ybXMgKSAtPlxuICBmb3IgZWRnZSBpbiB2ZXJ0ZXguZWRnZXNcbiAgICBpZiAoIGF3YWl0IGVkZ2UuYWNjZXB0IHRhbG9zLCB0cmFuc2Zvcm1zLi4uICkgPT0gdHJ1ZVxuICAgICAgcmV0dXJuIGVkZ2VcbiAgdGFsb3MudGhyb3cgRXJyb3JzLk1pc3NpbmdUcmFuc2l0aW9uLm1ha2UgXCJubyBlZGdlIG1hdGNoZXMgdHJhbnNmb3Jtc1wiXG5cbnJ1biA9ICggZWRnZSwgdGFsb3MsIHRyYW5zZm9ybXMgKSAtPlxuICBpZiBlZGdlLnJ1bj9cbiAgICB0cnlcbiAgICAgIGF3YWl0IGVkZ2UucnVuIHRhbG9zLCB0cmFuc2Zvcm1zLi4uXG4gICAgY2F0Y2ggZXJyb3JcbiAgICAgIHRhbG9zLnRocm93IEVycm9ycy5GYWlsZWRSdW4ubWFrZSBlcnJvciwgXG4gICAgICAgIFwiZW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgcnVubmluZyBlZGdlIGZ1bmN0aW9uXCJcblxubW92ZSA9ICggZWRnZSwgdGFsb3MsIHRyYW5zZm9ybXMgKSAtPlxuICB0cnlcbiAgICBhd2FpdCBlZGdlLm1vdmUgdGFsb3MsIHRyYW5zZm9ybXMuLi5cbiAgY2F0Y2ggZXJyb3JcbiAgICB0YWxvcy50aHJvdyBFcnJvcnMuRmFpbGVkTW92ZS5tYWtlIGVycm9yLCBcbiAgICAgIFwiZW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgbW92aW5nIHN0YXRlc1wiXG5cblxuc3RlcCA9IGdlbmVyaWMgXG4gIG5hbWU6IFwic3RlcCB0YWxvc1wiXG4gIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgIHRocm93IG5ldyBFcnJvciBcInN0ZXA6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuZ2VuZXJpYyBzdGVwLCBHcmFwaC5pc1R5cGUsIFRhbG9zLmlzVHlwZSwgVHlwZS5pc0FueSwgKCBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybXMuLi4gKSAtPlxuICBfc3RlcCBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybXNcblxuZ2VuZXJpYyBzdGVwLCBHcmFwaC5pc1R5cGUsIFRhbG9zLmlzVHlwZSwgKCBncmFwaCwgdGFsb3MgKSAtPlxuICBfc3RlcCBncmFwaCwgdGFsb3MsIFtdXG5cbmdlbmVyaWMgc3RlcCwgR3JhcGguaXNUeXBlLCAoIG5lZ2F0ZSBUYWxvcy5pc1R5cGUgKSwgKCBncmFwaCwgdHJhbnNmb3Jtcy4uLiApIC0+XG4gIF9zdGVwIGdyYXBoLCBUYWxvcy5tYWtlKCksIHRyYW5zZm9ybXNcblxuXG5fc3RlcCA9ICggZ3JhcGgsIHRhbG9zLCB0cmFuc2Zvcm1zICkgLT5cbiAgdmVydGV4ID0gbWF0Y2hWZXJ0ZXggZ3JhcGgsIHRhbG9zXG4gIHJldHVybiB0YWxvcyBpZiB0YWxvcy5oYWx0ZWRcblxuICBlZGdlID0gYXdhaXQgbWF0Y2hFZGdlIHZlcnRleCwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgcmV0dXJuIHRhbG9zIGlmIHRhbG9zLmhhbHRlZFxuXG4gIGF3YWl0IHJ1biBlZGdlLCB0YWxvcywgdHJhbnNmb3Jtc1xuICByZXR1cm4gdGFsb3MgaWYgdGFsb3MuaGFsdGVkXG5cbiAgYXdhaXQgbW92ZSBlZGdlLCB0YWxvcywgdHJhbnNmb3Jtc1xuICB0YWxvc1xuXG5cblxuZGVidWcgPSBnZW5lcmljIFxuICBuYW1lOiBcImRlYnVnIHN0ZXAgdGFsb3NcIlxuICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJkZWJ1ZyBzdGVwOiBpbnB1dCBpcyBtYWxmb3JtZWQgI3tKU09OLnN0cmluZ2lmeSBhcmdzfVwiXG5cbmdlbmVyaWMgZGVidWcsIEdyYXBoLmlzVHlwZSwgVGFsb3MuaXNUeXBlLCBUeXBlLmlzQW55LCAoIGdyYXBoLCB0YWxvcywgdHJhbnNmb3Jtcy4uLiApIC0+XG4gIF9kZWJ1ZyBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybXNcblxuZ2VuZXJpYyBkZWJ1ZywgR3JhcGguaXNUeXBlLCBUYWxvcy5pc1R5cGUsICggZ3JhcGgsIHRhbG9zICkgLT5cbiAgX2RlYnVnIGdyYXBoLCB0YWxvcywgW11cblxuZ2VuZXJpYyBkZWJ1ZywgR3JhcGguaXNUeXBlLCAoIG5lZ2F0ZSBUYWxvcy5pc1R5cGUgKSwgKCBncmFwaCwgdHJhbnNmb3Jtcy4uLiApIC0+XG4gIF9kZWJ1ZyBncmFwaCwgVGFsb3MubWFrZSgpLCB0cmFuc2Zvcm1zXG5cblxuX2RlYnVnID0gKCBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybXMgKSAtPlxuICBjb25zb2xlLmxvZyBcInN0YXJ0aW5nIHN0ZXBcIiwgeyBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybXMgfVxuXG4gIHZlcnRleCA9IG1hdGNoVmVydGV4IGdyYXBoLCB0YWxvc1xuICBpZiB0YWxvcy5oYWx0ZWRcbiAgICBjb25zb2xlLmVycm9yIFwiZW5jb3VudGVyZWQgZXJyb3IgbWF0Y2hpbmcgdmVydGV4XCIsIHRhbG9zLmVycm9yLmVycm9yLCB0YWxvc1xuICAgIHJldHVybiB0YWxvc1xuICBlbHNlXG4gICAgY29uc29sZS5sb2cgXCJ2ZXJ0ZXggbWF0Y2hlZFwiLCB7IHZlcnRleCwgdGFsb3MgfVxuICBcbiAgZWRnZSA9IGF3YWl0IG1hdGNoRWRnZSB2ZXJ0ZXgsIHRhbG9zLCB0cmFuc2Zvcm1zXG4gIGlmIHRhbG9zLmhhbHRlZFxuICAgIGNvbnNvbGUuZXJyb3IgXCJlbmNvdW50ZXJlZCBlcnJvciBtYXRjaGluZyBlZGdlXCIsIHRhbG9zLmVycm9yLmVycm9yLCB0YWxvc1xuICAgIHJldHVybiB0YWxvc1xuICBlbHNlXG4gICAgY29uc29sZS5sb2cgXCJlZGdlIG1hdGNoZWRcIiwgeyBlZGdlLCB0YWxvcyB9XG5cbiAgYXdhaXQgcnVuIGVkZ2UsIHRhbG9zLCB0cmFuc2Zvcm1zXG4gIGlmIHRhbG9zLmhhbHRlZFxuICAgIGNvbnNvbGUuZXJyb3IgXCJlbmNvdW50ZXJlZCBlcnJvciBydW5uaW5nIGVkZ2UgZnVuY3Rpb25cIiwgdGFsb3MuZXJyb3IuZXJyb3IsIHRhbG9zXG4gICAgcmV0dXJuIHRhbG9zXG4gIGVsc2VcbiAgICBjb25zb2xlLmxvZyBcImVkZ2UgZnVuY3Rpb24gY29tcGxldGVcIiwgeyB0YWxvcyB9XG5cbiAgYXdhaXQgbW92ZSBlZGdlLCB0YWxvcywgdHJhbnNmb3Jtc1xuICBpZiB0YWxvcy5oYWx0ZWRcbiAgICBjb25zb2xlLmVycm9yIFwiZW5jb3VudGVyZWQgZXJyb3IgcnVubmluZyBtb3ZlIGZ1bmN0aW9uXCIsIHRhbG9zLmVycm9yLmVycm9yLCB0YWxvc1xuICAgIHJldHVybiB0YWxvc1xuICBlbHNlXG4gICAgY29uc29sZS5sb2cgXCJ0YWxvcyBtb3ZlIGNvbXBsZXRlXCIsIHsgdGFsb3MgfVxuXG4gIHRhbG9zXG5cblxuXG5leHBvcnQge1xuICBzdGVwXG4gIGRlYnVnXG5cbiAgbWF0Y2hWZXJ0ZXhcbiAgbWF0Y2hFZGdlIFxuICBydW5cbiAgbW92ZVxufSIsbnVsbF0sIm5hbWVzIjpbInN0ZXAiLCJkZWJ1ZyIsIm1hdGNoVmVydGV4IiwibWF0Y2hFZGdlIiwicnVuIiwibW92ZSIsIl9kZWJ1ZyIsIl9zdGVwIiwiZ3JhcGgiLCJ0YWxvcyIsInZlcnRleCIsImdldCIsInRocm93IiwiRXJyb3JzIiwiSW52YWxpZFN0YXRlIiwibWFrZSIsInRyYW5zZm9ybXMiLCJlZGdlIiwiaSIsImxlbiIsInJlZiIsImVkZ2VzIiwibGVuZ3RoIiwiYWNjZXB0IiwiTWlzc2luZ1RyYW5zaXRpb24iLCJlcnJvciIsImVycm9yMSIsIkZhaWxlZFJ1biIsIkZhaWxlZE1vdmUiLCJnZW5lcmljIiwibmFtZSIsImRlZmF1bHQiLCJhcmdzIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiR3JhcGgiLCJpc1R5cGUiLCJUYWxvcyIsIlR5cGUiLCJpc0FueSIsIm5lZ2F0ZSIsImhhbHRlZCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBcUhFQSxJQURGO2VBQ0VBOztJQUNBQyxLQUZGO2VBRUVBOztJQUVBQyxXQUpGO2VBSUVBOztJQUNBQyxTQUxGO2VBS0VBOztJQUNBQyxHQU5GO2VBTUVBOztJQUNBQyxJQVBGO2VBT0VBOzs7OERBM0hGOzJCQUNBO3lCQUNBOzRCQUNBO2dFQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSkEsSUFBQUMsUUFBQUMsT0FBQU4sT0FBQUUsV0FBQUQsYUFBQUcsTUFBQUQsS0FBQUo7QUFPQUUsY0FBYyxTQUFFTSxLQUFGLEVBQVNDLEtBQVQ7SUFDZCxJQUFBQztJQUFFQSxTQUFTRixNQUFNRyxHQUFOLENBQVVGO0lBQ25CLElBQUlDLFVBQUEsTUFBSjtRQUNFRCxNQUFNRyxLQUFOLENBQVlDLFFBQU9DLFlBQVksQ0FBQ0MsSUFBcEIsQ0FBeUI7O1dBRXZDTDtBQUxZO0FBT2RQLFlBQVksZUFBRU8sTUFBRixFQUFVRCxLQUFWLEVBQWlCTyxVQUFqQjtJQUNaLElB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