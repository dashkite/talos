var test;
import * as Type from "@dashkite/joy/type";
import * as Value from "@dashkite/joy/value";
import * as Time from "@dashkite/joy/time";
import { Graph, expand, flow } from "../../src";
import * as h from "../helpers";
test = function() {
    return h.target("linear-flow", async function() {
        var double, f, g, result, sum, triple;
        sum = async function(c, x, y, z) {
            await Time.sleep(1);
            return c.result = x + y + z;
        };
        double = async function(c) {
            await Time.sleep(1);
            return c.result *= 2;
        };
        triple = async function(c) {
            await Time.sleep(1);
            return c.result *= 3;
        };
        f = flow([
            sum,
            double,
            triple
        ]);
        h.assert(Type.isFunction(f), "flow did not build a function");
        h.assert(f.length === 4, "flow did not maintain starting arity");
        result = await f(1, 2, 3);
        if (!Value.equal({
            result: 36
        }, result)) {
            console.error(result);
            throw new Error("composition failed to produce expected output");
        }
        g = flow({
            debug: true
        }, [
            sum,
            double,
            triple
        ]);
        return h.assert(Type.isFunction(g), "flow debug did not build a function");
    });
};
export { // await g 1, 2, 3
test as flow }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9saW5lYXIvZmxvdy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7QUFBQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxTQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFBO0VBQVMsS0FBVDtFQUFnQixNQUFoQjtFQUF3QixJQUF4QjtDQUFBLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFFQSxJQUFBLEdBQU8sUUFBQSxDQUFBLENBQUE7U0FBRyxDQUFDLENBQUMsTUFBRixDQUFTLGFBQVQsRUFBd0IsTUFBQSxRQUFBLENBQUEsQ0FBQTtBQUNsQyxRQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUE7SUFBRSxHQUFBLEdBQU0sTUFBQSxRQUFBLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLEVBQVcsQ0FBWCxDQUFBO01BQ0osTUFBTSxJQUFJLENBQUMsS0FBTCxDQUFXLENBQVg7YUFDTixDQUFDLENBQUMsTUFBRixHQUFXLENBQUEsR0FBSSxDQUFKLEdBQVE7SUFGZjtJQUdOLE1BQUEsR0FBUyxNQUFBLFFBQUEsQ0FBRSxDQUFGLENBQUE7TUFDUCxNQUFNLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBWDthQUNOLENBQUMsQ0FBQyxNQUFGLElBQVk7SUFGTDtJQUdULE1BQUEsR0FBUyxNQUFBLFFBQUEsQ0FBRSxDQUFGLENBQUE7TUFDUCxNQUFNLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBWDthQUNOLENBQUMsQ0FBQyxNQUFGLElBQVk7SUFGTDtJQUlULENBQUEsR0FBSSxJQUFBLENBQUssQ0FDUCxHQURPLEVBRVAsTUFGTyxFQUdQLE1BSE8sQ0FBTDtJQU1KLENBQUMsQ0FBQyxNQUFGLENBQVcsSUFBSSxDQUFDLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBWCxFQUFnQywrQkFBaEM7SUFDQSxDQUFDLENBQUMsTUFBRixDQUFXLENBQUMsQ0FBQyxNQUFGLEtBQVksQ0FBdkIsRUFBNEIsc0NBQTVCO0lBRUEsTUFBQSxHQUFTLENBQUEsTUFBTSxDQUFBLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBQU47SUFDVCxJQUFHLENBQUUsS0FBSyxDQUFDLEtBQU4sQ0FBWTtNQUFFLE1BQUEsRUFBUTtJQUFWLENBQVosRUFBNEIsTUFBNUIsQ0FBTDtNQUNFLE9BQU8sQ0FBQyxLQUFSLENBQWMsTUFBZDtNQUNBLE1BQU0sSUFBSSxLQUFKLENBQVUsK0NBQVYsRUFGUjs7SUFLQSxDQUFBLEdBQUksSUFBQSxDQUFLO01BQUEsS0FBQSxFQUFPO0lBQVAsQ0FBTCxFQUFrQixDQUNwQixHQURvQixFQUVwQixNQUZvQixFQUdwQixNQUhvQixDQUFsQjtXQU1KLENBQUMsQ0FBQyxNQUFGLENBQVcsSUFBSSxDQUFDLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBWCxFQUFnQyxxQ0FBaEM7RUFoQ2dDLENBQXhCO0FBQUg7O0FBb0NQLE9BQUE7O0VBQVMsSUFBQSxRQUFUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIFZhbHVlIGZyb20gXCJAZGFzaGtpdGUvam95L3ZhbHVlXCJcbmltcG9ydCAqIGFzIFRpbWUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdGltZVwiXG5pbXBvcnQgeyBHcmFwaCwgZXhwYW5kLCBmbG93IH0gZnJvbSBcIi4uLy4uL3NyY1wiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxudGVzdCA9IC0+IGgudGFyZ2V0IFwibGluZWFyLWZsb3dcIiwgLT5cbiAgc3VtID0gKCBjLCB4LCB5LCB6ICkgLT4gXG4gICAgYXdhaXQgVGltZS5zbGVlcCAxXG4gICAgYy5yZXN1bHQgPSB4ICsgeSArIHogXG4gIGRvdWJsZSA9ICggYyApIC0+IFxuICAgIGF3YWl0IFRpbWUuc2xlZXAgMVxuICAgIGMucmVzdWx0ICo9IDJcbiAgdHJpcGxlID0gKCBjICkgLT4gXG4gICAgYXdhaXQgVGltZS5zbGVlcCAxXG4gICAgYy5yZXN1bHQgKj0gM1xuXG4gIGYgPSBmbG93IFtcbiAgICBzdW1cbiAgICBkb3VibGVcbiAgICB0cmlwbGVcbiAgXVxuXG4gIGguYXNzZXJ0ICggVHlwZS5pc0Z1bmN0aW9uIGYgKSwgXCJmbG93IGRpZCBub3QgYnVpbGQgYSBmdW5jdGlvblwiXG4gIGguYXNzZXJ0ICggZi5sZW5ndGggPT0gNCApLCBcImZsb3cgZGlkIG5vdCBtYWludGFpbiBzdGFydGluZyBhcml0eVwiXG4gIFxuICByZXN1bHQgPSBhd2FpdCBmIDEsIDIsIDNcbiAgaWYgISBWYWx1ZS5lcXVhbCB7IHJlc3VsdDogMzYgfSwgcmVzdWx0XG4gICAgY29uc29sZS5lcnJvciByZXN1bHRcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJjb21wb3NpdGlvbiBmYWlsZWQgdG8gcHJvZHVjZSBleHBlY3RlZCBvdXRwdXRcIlxuXG5cbiAgZyA9IGZsb3cgZGVidWc6IHRydWUsIFtcbiAgICBzdW1cbiAgICBkb3VibGVcbiAgICB0cmlwbGVcbiAgXVxuXG4gIGguYXNzZXJ0ICggVHlwZS5pc0Z1bmN0aW9uIGcgKSwgXCJmbG93IGRlYnVnIGRpZCBub3QgYnVpbGQgYSBmdW5jdGlvblwiXG4gICMgYXdhaXQgZyAxLCAyLCAzXG5cblxuZXhwb3J0IHsgdGVzdCBhcyBmbG93IH0iXX0=
 //# sourceURL=test/linear/flow.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbGluZWFyL2Zsb3cuY29mZmVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBWYWx1ZSBmcm9tIFwiQGRhc2hraXRlL2pveS92YWx1ZVwiXG5pbXBvcnQgKiBhcyBUaW1lIGZyb20gXCJAZGFzaGtpdGUvam95L3RpbWVcIlxuaW1wb3J0IHsgR3JhcGgsIGV4cGFuZCwgZmxvdyB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbnRlc3QgPSAtPiBoLnRhcmdldCBcImxpbmVhci1mbG93XCIsIC0+XG4gIHN1bSA9ICggYywgeCwgeSwgeiApIC0+IFxuICAgIGF3YWl0IFRpbWUuc2xlZXAgMVxuICAgIGMucmVzdWx0ID0geCArIHkgKyB6IFxuICBkb3VibGUgPSAoIGMgKSAtPiBcbiAgICBhd2FpdCBUaW1lLnNsZWVwIDFcbiAgICBjLnJlc3VsdCAqPSAyXG4gIHRyaXBsZSA9ICggYyApIC0+IFxuICAgIGF3YWl0IFRpbWUuc2xlZXAgMVxuICAgIGMucmVzdWx0ICo9IDNcblxuICBmID0gZmxvdyBbXG4gICAgc3VtXG4gICAgZG91YmxlXG4gICAgdHJpcGxlXG4gIF1cblxuICBoLmFzc2VydCAoIFR5cGUuaXNGdW5jdGlvbiBmICksIFwiZmxvdyBkaWQgbm90IGJ1aWxkIGEgZnVuY3Rpb25cIlxuICBoLmFzc2VydCAoIGYubGVuZ3RoID09IDQgKSwgXCJmbG93IGRpZCBub3QgbWFpbnRhaW4gc3RhcnRpbmcgYXJpdHlcIlxuICBcbiAgcmVzdWx0ID0gYXdhaXQgZiAxLCAyLCAzXG4gIGlmICEgVmFsdWUuZXF1YWwgeyByZXN1bHQ6IDM2IH0sIHJlc3VsdFxuICAgIGNvbnNvbGUuZXJyb3IgcmVzdWx0XG4gICAgdGhyb3cgbmV3IEVycm9yIFwiY29tcG9zaXRpb24gZmFpbGVkIHRvIHByb2R1Y2UgZXhwZWN0ZWQgb3V0cHV0XCJcblxuXG4gIGcgPSBmbG93IGRlYnVnOiB0cnVlLCBbXG4gICAgc3VtXG4gICAgZG91YmxlXG4gICAgdHJpcGxlXG4gIF1cblxuICBoLmFzc2VydCAoIFR5cGUuaXNGdW5jdGlvbiBnICksIFwiZmxvdyBkZWJ1ZyBkaWQgbm90IGJ1aWxkIGEgZnVuY3Rpb25cIlxuICAjIGF3YWl0IGcgMSwgMiwgM1xuXG5cbmV4cG9ydCB7IHRlc3QgYXMgZmxvdyB9Il0sIm5hbWVzIjpbInRlc3QiLCJUeXBlIiwiVmFsdWUiLCJUaW1lIiwiR3JhcGgiLCJleHBhbmQiLCJmbG93IiwiaCIsInRhcmdldCIsImRvdWJsZSIsImYiLCJnIiwicmVzdWx0Iiwic3VtIiwidHJpcGxlIiwiYyIsIngiLCJ5IiwieiIsInNsZWVwIiwiYXNzZXJ0IiwiaXNGdW5jdGlvbiIsImxlbmd0aCIsImVxdWFsIiwiY29uc29sZSIsImVycm9yIiwiRXJyb3IiLCJkZWJ1ZyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUE7QUFBQSxZQUFPQyxVQUFQLHFCQUFBO0FBQ0EsWUFBT0MsV0FBUCxzQkFBQTtBQUNBLFlBQU9DLFVBQVAscUJBQUE7QUFDQSxTQUFTQyxLQUFULEVBQWdCQyxNQUFoQixFQUF3QkMsSUFBeEIsUUFBQSxZQUFBO0FBQ0EsWUFBT0MsT0FBUCxhQUFBO0FBRUFQLE9BQU87V0FBR08sRUFBRUMsTUFBRixDQUFTLGVBQWU7UUFDbEMsSUFBQUMsUUFBQUMsR0FBQUMsR0FBQUMsUUFBQUMsS0FBQUM7UUFBRUQsTUFBTSxlQUFFRSxDQUFGLEVBQUtDLENBQUwsRUFBUUMsQ0FBUixFQUFXQyxDQUFYO1lBQ0osTUFBTWYsS0FBS2dCLEtBQUwsQ0FBVzttQkFDakJKLEVBQUVILE1BQUYsR0FBV0ksSUFBSUMsSUFBSUM7UUFGZjtRQUdOVCxTQUFTLGVBQUVNLENBQUY7WUFDUCxNQUFNWixLQUFLZ0IsS0FBTCxDQUFXO21CQUNqQkosRUFBRUgsTUFBRixJQUFZO1FBRkw7UUFHVEUsU0FBUyxlQUFFQyxDQUFGO1lBQ1AsTUFBTVosS0FBS2dCLEtBQUwsQ0FBVzttQkFDakJKLEVBQUVILE1BQUYsSUFBWTtRQUZMO1FBSVRGLElBQUlKLEtBQUs7WUFDUE87WUFDQUo7WUFDQUs7U0FIRTtRQU1KUCxFQUFFYSxNQUFGLENBQVduQixLQUFLb0IsVUFBTCxDQUFnQlgsSUFBSztRQUNoQ0gsRUFBRWEsTUFBRixDQUFXVixFQUFFWSxNQUFGLEtBQVksR0FBSztRQUU1QlYsU0FBUyxNQUFNRixFQUFFLEdBQUcsR0FBRztRQUN2QixJQUFHLENBQUVSLE1BQU1xQixLQUFOLENBQVk7WUFBRVgsUUFBUTtRQUFWLEdBQWdCQSxTQUFqQztZQUNFWSxRQUFRQyxLQUFSLENBQWNiO1lBQ2QsTUFBTSxJQUFJYyxNQUFNOztRQUdsQmYsSUFBSUwsS0FBSztZQUFBcUIsT0FBTztRQUFQLEdBQWE7WUFDcEJkO1lBQ0FKO1lBQ0FLO1NBSEU7ZUFNSlAsRUFBRWEsTUFBRixDQUFXbkIsS0FBS29CLFVBQUwsQ0FBZ0JWLElBQUs7SUFoQ0E7QUFBM0I7QUFvQ1A7QUFBU1gsUUFBQU0sSUFBVCJ9