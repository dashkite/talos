"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stepSync = exports.debugSync = void 0;
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _predicate = require("@dashkite/joy/predicate");
var _generic = require("@dashkite/joy/generic");
var _index = require("../containers/index.js");
var Errors = _interopRequireWildcard(require("../containers/errors.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var _debug, _step, debug, matchEdge, matchVertex, move, run, step;
matchVertex = function (graph, talos) {
  var vertex;
  vertex = graph.get(talos);
  if (vertex == null) {
    talos.throw(Errors.InvalidState.create("talos state is not in graph"));
  }
  return vertex;
};
matchEdge = function (vertex, talos, transform) {
  var edge, i, len, ref;
  ref = vertex.edges;
  for (i = 0, len = ref.length; i < len; i++) {
    edge = ref[i];
    if (edge.accept(talos, transform) === true) {
      return edge;
    }
  }
  return talos.throw(Errors.MissingTransition.create("no edge matches transform"));
};
run = function (edge, talos, transform) {
  var error;
  if (edge.run != null) {
    try {
      return edge.run(talos, transform);
    } catch (error1) {
      error = error1;
      return talos.throw(Errors.FailedRun.create(error, "encountered an error while running edge function"));
    }
  }
};
move = function (edge, talos, transform) {
  var error;
  try {
    return edge.move(talos, transform);
  } catch (error1) {
    error = error1;
    return talos.throw(Errors.FailedMove.create(error, "encountered an error while moving states"));
  }
};
exports.stepSync = step = (0, _generic.generic)({
  name: "step talos",
  default: function (...args) {
    throw new Error(`step: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(step, _index.Graph.isType, _index.Talos.isType, Type.isAny, function (graph, talos, transform) {
  return _step(graph, talos, transform);
});
(0, _generic.generic)(step, _index.Graph.isType, (0, _predicate.negate)(_index.Talos.isType), function (graph, transform) {
  return step(graph, _index.Talos.create(), transform);
});
_step = function (graph, talos, transform) {
  var edge, vertex;
  vertex = matchVertex(graph, talos);
  if (talos.halted) {
    return talos;
  }
  edge = matchEdge(vertex, talos, transform);
  if (talos.halted) {
    return talos;
  }
  run(edge, talos, transform);
  if (talos.halted) {
    return talos;
  }
  move(edge, talos, transform);
  return talos;
};
exports.debugSync = debug = (0, _generic.generic)({
  name: "debug step talos",
  default: function (...args) {
    throw new Error(`debug step: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(debug, _index.Graph.isType, _index.Talos.isType, Type.isAny, function (graph, talos, transform) {
  return _debug(graph, talos, transform);
});
(0, _generic.generic)(debug, _index.Graph.isType, (0, _predicate.negate)(_index.Talos.isType), function (graph, transform) {
  return _debug(graph, _index.Talos.create(), transform);
});
_debug = function (graph, talos, transform) {
  var edge, vertex;
  console.log("starting step", {
    graph,
    talos,
    transform
  });
  vertex = matchVertex(graph, talos);
  if (talos.halted) {
    console.error("encountered error matching vertex", talos.error.error, talos);
    return talos;
  } else {
    console.log("vertex matched", {
      vertex,
      talos
    });
  }
  edge = matchEdge(vertex, talos, transform);
  if (talos.halted) {
    console.error("encountered error matching edge", talos.error.error, talos);
    return talos;
  } else {
    console.log("edge matched", {
      edge,
      talos
    });
  }
  run(edge, talos, transform);
  if (talos.halted) {
    console.error("encountered error running edge function", talos.error.error, talos);
    return talos;
  } else {
    console.log("edge function complete", {
      talos
    });
  }
  move(edge, talos, transform);
  if (talos.halted) {
    console.error("encountered error running move function", talos.error.error, talos);
    return talos;
  } else {
    console.log("talos move complete", {
      talos
    });
  }
  return talos;
};
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=src/functions/step-sync.coffee