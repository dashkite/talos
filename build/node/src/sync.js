"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Step: function() {
        return Step;
    },
    start: function() {
        return start;
    },
    run: function() {
        return run;
    },
    pipe: function() {
        return pipe;
    }
});
const _generic = require("@dashkite/joy/generic");
const _function = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/function"));
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _kaiko = /*#__PURE__*/ _interop_require_default(require("@dashkite/kaiko"));
const _machine = _export_star(require("./machine"), exports);
const _talos = _export_star(require("./talos"), exports);
const _types = _export_star(require("./types"), exports);
_export_star(require("./states"), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var Step, pipe, run, start;
Step = {
    matchVertex: function(talos) {
        var vertex;
        vertex = talos.machine.graph[talos.state];
        if (vertex == null) {
            talos.catch(new Error("talos state is not in machine graph"));
        }
        return vertex;
    },
    matchEdge: function(vertex, talos, event) {
        var edge, error, i, len, ref;
        ref = vertex.edges;
        for(i = 0, len = ref.length; i < len; i++){
            edge = ref[i];
            try {
                if (edge.when(talos, event) === true) {
                    return edge;
                }
            } catch (error1) {
                error = error1;
                return talos.catch(error);
            }
        }
        return talos.catch(new Error("no matching when condition"));
    },
    run: function(edge, talos, event) {
        var error;
        if (edge.run != null) {
            try {
                return edge.run(talos, event);
            } catch (error1) {
                error = error1;
                return talos.catch(error);
            }
        }
    },
    move: function(edge, talos, event) {
        var error;
        try {
            return edge.move(talos, event);
        } catch (error1) {
            error = error1;
            return talos.catch(error);
        }
    },
    tick: function*(talos, event) {
        var edge, vertex;
        vertex = Step.matchVertex(talos);
        yield talos;
        edge = Step.matchEdge(vertex, talos, event);
        yield talos;
        Step.run(edge, talos, event);
        yield talos;
        Step.move(edge, talos, event);
        return yield talos;
    }
};
start = (0, _generic.generic)({
    name: "talos: sync start"
});
(0, _generic.generic)(start, _types.isMachine, function(machine) {
    var talos;
    talos = _talos.Talos.make(machine);
    return start(talos);
});
// Create generator where state machine consumes its own context repeatedly.
(0, _generic.generic)(start, _talos.Talos.isType, function*(talos) {
    var ref;
    while(true){
        ref = Step.tick(talos, talos.context);
        for (talos of ref){
            if (talos.ended) {
                yield talos;
                return;
            }
        }
        yield talos; // prevents accumulation
    }
});
(0, _generic.generic)(start, _types.isMachine, _type.isIterable, function(machine, events) {
    var talos;
    talos = _talos.Talos.make(machine);
    return start(talos, events);
});
// Create generator where state machine consumes values from iterator.
(0, _generic.generic)(start, _talos.Talos.isType, _type.isIterable, function*(talos, events) {
    var event, ref;
    for (event of events){
        ref = Step.tick(talos, event);
        for (talos of ref){
            if (talos.ended) {
                yield talos;
                return;
            }
        }
        yield talos; // prevents accumulation
    }
});
(0, _generic.generic)(start, _types.isMachine, _type.isObject, function(machine, context) {
    var talos;
    talos = _talos.Talos.make(machine);
    talos.context = context;
    return start(talos);
});
(0, _generic.generic)(start, _talos.Talos.isType, _type.isObject, function(talos, context) {
    talos.context = context;
    return start(talos);
});
(0, _generic.generic)(start, _types.isMachine, _type.isObject, _type.isIterable, function(machine, context, events) {
    var talos;
    talos = _talos.Talos.make(machine);
    talos.context = context;
    return start(talos, events);
});
(0, _generic.generic)(start, _talos.Talos.isType, _type.isObject, _type.isIterable, function(talos, context, events) {
    talos.context = context;
    return start(talos, events);
});
// Convenience function to keep going and only return the final talos.
run = (0, _generic.generic)({
    name: "talos: sync run"
});
// Further convenience to support automatically using start.
(0, _generic.generic)(run, _type.isAny, function(...args) {
    return run(start(...args));
});
(0, _generic.generic)(run, _type.isIterator, function(iterator) {
    var result, talos;
    for (talos of iterator){
        result = talos;
    }
    return result;
});
pipe = function(fx) {
    return function(...args) {
        var talos;
        talos = run(start(fx, ...args));
        if (talos.error != null) {
            throw talos.error;
        }
        return talos.context;
    };
};
 //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=/@dashkite/talos/src/sync.coffee

//# sourceMappingURL=data:application/json;base64,