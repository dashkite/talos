"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expansion = void 0;
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var Value = _interopRequireWildcard(require("@dashkite/joy/value"));
var _index = require("../../src/index.js");
var h = _interopRequireWildcard(require("../helpers.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var test;
exports.expansion = test = function () {
  return h.target("linear-expansion", function () {
    var double, expected, graph, sum, triple;
    sum = function (x, y, z) {
      return x + y + z;
    };
    double = function (x) {
      return 2 * x;
    };
    triple = function (x) {
      return 3 * x;
    };
    graph = (0, _index.expand)([sum, double, triple, function (x) {
      return 4 * x;
    }]);
    expected = {
      [_index.$start]: {
        name: "sum",
        edges: [{
          accept: true,
          run: sum,
          move: "1"
        }]
      },
      "1": {
        name: "double",
        edges: [{
          accept: true,
          run: double,
          move: "2"
        }]
      },
      "2": {
        name: "triple",
        edges: [{
          accept: true,
          run: triple,
          move: "3"
        }]
      },
      "3": {
        name: "anonymous-3",
        edges: [{
          accept: true,
          run: graph["3"].edges[0].run,
          move: _index.$halt
        }]
      }
    };
    if (!Value.equal(expected, graph)) {
      console.error(graph);
      throw new Error("expanded graph does not match expected shape");
    }
    graph = _index.Graph.make(graph);
    return h.assert(_index.Graph.isType(graph), "failed to make graph instance");
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbGluZWFyL2V4cGFuc2lvbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQSxJQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQUEsSUFBQSxNQUFBLEdBQUEsT0FBQTtBQUFBLElBQUEsQ0FBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUFBLFNBQUEseUJBQUEsQ0FBQSw2QkFBQSxPQUFBLG1CQUFBLENBQUEsT0FBQSxPQUFBLElBQUEsQ0FBQSxPQUFBLE9BQUEsWUFBQSx3QkFBQSxZQUFBLENBQUEsQ0FBQSxXQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUE7QUFBQSxTQUFBLHdCQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsVUFBQSxTQUFBLENBQUEsZUFBQSxDQUFBLHVCQUFBLENBQUEseUJBQUEsQ0FBQSxXQUFBLE9BQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLHdCQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsU0FBQSxVQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLENBQUEsSUFBQSxDQUFBLG9CQUFBLENBQUEsSUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsWUFBQSxDQUFBLENBQUEsT0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUE7QUFEQSxJQUFBLElBQUE7QUFLQSxPQUFBLENBQUEsU0FBQSxHQUFBLElBQUEsR0FBTyxTQUFBLENBQUEsRUFBQTtTQUFHLENBQUMsQ0FBQyxNQUFGLENBQVMsa0JBQVQsRUFBNkIsWUFBQTtJQUN2QyxJQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxNQUFBO0lBQUUsR0FBQSxHQUFNLFNBQUEsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsRUFBQTthQUFlLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBQTtJQUF2QixDQUFBO0lBQ04sTUFBQSxHQUFTLFNBQUEsQ0FBRSxDQUFGLEVBQUE7YUFBUyxDQUFBLEdBQUksQ0FBQTtJQUFiLENBQUE7SUFDVCxNQUFBLEdBQVMsU0FBQSxDQUFFLENBQUYsRUFBQTthQUFTLENBQUEsR0FBSSxDQUFBO0lBQWIsQ0FBQTtJQUVULEtBQUEsR0FBUSxJQUFBLGFBQUEsRUFBTyxDQUNiLEdBRGEsRUFFYixNQUZhLEVBR2IsTUFIYSxFQUliLFVBQUUsQ0FBRixFQUFBO2FBQVMsQ0FBQSxHQUFJLENBQUE7SUFBYixDQUphLENBQVAsQ0FBQTtJQU9SLFFBQUEsR0FDRTtNQUFBLENBQUUsYUFBRixHQUNFO1FBQUEsSUFBQSxFQUFNLEtBQU47UUFDQSxLQUFBLEVBQU8sQ0FDTDtVQUFBLE1BQUEsRUFBUSxJQUFSO1VBQ0EsR0FBQSxFQUFLLEdBREw7VUFFQSxJQUFBLEVBQU07UUFGTixDQURLO01BRFAsQ0FERjtNQU9BLEdBQUEsRUFDRTtRQUFBLElBQUEsRUFBTSxRQUFOO1FBQ0EsS0FBQSxFQUFPLENBQ0w7VUFBQSxNQUFBLEVBQVEsSUFBUjtVQUNBLEdBQUEsRUFBSyxNQURMO1VBRUEsSUFBQSxFQUFNO1FBRk4sQ0FESztNQURQLENBUkY7TUFjQSxHQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQU0sUUFBTjtRQUNBLEtBQUEsRUFBTyxDQUNMO1VBQUEsTUFBQSxFQUFRLElBQVI7VUFDQSxHQUFBLEVBQUssTUFETDtVQUVBLElBQUEsRUFBTTtRQUZOLENBREs7TUFEUCxDQWZGO01BcUJBLEdBQUEsRUFDRTtRQUFBLElBQUEsRUFBTSxhQUFOO1FBQ0EsS0FBQSxFQUFPLENBQ0w7VUFBQSxNQUFBLEVBQVEsSUFBUjtVQUNBLEdBQUEsRUFBSyxLQUFLLENBQUMsR0FBRCxDQUFLLENBQUMsS0FBSyxDQUFDLENBQUQsQ0FBRyxDQUFDLEdBRHpCO1VBRUEsSUFBQSxFQUFNO1FBRk4sQ0FESztNQURQO0lBdEJGLENBQUE7SUE2QkYsSUFBRyxDQUFFLEtBQUssQ0FBQyxLQUFOLENBQVksUUFBWixFQUFzQixLQUF0QixDQUFMLEVBQUE7TUFDRSxPQUFPLENBQUMsS0FBUixDQUFjLEtBQWQsQ0FBQTtNQUNBLE1BQU0sSUFBSSxLQUFKLENBQVUsOENBQVYsQ0FGUjs7SUFJQSxLQUFBLEdBQVEsWUFBSyxDQUFDLElBQU4sQ0FBVyxLQUFYLENBQUE7V0FDUixDQUFDLENBQUMsTUFBRixDQUFXLFlBQUssQ0FBQyxNQUFOLENBQWEsS0FBYixDQUFYLEVBQWlDLCtCQUFqQyxDQUFBO0VBL0NxQyxDQUE3QixDQUFBO0FBQUgsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBWYWx1ZSBmcm9tIFwiQGRhc2hraXRlL2pveS92YWx1ZVwiXG5pbXBvcnQgeyBHcmFwaCwgZXhwYW5kLCAkc3RhcnQsICRoYWx0IH0gZnJvbSBcIi4uLy4uL3NyY1wiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxudGVzdCA9IC0+IGgudGFyZ2V0IFwibGluZWFyLWV4cGFuc2lvblwiLCAtPlxuICBzdW0gPSAoIHgsIHksIHogKSAtPiB4ICsgeSArIHogXG4gIGRvdWJsZSA9ICggeCApIC0+IDIgKiB4XG4gIHRyaXBsZSA9ICggeCApIC0+IDMgKiB4XG5cbiAgZ3JhcGggPSBleHBhbmQgW1xuICAgIHN1bVxuICAgIGRvdWJsZVxuICAgIHRyaXBsZVxuICAgICggeCApIC0+IDQgKiB4XG4gIF1cblxuICBleHBlY3RlZCA9IFxuICAgIFsgJHN0YXJ0IF06XG4gICAgICBuYW1lOiBcInN1bVwiXG4gICAgICBlZGdlczogW1xuICAgICAgICBhY2NlcHQ6IHRydWVcbiAgICAgICAgcnVuOiBzdW1cbiAgICAgICAgbW92ZTogXCIxXCJcbiAgICAgIF1cbiAgICBcIjFcIjpcbiAgICAgIG5hbWU6IFwiZG91YmxlXCJcbiAgICAgIGVkZ2VzOiBbXG4gICAgICAgIGFjY2VwdDogdHJ1ZVxuICAgICAgICBydW46IGRvdWJsZVxuICAgICAgICBtb3ZlOiBcIjJcIlxuICAgICAgXVxuICAgIFwiMlwiOlxuICAgICAgbmFtZTogXCJ0cmlwbGVcIlxuICAgICAgZWRnZXM6IFtcbiAgICAgICAgYWNjZXB0OiB0cnVlXG4gICAgICAgIHJ1bjogdHJpcGxlXG4gICAgICAgIG1vdmU6IFwiM1wiXG4gICAgICBdXG4gICAgXCIzXCI6XG4gICAgICBuYW1lOiBcImFub255bW91cy0zXCJcbiAgICAgIGVkZ2VzOiBbXG4gICAgICAgIGFjY2VwdDogdHJ1ZVxuICAgICAgICBydW46IGdyYXBoW1wiM1wiXS5lZGdlc1swXS5ydW5cbiAgICAgICAgbW92ZTogJGhhbHRcbiAgICAgIF1cblxuICBpZiAhIFZhbHVlLmVxdWFsIGV4cGVjdGVkLCBncmFwaFxuICAgIGNvbnNvbGUuZXJyb3IgZ3JhcGhcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJleHBhbmRlZCBncmFwaCBkb2VzIG5vdCBtYXRjaCBleHBlY3RlZCBzaGFwZVwiXG5cbiAgZ3JhcGggPSBHcmFwaC5tYWtlIGdyYXBoXG4gIGguYXNzZXJ0ICggR3JhcGguaXNUeXBlIGdyYXBoICksIFwiZmFpbGVkIHRvIG1ha2UgZ3JhcGggaW5zdGFuY2VcIlxuXG5cbmV4cG9ydCB7IHRlc3QgYXMgZXhwYW5zaW9uIH0iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=test/linear/expansion.coffee