var test;
import * as Time from "@dashkite/joy/time";
import { Graph, Talos, $start, $halt } from "../../src";
import { step } from "../../src/strict/async";
import * as h from "../helpers";
test = async function() {
    var graph, talos;
    graph = null;
    talos = null;
    return [
        await h.test("define graph", h.target("strict-async", function() {
            return graph = Graph.make({
                [$start]: {
                    edges: [
                        {
                            accept: true,
                            run: null,
                            move: "A"
                        }
                    ]
                },
                A: {
                    edges: [
                        {
                            accept: "go",
                            run: async function(context) {
                                await Time.sleep(1);
                                return context.message = "made it to A, going to B";
                            },
                            move: "B"
                        }
                    ]
                },
                B: {
                    edges: [
                        {
                            accept: false,
                            run: async function(context) {
                                await Time.sleep(1);
                                return context.message = "this overwrite shouldn't happen";
                            },
                            move: $halt
                        },
                        {
                            accept: true,
                            run: async function() {
                                return await Time.sleep(1);
                            },
                            move: $halt
                        }
                    ]
                }
            });
        })),
        await h.test("define talos", h.target("strict-async", function() {
            return talos = Talos.make();
        })),
        await h.test("run talos", h.target("strict-async", async function() {
            h.assert.equal($start, talos.state);
            await step(graph, talos, null);
            h.assert.equal("A", talos.state);
            await step(graph, talos, "go");
            h.assert.equal("B", talos.state);
            h.assert.equal("made it to A, going to B", talos.context.message);
            await step(graph, talos, "go");
            h.assert(talos.success);
            return h.assert.equal("made it to A, going to B", talos.context.message);
        }))
    ];
};
export { test as async }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9zdHJpY3QvYXN5bmMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFBO0VBQVMsS0FBVDtFQUFnQixLQUFoQjtFQUF1QixNQUF2QjtFQUErQixLQUEvQjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLElBQVQ7Q0FBQSxNQUFBOztBQUNBLE9BQU8sQ0FBQSxLQUFQLE1BQUE7O0FBRUEsSUFBQSxHQUFPLE1BQUEsUUFBQSxDQUFBLENBQUE7QUFDUCxNQUFBLEtBQUEsRUFBQTtFQUFFLEtBQUEsR0FBUTtFQUNSLEtBQUEsR0FBUTtTQUVSO0lBQ0UsQ0FBQSxNQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sY0FBUDtJQUF1QixDQUFDLENBQUMsTUFBRixDQUFTLGNBQVQ7SUFBeUIsUUFBQSxDQUFBLENBQUE7YUFDcEQsS0FBQSxHQUFRLEtBQUssQ0FBQyxJQUFOLENBQ047UUFBQSxDQUFFLE1BQUYsQ0FBQSxFQUNFO1VBQUEsS0FBQSxFQUFPO1lBQ0w7Y0FBQSxNQUFBLEVBQVEsSUFBUjtjQUNBLEdBQUEsRUFBSyxJQURMO2NBRUEsSUFBQSxFQUFNO1lBRk4sQ0FESzs7UUFBUCxDQURGO1FBTUEsQ0FBQSxFQUNFO1VBQUEsS0FBQSxFQUFPO1lBQ0w7Y0FBQSxNQUFBLEVBQVEsSUFBUjtjQUNBLEdBQUEsRUFBSyxNQUFBLFFBQUEsQ0FBRSxPQUFGLENBQUE7Z0JBQ0gsTUFBTSxJQUFJLENBQUMsS0FBTCxDQUFXLENBQVg7dUJBQ04sT0FBTyxDQUFDLE9BQVIsR0FBa0I7Y0FGZixDQURMO2NBSUEsSUFBQSxFQUFNO1lBSk4sQ0FESzs7UUFBUCxDQVBGO1FBY0EsQ0FBQSxFQUNFO1VBQUEsS0FBQSxFQUFPO1lBQ0g7Y0FBQSxNQUFBLEVBQVEsS0FBUjtjQUNBLEdBQUEsRUFBSyxNQUFBLFFBQUEsQ0FBRSxPQUFGLENBQUE7Z0JBQ0gsTUFBTSxJQUFJLENBQUMsS0FBTCxDQUFXLENBQVg7dUJBQ04sT0FBTyxDQUFDLE9BQVIsR0FBa0I7Y0FGZixDQURMO2NBSUEsSUFBQSxFQUFNO1lBSk4sQ0FERztZQU9IO2NBQUEsTUFBQSxFQUFRLElBQVI7Y0FDQSxHQUFBLEVBQUssTUFBQSxRQUFBLENBQUEsQ0FBQTt1QkFBRyxDQUFBLE1BQU0sSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLENBQU47Y0FBSCxDQURMO2NBRUEsSUFBQSxFQUFNO1lBRk4sQ0FQRzs7UUFBUDtNQWZGLENBRE07SUFENEMsQ0FBekIsQ0FBdkIsQ0FBTixDQURGO0lBOEJFLENBQUEsTUFBTSxDQUFDLENBQUMsSUFBRixDQUFPLGNBQVA7SUFBdUIsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxjQUFUO0lBQXlCLFFBQUEsQ0FBQSxDQUFBO2FBQ3BELEtBQUEsR0FBUSxLQUFLLENBQUMsSUFBTixDQUFBO0lBRDRDLENBQXpCLENBQXZCLENBQU4sQ0E5QkY7SUFpQ0UsQ0FBQSxNQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sV0FBUDtJQUFvQixDQUFDLENBQUMsTUFBRixDQUFTLGNBQVQ7SUFBeUIsTUFBQSxRQUFBLENBQUEsQ0FBQTtNQUNqRCxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQVQsQ0FBZSxNQUFmO0lBQXVCLEtBQUssQ0FBQyxLQUE3QjtNQUVBLE1BQU0sSUFBQSxDQUFLLEtBQUw7SUFBWSxLQUFaO0lBQW1CLElBQW5CO01BQ04sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsR0FBZjtJQUFvQixLQUFLLENBQUMsS0FBMUI7TUFFQSxNQUFNLElBQUEsQ0FBSyxLQUFMO0lBQVksS0FBWjtJQUFtQixJQUFuQjtNQUNOLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLEdBQWY7SUFBb0IsS0FBSyxDQUFDLEtBQTFCO01BQ0EsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsMEJBQWY7SUFBMkMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUF6RDtNQUVBLE1BQU0sSUFBQSxDQUFLLEtBQUw7SUFBWSxLQUFaO0lBQW1CLElBQW5CO01BQ04sQ0FBQyxDQUFDLE1BQUYsQ0FBUyxLQUFLLENBQUMsT0FBZjthQUNBLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLDBCQUFmO0lBQTJDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBekQ7SUFaaUQsQ0FBekIsQ0FBcEIsQ0FBTixDQWpDRjs7QUFKSzs7QUFvRFAsT0FBQTtFQUFTLElBQUEsU0FBVCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFRpbWUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdGltZVwiXG5pbXBvcnQgeyBHcmFwaCwgVGFsb3MsICRzdGFydCwgJGhhbHQgfSBmcm9tIFwiLi4vLi4vc3JjXCJcbmltcG9ydCB7IHN0ZXAgfSBmcm9tIFwiLi4vLi4vc3JjL3N0cmljdC9hc3luY1wiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxudGVzdCA9IC0+XG4gIGdyYXBoID0gbnVsbFxuICB0YWxvcyA9IG51bGxcblxuICBbXG4gICAgYXdhaXQgaC50ZXN0IFwiZGVmaW5lIGdyYXBoXCIsIGgudGFyZ2V0IFwic3RyaWN0LWFzeW5jXCIsIC0+XG4gICAgICBncmFwaCA9IEdyYXBoLm1ha2VcbiAgICAgICAgWyAkc3RhcnQgXTpcbiAgICAgICAgICBlZGdlczogW1xuICAgICAgICAgICAgYWNjZXB0OiB0cnVlXG4gICAgICAgICAgICBydW46IG51bGxcbiAgICAgICAgICAgIG1vdmU6IFwiQVwiXG4gICAgICAgICAgXVxuICAgICAgICBBOlxuICAgICAgICAgIGVkZ2VzOiBbXG4gICAgICAgICAgICBhY2NlcHQ6IFwiZ29cIlxuICAgICAgICAgICAgcnVuOiAoIGNvbnRleHQgKSAtPlxuICAgICAgICAgICAgICBhd2FpdCBUaW1lLnNsZWVwIDFcbiAgICAgICAgICAgICAgY29udGV4dC5tZXNzYWdlID0gXCJtYWRlIGl0IHRvIEEsIGdvaW5nIHRvIEJcIlxuICAgICAgICAgICAgbW92ZTogXCJCXCJcbiAgICAgICAgICBdXG4gICAgICAgIEI6XG4gICAgICAgICAgZWRnZXM6IFtcbiAgICAgICAgICAgICAgYWNjZXB0OiBmYWxzZVxuICAgICAgICAgICAgICBydW46ICggY29udGV4dCApIC0+XG4gICAgICAgICAgICAgICAgYXdhaXQgVGltZS5zbGVlcCAxXG4gICAgICAgICAgICAgICAgY29udGV4dC5tZXNzYWdlID0gXCJ0aGlzIG92ZXJ3cml0ZSBzaG91bGRuJ3QgaGFwcGVuXCJcbiAgICAgICAgICAgICAgbW92ZTogJGhhbHRcbiAgICAgICAgICAgICxcbiAgICAgICAgICAgICAgYWNjZXB0OiB0cnVlXG4gICAgICAgICAgICAgIHJ1bjogLT4gYXdhaXQgVGltZS5zbGVlcCAxXG4gICAgICAgICAgICAgIG1vdmU6ICRoYWx0XG4gICAgICAgICAgXVxuICAgIFxuICAgIGF3YWl0IGgudGVzdCBcImRlZmluZSB0YWxvc1wiLCBoLnRhcmdldCBcInN0cmljdC1hc3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBUYWxvcy5tYWtlKClcblxuICAgIGF3YWl0IGgudGVzdCBcInJ1biB0YWxvc1wiLCBoLnRhcmdldCBcInN0cmljdC1hc3luY1wiLCAtPlxuICAgICAgaC5hc3NlcnQuZXF1YWwgJHN0YXJ0LCB0YWxvcy5zdGF0ZVxuICAgICAgXG4gICAgICBhd2FpdCBzdGVwIGdyYXBoLCB0YWxvcywgbnVsbFxuICAgICAgaC5hc3NlcnQuZXF1YWwgXCJBXCIsIHRhbG9zLnN0YXRlXG5cbiAgICAgIGF3YWl0IHN0ZXAgZ3JhcGgsIHRhbG9zLCBcImdvXCJcbiAgICAgIGguYXNzZXJ0LmVxdWFsIFwiQlwiLCB0YWxvcy5zdGF0ZVxuICAgICAgaC5hc3NlcnQuZXF1YWwgXCJtYWRlIGl0IHRvIEEsIGdvaW5nIHRvIEJcIiwgdGFsb3MuY29udGV4dC5tZXNzYWdlXG5cbiAgICAgIGF3YWl0IHN0ZXAgZ3JhcGgsIHRhbG9zLCBcImdvXCJcbiAgICAgIGguYXNzZXJ0IHRhbG9zLnN1Y2Nlc3NcbiAgICAgIGguYXNzZXJ0LmVxdWFsIFwibWFkZSBpdCB0byBBLCBnb2luZyB0byBCXCIsIHRhbG9zLmNvbnRleHQubWVzc2FnZVxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYXN5bmMgfSJdfQ==
 //# sourceURL=test/strict/async.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc3RyaWN0L2FzeW5jLmNvZmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUaW1lIGZyb20gXCJAZGFzaGtpdGUvam95L3RpbWVcIlxuaW1wb3J0IHsgR3JhcGgsIFRhbG9zLCAkc3RhcnQsICRoYWx0IH0gZnJvbSBcIi4uLy4uL3NyY1wiXG5pbXBvcnQgeyBzdGVwIH0gZnJvbSBcIi4uLy4uL3NyYy9zdHJpY3QvYXN5bmNcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbnRlc3QgPSAtPlxuICBncmFwaCA9IG51bGxcbiAgdGFsb3MgPSBudWxsXG5cbiAgW1xuICAgIGF3YWl0IGgudGVzdCBcImRlZmluZSBncmFwaFwiLCBoLnRhcmdldCBcInN0cmljdC1hc3luY1wiLCAtPlxuICAgICAgZ3JhcGggPSBHcmFwaC5tYWtlXG4gICAgICAgIFsgJHN0YXJ0IF06XG4gICAgICAgICAgZWRnZXM6IFtcbiAgICAgICAgICAgIGFjY2VwdDogdHJ1ZVxuICAgICAgICAgICAgcnVuOiBudWxsXG4gICAgICAgICAgICBtb3ZlOiBcIkFcIlxuICAgICAgICAgIF1cbiAgICAgICAgQTpcbiAgICAgICAgICBlZGdlczogW1xuICAgICAgICAgICAgYWNjZXB0OiBcImdvXCJcbiAgICAgICAgICAgIHJ1bjogKCBjb250ZXh0ICkgLT5cbiAgICAgICAgICAgICAgYXdhaXQgVGltZS5zbGVlcCAxXG4gICAgICAgICAgICAgIGNvbnRleHQubWVzc2FnZSA9IFwibWFkZSBpdCB0byBBLCBnb2luZyB0byBCXCJcbiAgICAgICAgICAgIG1vdmU6IFwiQlwiXG4gICAgICAgICAgXVxuICAgICAgICBCOlxuICAgICAgICAgIGVkZ2VzOiBbXG4gICAgICAgICAgICAgIGFjY2VwdDogZmFsc2VcbiAgICAgICAgICAgICAgcnVuOiAoIGNvbnRleHQgKSAtPlxuICAgICAgICAgICAgICAgIGF3YWl0IFRpbWUuc2xlZXAgMVxuICAgICAgICAgICAgICAgIGNvbnRleHQubWVzc2FnZSA9IFwidGhpcyBvdmVyd3JpdGUgc2hvdWxkbid0IGhhcHBlblwiXG4gICAgICAgICAgICAgIG1vdmU6ICRoYWx0XG4gICAgICAgICAgICAsXG4gICAgICAgICAgICAgIGFjY2VwdDogdHJ1ZVxuICAgICAgICAgICAgICBydW46IC0+IGF3YWl0IFRpbWUuc2xlZXAgMVxuICAgICAgICAgICAgICBtb3ZlOiAkaGFsdFxuICAgICAgICAgIF1cbiAgICBcbiAgICBhd2FpdCBoLnRlc3QgXCJkZWZpbmUgdGFsb3NcIiwgaC50YXJnZXQgXCJzdHJpY3QtYXN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gVGFsb3MubWFrZSgpXG5cbiAgICBhd2FpdCBoLnRlc3QgXCJydW4gdGFsb3NcIiwgaC50YXJnZXQgXCJzdHJpY3QtYXN5bmNcIiwgLT5cbiAgICAgIGguYXNzZXJ0LmVxdWFsICRzdGFydCwgdGFsb3Muc3RhdGVcbiAgICAgIFxuICAgICAgYXdhaXQgc3RlcCBncmFwaCwgdGFsb3MsIG51bGxcbiAgICAgIGguYXNzZXJ0LmVxdWFsIFwiQVwiLCB0YWxvcy5zdGF0ZVxuXG4gICAgICBhd2FpdCBzdGVwIGdyYXBoLCB0YWxvcywgXCJnb1wiXG4gICAgICBoLmFzc2VydC5lcXVhbCBcIkJcIiwgdGFsb3Muc3RhdGVcbiAgICAgIGguYXNzZXJ0LmVxdWFsIFwibWFkZSBpdCB0byBBLCBnb2luZyB0byBCXCIsIHRhbG9zLmNvbnRleHQubWVzc2FnZVxuXG4gICAgICBhd2FpdCBzdGVwIGdyYXBoLCB0YWxvcywgXCJnb1wiXG4gICAgICBoLmFzc2VydCB0YWxvcy5zdWNjZXNzXG4gICAgICBoLmFzc2VydC5lcXVhbCBcIm1hZGUgaXQgdG8gQSwgZ29pbmcgdG8gQlwiLCB0YWxvcy5jb250ZXh0Lm1lc3NhZ2VcbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGFzeW5jIH0iXSwibmFtZXMiOlsidGVzdCIsIlRpbWUiLCJHcmFwaCIsIlRhbG9zIiwiJHN0YXJ0IiwiJGhhbHQiLCJzdGVwIiwiaCIsImdyYXBoIiwidGFsb3MiLCJ0YXJnZXQiLCJtYWtlIiwiZWRnZXMiLCJhY2NlcHQiLCJydW4iLCJtb3ZlIiwiQSIsImNvbnRleHQiLCJzbGVlcCIsIm1lc3NhZ2UiLCJCIiwiYXNzZXJ0IiwiZXF1YWwiLCJzdGF0ZSIsInN1Y2Nlc3MiLCJhc3luYyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQUE7QUFBQSxZQUFPQyxVQUFQLHFCQUFBO0FBQ0EsU0FBU0MsS0FBVCxFQUFnQkMsS0FBaEIsRUFBdUJDLE1BQXZCLEVBQStCQyxLQUEvQixRQUFBLFlBQUE7QUFDQSxTQUFTQyxJQUFULFFBQUEseUJBQUE7QUFDQSxZQUFPQyxPQUFQLGFBQUE7QUFFQVAsT0FBTztJQUNQLElBQUFRLE9BQUFDO0lBQUVELFFBQVE7SUFDUkMsUUFBUTtXQUVSO1FBQ0UsTUFBTUYsRUFBRVAsSUFBRixDQUFPLGdCQUFnQk8sRUFBRUcsTUFBRixDQUFTLGdCQUFnQjttQkFDcERGLFFBQVFOLE1BQU1TLElBQU4sQ0FDTjtnQkFBQSxDQUFFUCxPQUFGLEVBQ0U7b0JBQUFRLE9BQU87d0JBQ0w7NEJBQUFDLFFBQVE7NEJBQ1JDLEtBQUs7NEJBQ0xDLE1BQU07d0JBRk47O2dCQURGO2dCQUtGQyxHQUNFO29CQUFBSixPQUFPO3dCQUNMOzRCQUFBQyxRQUFROzRCQUNSQyxLQUFLLGVBQUVHLE9BQUY7Z0NBQ0gsTUFBTWhCLEtBQUtpQixLQUFMLENBQVc7dUNBQ2pCRCxRQUFRRSxPQUFSLEdBQWtCOzRCQUZmOzRCQUdMSixNQUFNO3dCQUpOOztnQkFERjtnQkFPRkssR0FDRTtvQkFBQVIsT0FBTzt3QkFDSDs0QkFBQUMsUUFBUTs0QkFDUkMsS0FBSyxlQUFFRyxPQUFGO2dDQUNILE1BQU1oQixLQUFLaUIsS0FBTCxDQUFXO3VDQUNqQkQsUUFBUUUsT0FBUixHQUFrQjs0QkFGZjs0QkFHTEosTUFBTVY7d0JBSk47d0JBTUE7NEJBQUFRLFFBQVE7NEJBQ1JDLEtBQUs7dUNBQUcsTUFBTWIsS0FBS2lCLEtBQUwsQ0FBVzs0QkFBcEI7NEJBQ0xILE1BQU1WO3dCQUZOOztnQkFQSjtZQWZGO1FBRmtEO1FBNkJ0RCxNQUFNRSxFQUFFUCxJQUFGLENBQU8sZ0JBQWdCTyxFQUFFRyxNQUFGLENBQVMsZ0JBQWdCO21CQUNwREQsUUFBUU4sTUFBTVEsSUFBTjtRQUQ0QztRQUd0RCxNQUFNSixFQUFFUCxJQUFGLENBQU8sYUFBYU8sRUFBRUcsTUFBRixDQUFTLGdCQUFnQjtZQUNqREgsRUFBRWMsTUFBTSxDQUFDQyxLQUFULENBQWVsQixRQUFRSyxNQUFNYyxLQUE3QjtZQUVBLE1BQU1qQixLQUFLRSxPQUFPQyxPQUFPO1lBQ3pCRixFQUFFYyxNQUFNLENBQUNDLEtBQVQsQ0FBZSxLQUFLYixNQUFNYyxLQUExQjtZQUVBLE1BQU1qQixLQUFLRSxPQUFPQyxPQUFPO1lBQ3pCRixFQUFFYyxNQUFNLENBQUNDLEtBQVQsQ0FBZSxLQUFLYixNQUFNYyxLQUExQjtZQUNBaEIsRUFBRWMsTUFBTSxDQUFDQyxLQUFULENBQWUsNEJBQTRCYixNQUFNUSxPQUFPLENBQUNFLE9BQXpEO1lBRUEsTUFBTWIsS0FBS0UsT0FBT0MsT0FBTztZQUN6QkYsRUFBRWMsTUFBRixDQUFTWixNQUFNZSxPQUFmO21CQUNBakIsRUFBRWMsTUFBTSxDQUFDQyxLQUFULENBQWUsNEJBQTRCYixNQUFNUSxPQUFPLENBQUNFLE9BQXpEO1FBWmlEOztBQXJDaEQ7QUFvRFAsU0FBU25CLFFBQUF5QixLQUFUIn0=