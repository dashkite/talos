"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "basic", {
    enumerable: true,
    get: function() {
        return test;
    }
});
const _src = require("../../src");
const _async = require("../../src/async");
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _helpers = /*#__PURE__*/ _interop_require_wildcard(require("../helpers"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var add, grow, test;
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = _src.Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = _src.Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        _helpers.test("start", _helpers.target("async", function() {
            var talos;
            talos = (0, _async.start)(A);
            return _helpers.assert(_src.Talos.isType(talos));
        })),
        _helpers.test("run while waiting on events", _helpers.target("async", async function() {
            var events, ref, talos;
            events = [
                new Promise(function(resolve, reject) {
                    return resolve(1);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(2);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(3);
                })
            ];
            talos = (0, _async.start)(A);
            await (0, _async.run)(talos, {
                sum: 0
            }, events);
            return _helpers.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        _helpers.test("auto-run without events", _helpers.target("async", async function() {
            var ref, talos;
            talos = (0, _async.start)(B);
            await (0, _async.run)(talos, {
                product: 1
            });
            return _helpers.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        _helpers.test("build", _helpers.target("async", async function() {
            var f, ref, talos;
            f = (0, _async.build)(B);
            _helpers.assert(_type.isFunction(f));
            talos = await f({
                product: 1
            });
            return _helpers.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        _helpers.test("flow", _helpers.target("async", async function() {
            var a, b, c, context, f;
            a = async function(talos, context) {
                return context.sum = await 1;
            };
            b = async function(talos, context) {
                return context.sum += await 2;
            };
            c = async function(talos, context) {
                return context.sum += await 3;
            };
            f = (0, _async.flow)([
                a,
                b,
                c
            ]);
            _helpers.assert(_type.isFunction(f));
            context = await f({});
            return _helpers.assert.equal(6, context != null ? context.sum : void 0);
        }))
    ];
};
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy90ZXN0L2FzeW5jL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsS0FBbEI7RUFBeUIsTUFBekI7RUFBaUMsSUFBakM7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0VBQWdCLEdBQWhCO0VBQXFCLEtBQXJCO0VBQTRCLElBQTVCO0NBQUEsTUFBQTs7QUFDQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxLQUFQLE1BQUE7O0FBRUEsR0FBQSxHQUFNLFFBQUEsQ0FBRSxLQUFGLEVBQVMsS0FBVCxDQUFBO1NBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFkLElBQXFCO0FBRGpCOztBQUVOLElBQUEsR0FBTyxRQUFBLENBQUUsS0FBRixDQUFBO1NBQ0wsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFkLElBQXlCO0FBRHBCOztBQUlQLElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQTtBQUNQLE1BQUEsQ0FBQSxFQUFBO0VBQUUsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQ0Y7SUFBQSxLQUFBLEVBQ0U7TUFBQSxJQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBREY7SUFHQSxJQUFBLEVBQ0U7TUFBQSxJQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGO0VBSkYsQ0FERTtFQVFKLENBQUEsR0FBSSxPQUFPLENBQUMsSUFBUixDQUNGO0lBQUEsS0FBQSxFQUNFO01BQUEsS0FBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERixDQURGO0lBR0EsS0FBQSxFQUNFO01BQUEsTUFBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERixDQUpGO0lBTUEsTUFBQSxFQUNFO01BQUEsR0FBQSxFQUNFO1FBQUEs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Q0FBRSxLQUFGO0lBQVMsT0FBVCxDQUFBO2VBQXNCLE9BQU8sQ0FBQyxHQUFSLElBQWUsQ0FBQSxNQUFNLENBQU47TUFBckM7TUFFSixDQUFBLEdBQUksSUFBQSxDQUFLLENBQUUsQ0FBRjtJQUFLLENBQUw7SUFBUSxDQUFSLENBQUw7TUFDSixDQUFDLENBQUMsTUFBRixDQUFTLElBQUksQ0FBQyxVQUFMLENBQWdCLENBQWhCLENBQVQ7TUFDQSxPQUFBLEdBQVUsQ0FBQSxNQUFNLENBQUEsQ0FBRSxDQUFBLENBQUYsQ0FBTjthQUNWLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQWY7c0JBQWtCLE9BQU8sQ0FBRSxZQUEzQjtJQVIrQixDQUFsQixDQUFmLENBMUJGOztBQXJCSzs7QUEyRFAsT0FBQTtFQUFTLElBQUEsU0FBVCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsIFRhbG9zLCAkc3RhcnQsICRlbmQgfSBmcm9tIFwiLi4vLi4vc3JjXCJcbmltcG9ydCB7IHN0YXJ0LCBydW4sIGJ1aWxkLCBmbG93IH0gZnJvbSBcIi4uLy4uL3NyYy9hc3luY1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbmFkZCA9ICggdGFsb3MsIGV2ZW50ICkgLT5cbiAgdGFsb3MuY29udGV4dC5zdW0gKz0gZXZlbnRcbmdyb3cgPSAoIHRhbG9zICkgLT5cbiAgdGFsb3MuY29udGV4dC5wcm9kdWN0ICo9IDJcblxuXG50ZXN0ID0gLT5cbiAgQSA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBzdGFydCBBXG4gICAgICBoLmFzc2VydCBUYWxvcy5pc1R5cGUgdGFsb3NcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSB3YWl0aW5nIG9uIGV2ZW50c1wiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBldmVudHMgPSBbIFxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgMVxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgMlxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgM1xuICAgICAgXVxuICAgICAgdGFsb3MgPSBzdGFydCBBXG4gICAgICBhd2FpdCBydW4gdGFsb3MsIHN1bTogMCwgZXZlbnRzXG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCB0YWxvcy5jb250ZXh0Py5zdW1cblxuICAgIGgudGVzdCBcImF1dG8tcnVuIHdpdGhvdXQgZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gc3RhcnQgQlxuICAgICAgYXdhaXQgcnVuIHRhbG9zLCBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJidWlsZFwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBmID0gYnVpbGQgQlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIHRhbG9zID0gYXdhaXQgZiBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJmbG93XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGEgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gPSBhd2FpdCAxXG4gICAgICBiID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtICs9IGF3YWl0IDJcbiAgICAgIGMgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gKz0gYXdhaXQgMyBcblxuICAgICAgZiA9IGZsb3cgWyBhLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gYXdhaXQgZiB7fVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgY29udGV4dD8uc3VtXG5cbiAgXVxuXG5leHBvcnQgeyB0ZXN0IGFzIGJhc2ljIH0iXX0=
 //# sourceURL=/@dashkite/talos/test/async/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9hc3luYy9iYXNpYy5jb2ZmZWUiLCI8YW5vbj4iXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0IHsgc3RhcnQsIHJ1biwgYnVpbGQsIGZsb3cgfSBmcm9tIFwiLi4vLi4vc3JjL2FzeW5jXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuYWRkID0gKCB0YWxvcywgZXZlbnQgKSAtPlxuICB0YWxvcy5jb250ZXh0LnN1bSArPSBldmVudFxuZ3JvdyA9ICggdGFsb3MgKSAtPlxuICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gMlxuXG5cbnRlc3QgPSAtPlxuICBBID0gTWFjaGluZS5tYWtlXG4gICAgc3RhcnQ6XG4gICAgICBob2xkOiBcbiAgICAgICAgcnVuOiBhZGRcbiAgICBob2xkOlxuICAgICAgaG9sZDpcbiAgICAgICAgcnVuOiBhZGRcblxuICBCID0gTWFjaGluZS5tYWtlXG4gICAgc3RhcnQ6XG4gICAgICBmaXJzdDogXG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIGZpcnN0OlxuICAgICAgc2Vjb25kOlxuICAgICAgICBydW46IGdyb3dcbiAgICBzZWNvbmQ6IFxuICAgICAgZW5kOlxuICAgICAgICBydW46IGdyb3dcblxuXG4gIFtcbiAgICBoLnRlc3QgXCJzdGFydFwiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IHN0YXJ0IEFcbiAgICAgIGguYXNzZXJ0IFRhbG9zLmlzVHlwZSB0YWxvc1xuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIHdhaXRpbmcgb24gZXZlbnRzXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAxXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAyXG4gICAgICAgIG5ldyBQcm9taXNlICggcmVzb2x2ZSwgcmVqZWN0ICkgLT4gcmVzb2x2ZSAzXG4gICAgICBdXG4gICAgICB0YWxvcyA9IHN0YXJ0IEFcbiAgICAgIGF3YWl0IHJ1biB0YWxvcywgc3VtOiAwLCBldmVudHNcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIHRhbG9zLmNvbnRleHQ/LnN1bVxuXG4gICAgaC50ZXN0IFwiYXV0by1ydW4gd2l0aG91dCBldmVudHNcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBzdGFydCBCXG4gICAgICBhd2FpdCBydW4gdGFsb3MsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImJ1aWxkXCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGYgPSBidWlsZCBCXG4gICAgICBoLmFzc2VydCBUeXBlLmlzRnVuY3Rpb24gZlxuICAgICAgdGFsb3MgPSBhd2FpdCBmIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImZsb3dcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSA9IGF3YWl0IDFcbiAgICAgIGIgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gKz0gYXdhaXQgMlxuICAgICAgYyA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSArPSBhd2FpdCAzIFxuXG4gICAgICBmID0gZmxvdyBbIGEsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBhd2FpdCBmIHt9XG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCBjb250ZXh0Py5zdW1cblxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSIsbnVsbF0sIm5hbWVzIjpbImJhc2ljIiwidGVzdCIsImFkZCIsImdyb3ciLCJ0YWxvcyIsImV2ZW50IiwiY29udGV4dCIsInN1bSIsInByb2R1Y3QiLCJBIiwiQiIsIk1hY2hpbmUiLCJtYWtlIiwic3RhcnQiLCJob2xkIiwicnVuIiwiZmlyc3QiLCJzZWNvbmQiLCJlbmQiLCJoIiwidGFyZ2V0IiwiYXNzZXJ0IiwiVGFsb3MiLCJpc1R5cGUiLCJldmVudHMiLCJyZWYiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVxdWFsIiwiZiIsImJ1aWxkIiwiVHlwZSIsImlzRnVuY3Rpb24iLCJhIiwiYiIsImMiLCJmbG93Il0sIm1hcHBpbmdzIjoiOzs7OytCQXNFU0E7OztlQUFBQzs7O3FCQXRFVDt1QkFDQTs4REFDQTtpRUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUhBLElBQUFDLEtBQUFDLE1BQUFGO0FBS0FDLE1BQU0sU0FBRUUsS0FBRixFQUFTQyxLQUFUO1dBQ0pELE1BQU1FLE9BQU8sQ0FBQ0MsR0FBZCxJQUFxQkY7QUFEakI7QUFFTkYsT0FBTyxTQUFFQyxLQUFGO1dBQ0xBLE1BQU1FLE9BQU8sQ0FBQ0UsT0FBZCxJQUF5QjtBQURwQjtBQUlQUCxPQUFPO0lBQ1AsSUFBQVEsR0FBQUM7SUFBRUQsSUFBSUUsWUFBTyxDQUFDQyxJQUFSLENBQ0Y7UUFBQUMsT0FDRTtZQUFBQyxNQUNFO2dCQUFBQyxLQUFLYjtZQUFMO1FBREY7UUFFRlksTUFDRTtZQUFBQSxNQUNFO2dCQUFBQyxLQUFLYjtZQUFMO1FBREY7SUFKRjtJQU9GUSxJQUFJQyxZQUFPLENBQUNDLElBQVIsQ0FDRjtRQUFBQyxPQUNFO1lBQUFHLE9BQ0U7Z0JBQUFELEtBQUtaO1lBQUw7UUFERjtRQUVGYSxPQUNF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