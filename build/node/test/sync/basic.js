"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "basic", {
    enumerable: true,
    get: function() {
        return test;
    }
});
const _src = require("../../src");
const _sync = require("../../src/sync");
const _type = /*#__PURE__*/ _interop_require_wildcard(require("@dashkite/joy/type"));
const _helpers = /*#__PURE__*/ _interop_require_wildcard(require("../helpers"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var add, grow, test;
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = _src.Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = _src.Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        _helpers.test("start", _helpers.target("sync", function() {
            var talos;
            talos = (0, _sync.start)(A);
            return _helpers.assert(_src.Talos.isType(talos));
        })),
        _helpers.test("run while waiting on events", _helpers.target("sync", function() {
            var events, ref, talos;
            events = [
                1,
                2,
                3
            ];
            talos = (0, _sync.start)(A);
            (0, _sync.run)(talos, {
                sum: 0
            }, events);
            return _helpers.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        _helpers.test("auto-run without events", _helpers.target("sync", function() {
            var ref, talos;
            talos = (0, _sync.start)(B);
            (0, _sync.run)(talos, {
                product: 1
            });
            return _helpers.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        _helpers.test("build", _helpers.target("sync", function() {
            var f, ref, talos;
            f = (0, _sync.build)(B);
            _helpers.assert(_type.isFunction(f));
            talos = f({
                product: 1
            });
            return _helpers.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        _helpers.test("pipe", _helpers.target("sync", function() {
            var a, b, c, context, f;
            a = function(talos, context) {
                return context.sum = 1;
            };
            b = function(talos, context) {
                return context.sum += 2;
            };
            c = function(talos, context) {
                return context.sum += 3;
            };
            f = (0, _sync.pipe)([
                a,
                b,
                c
            ]);
            _helpers.assert(_type.isFunction(f));
            context = f({});
            return _helpers.assert.equal(6, context != null ? context.sum : void 0);
        }))
    ];
};
 //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL0BkYXNoa2l0ZS90YWxvcy90ZXN0L3N5bmMvYmFzaWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsR0FBQSxFQUFBLElBQUEsRUFBQTs7QUFBQSxPQUFBO0VBQVMsT0FBVDtFQUFrQixLQUFsQjtFQUF5QixNQUF6QjtFQUFpQyxJQUFqQztDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLEtBQVQ7RUFBZ0IsR0FBaEI7RUFBcUIsS0FBckI7RUFBNEIsSUFBNUI7Q0FBQSxNQUFBOztBQUNBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLEtBQVAsTUFBQTs7QUFFQSxHQUFBLEdBQU0sUUFBQSxDQUFFLEtBQUYsRUFBUyxLQUFULENBQUE7U0FDSixLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWQsSUFBcUI7QUFEakI7O0FBRU4sSUFBQSxHQUFPLFFBQUEsQ0FBRSxLQUFGLENBQUE7U0FDTCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQWQsSUFBeUI7QUFEcEI7O0FBSVAsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxDQUFBLEVBQUE7RUFBRSxDQUFBLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FDRjtJQUFBLEtBQUEsRUFDRTtNQUFBLElBQUEsRUFDRTtRQUFBLEdBQUEsRUFBSztNQUFMO0lBREYsQ0FERjtJQUdBLElBQUEsRUFDRTtNQUFBLElBQUEsRUFDRTtRQUFBLEdBQUEsRUFBSztNQUFMO0lBREY7RUFKRixDQURFO0VBUUosQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQ0Y7SUFBQSxLQUFBLEVBQ0U7TUFBQSxLQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBREY7SUFHQSxLQUFBLEVBQ0U7TUFBQSxNQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBSkY7SUFNQSxNQUFBLEVBQ0U7TUFBQSxHQUFBLEVBQ0U7UUFBQSxH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QVQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWNoaW5lLCBUYWxvcywgJHN0YXJ0LCAkZW5kIH0gZnJvbSBcIi4uLy4uL3NyY1wiXG5pbXBvcnQgeyBzdGFydCwgcnVuLCBidWlsZCwgcGlwZSB9IGZyb20gXCIuLi8uLi9zcmMvc3luY1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbmFkZCA9ICggdGFsb3MsIGV2ZW50ICkgLT5cbiAgdGFsb3MuY29udGV4dC5zdW0gKz0gZXZlbnRcbmdyb3cgPSAoIHRhbG9zICkgLT5cbiAgdGFsb3MuY29udGV4dC5wcm9kdWN0ICo9IDJcblxuXG50ZXN0ID0gLT5cbiAgQSA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IHN0YXJ0IEFcbiAgICAgIGguYXNzZXJ0IFRhbG9zLmlzVHlwZSB0YWxvc1xuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIHdhaXRpbmcgb24gZXZlbnRzXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyAxLCAyLCAzIF1cbiAgICAgIHRhbG9zID0gc3RhcnQgQVxuICAgICAgcnVuIHRhbG9zLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJhdXRvLXJ1biB3aXRob3V0IGV2ZW50c1wiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gc3RhcnQgQlxuICAgICAgcnVuIHRhbG9zLCBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJidWlsZFwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGYgPSBidWlsZCBCXG4gICAgICBoLmFzc2VydCBUeXBlLmlzRnVuY3Rpb24gZlxuICAgICAgdGFsb3MgPSBmIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcInBpcGVcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtID0gMVxuICAgICAgYiA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSArPSAyXG4gICAgICBjID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtICs9IDMgXG5cbiAgICAgIGYgPSBwaXBlIFsgYSwgYiwgYyBdXG4gICAgICBoLmFzc2VydCBUeXBlLmlzRnVuY3Rpb24gZlxuICAgICAgY29udGV4dCA9IGYge31cbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIGNvbnRleHQ/LnN1bVxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBiYXNpYyB9Il19
 //# sourceURL=/@dashkite/talos/test/sync/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9AZGFzaGtpdGUvdGFsb3MvdGVzdC9zeW5jL2Jhc2ljLmNvZmZlZSIsIjxhbm9uPiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWNoaW5lLCBUYWxvcywgJHN0YXJ0LCAkZW5kIH0gZnJvbSBcIi4uLy4uL3NyY1wiXG5pbXBvcnQgeyBzdGFydCwgcnVuLCBidWlsZCwgcGlwZSB9IGZyb20gXCIuLi8uLi9zcmMvc3luY1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0ICogYXMgaCBmcm9tIFwiLi4vaGVscGVyc1wiXG5cbmFkZCA9ICggdGFsb3MsIGV2ZW50ICkgLT5cbiAgdGFsb3MuY29udGV4dC5zdW0gKz0gZXZlbnRcbmdyb3cgPSAoIHRhbG9zICkgLT5cbiAgdGFsb3MuY29udGV4dC5wcm9kdWN0ICo9IDJcblxuXG50ZXN0ID0gLT5cbiAgQSA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgaG9sZDogXG4gICAgICAgIHJ1bjogYWRkXG4gICAgaG9sZDpcbiAgICAgIGhvbGQ6XG4gICAgICAgIHJ1bjogYWRkXG5cbiAgQiA9IE1hY2hpbmUubWFrZVxuICAgIHN0YXJ0OlxuICAgICAgZmlyc3Q6IFxuICAgICAgICBydW46IGdyb3dcbiAgICBmaXJzdDpcbiAgICAgIHNlY29uZDpcbiAgICAgICAgcnVuOiBncm93XG4gICAgc2Vjb25kOiBcbiAgICAgIGVuZDpcbiAgICAgICAgcnVuOiBncm93XG5cblxuICBbXG4gICAgaC50ZXN0IFwic3RhcnRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IHN0YXJ0IEFcbiAgICAgIGguYXNzZXJ0IFRhbG9zLmlzVHlwZSB0YWxvc1xuXG4gICAgaC50ZXN0IFwicnVuIHdoaWxlIHdhaXRpbmcgb24gZXZlbnRzXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgZXZlbnRzID0gWyAxLCAyLCAzIF1cbiAgICAgIHRhbG9zID0gc3RhcnQgQVxuICAgICAgcnVuIHRhbG9zLCBzdW06IDAsIGV2ZW50c1xuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgdGFsb3MuY29udGV4dD8uc3VtXG5cbiAgICBoLnRlc3QgXCJhdXRvLXJ1biB3aXRob3V0IGV2ZW50c1wiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gc3RhcnQgQlxuICAgICAgcnVuIHRhbG9zLCBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJidWlsZFwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGYgPSBidWlsZCBCXG4gICAgICBoLmFzc2VydCBUeXBlLmlzRnVuY3Rpb24gZlxuICAgICAgdGFsb3MgPSBmIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcInBpcGVcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtID0gMVxuICAgICAgYiA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSArPSAyXG4gICAgICBjID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtICs9IDMgXG5cbiAgICAgIGYgPSBwaXBlIFsgYSwgYiwgYyBdXG4gICAgICBoLmFzc2VydCBUeXBlLmlzRnVuY3Rpb24gZlxuICAgICAgY29udGV4dCA9IGYge31cbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIGNvbnRleHQ/LnN1bVxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBiYXNpYyB9IixudWxsXSwibmFtZXMiOlsiYmFzaWMiLCJ0ZXN0IiwiYWRkIiwiZ3JvdyIsInRhbG9zIiwiZXZlbnQiLCJjb250ZXh0Iiwic3VtIiwicHJvZHVjdCIsIkEiLCJCIiwiTWFjaGluZSIsIm1ha2UiLCJzdGFydCIsImhvbGQiLCJydW4iLCJmaXJzdCIsInNlY29uZCIsImVuZCIsImgiLCJ0YXJnZXQiLCJhc3NlcnQiLCJUYWxvcyIsImlzVHlwZSIsImV2ZW50cyIsInJlZiIsImVxdWFsIiwiZiIsImJ1aWxkIiwiVHlwZSIsImlzRnVuY3Rpb24iLCJhIiwiYiIsImMiLCJwaXBlIl0sIm1hcHBpbmdzIjoiOzs7OytCQWtFU0E7OztlQUFBQzs7O3FCQWxFVDtzQkFDQTs4REFDQTtpRUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUhBLElBQUFDLEtBQUFDLE1BQUFGO0FBS0FDLE1BQU0sU0FBRUUsS0FBRixFQUFTQyxLQUFUO1dBQ0pELE1BQU1FLE9BQU8sQ0FBQ0MsR0FBZCxJQUFxQkY7QUFEakI7QUFFTkYsT0FBTyxTQUFFQyxLQUFGO1dBQ0xBLE1BQU1FLE9BQU8sQ0FBQ0UsT0FBZCxJQUF5QjtBQURwQjtBQUlQUCxPQUFPO0lBQ1AsSUFBQVEsR0FBQUM7SUFBRUQsSUFBSUUsWUFBTyxDQUFDQyxJQUFSLENBQ0Y7UUFBQUMsT0FDRTtZQUFBQyxNQUNFO2dCQUFBQyxLQUFLYjtZQUFMO1FBREY7UUFFRlksTUFDRTtZQUFBQSxNQUNFO2dCQUFBQyxLQUFLYjtZQUFMO1FBREY7SUFKRjtJQU9GUSxJQUFJQyxZQUFPLENBQUNDLElBQVIsQ0FDRjtRQUFBQyxPQUNFO1lBQUFHLE9BQ0U7Z0JBQUFELEtBQUtaO1lBQUw7UUFERjtRQUVGYSxPQUNFO1lBQUFDLFFBQ0U7Z0JBQUFGLEtBQUtaO1lBQUw7UUFERjtRQUVGYyxRQUNFO1lBQUFDLEtBQ0U7Z0JBQUFILEtBQUtaO1lBQUw7UUFERjtJQVBGO1dBV0Y7UUFDRWdCLFNBQUVsQixJQUFGLENBQU8sU0FBU2tCLFNBQUVDLE1BQUYsQ0FBUyxRQUFRO1lBQ3JDLElBQUFoQjtZQUFNQSxRQUFRUyxJQUFBQSxXQUFBLEVBQU1KO21CQUNkVSxTQUFFRSxNQUFGLENBQVNDLFVBQUssQ0FBQ0MsTUFBTixDQUFhbkI7UUFGUztRQUlqQ2UsU0FBRWxCLElBQUYsQ0FBTywrQkFBK0JrQixTQUFFQyxNQUFGLENBQVMsUUFBUTtZQUMzRCxJQUFBSSxRQUFBQyxLQUFBckI7WUFBTW9CLFNBQVM7Z0JBQUU7Z0JBQUc7Z0JBQUc7YUFBUjtZQUNUcEIsUUFBUVMsSUFBQUEsV0FBQSxFQUFNSjtZQUNkTSxJQUFBQSxTQUFBLEVBQUlYLE9BQU87Z0JBQUFHLEtBQUs7WUFBTCxHQUFRaUI7bUJBQ25CTCxTQUFFRSxNQUFNLENBQUNLLEtBQVQsQ0FBZSx1Q0FBa0JuQixHQUFBLEdBQUEsS0FBQTtRQUpvQjtRQU12RFksU0FBRWxCLElBQUYsQ0FBTywyQkFBMkJrQixTQUFFQyxNQUFGLENBQVMsUUFBUTtZQUN2RCxJQUFBSyxLQUFBckI7WUFBTUEsUUFBUVMsSUFBQUEsV0FBQSxFQUFNSDtZQUNkSyxJQUFBQSxTQUFBLEVBQUlYLE9BQU87Z0JBQUFJLFNBQVM7WUFBVDttQkFDWFcsU0FBRUUsTUFBTSxDQUFDSyxLQUFULENBQWUsdUNBQWtCbEIsT0FBQSxHQUFBLEtBQUE7UUFIZ0I7UUFLbkRXLFNBQUVsQixJQUFGLENBQU8sU0FBU2tCLFNBQUVDLE1BQUYsQ0FBUyxRQUFRO1lBQ3JDLElBQUFPLEdBQUFGLEtBQUFyQjtZQUFNdUIsSUFBSUMsSUFBQUEsV0FBQSxFQUFNbEI7WUFDVlMsU0FBRUUsTUFBRixDQUFTUSxNQUFLQyxVQUFMLENBQWdCSDtZQUN6QnZCLFFBQVF1QixFQUFFO2dCQUFBbkIsU0FBUztZQUFUO21CQUNWVyxTQUFFRSxNQUFNLENBQUNLLEtBQVQsQ0FBZSx1Q0FBa0JsQixPQUFBLEdBQUEsS0FBQTtRQUpGO1FBTWpDVyxTQUFFbEIsSUFBRixDQUFPLFFBQVFrQixTQUFFQyxNQUFGLENBQVMsUUFBUTtZQUNwQyxJQUFBVyxHQUFBQyxHQUFBQyxHQUFBM0IsU0FBQXFCO1lBQU1JLElBQUksU0FBRTNCLEtBQUYsRUFBU0UsT0FBVDt1QkFBc0JBLFFBQVFDLEdBQVIsR0FBYztZQUFwQztZQUNKeUIsSUFBSSxTQUFFNUIsS0FBRixFQUFTRSxPQUFUO3VCQUFzQkEsUUFBUUMsR0FBUixJQUFlO1lBQXJDO1lBQ0owQixJQUFJLFNBQUU3QixLQUFGLEVBQVNFLE9BQVQ7dUJBQXNCQSxRQUFRQyxHQUFSLElBQWU7WUFBckM7WUFFSm9CLElBQUlPLElBQUFBLFVBQUEsRUFBSztnQkFBRUg7Z0JBQUdDO2dCQUFHQzthQUFiO1lBQ0pkLFNBQUVFLE1BQUYsQ0FBU1EsTUFBS0MsVUFBTCxDQUFnQkg7WUFDekJyQixVQUFVcUIsRUFBRSxDQUFBO21CQUNaUixTQUFFRSxNQUFNLENBQUNLLEtBQVQsQ0FBZSxxQkFBR3BCLFFBQVNDLEdBQUEsR0FBQSxLQUFBO1FBUkc7O0FBM0M3QiJ9