var test;
import { Machine, $end, start, run } from "../../src/async";
import * as h from "../helpers";
test = function() {
    var A, B, Run;
    Run = {
        grow: async function(talos) {
            return talos.context.product *= await 2;
        }
    };
    A = Machine.make({
        name: "A",
        graph: {
            start: {
                default: "second"
            },
            second: {
                default: {
                    run: Run.grow,
                    move: "third"
                }
            },
            third: {
                default: {
                    run: Run.grow,
                    move: $end
                }
            }
        }
    });
    Run.join = async function*(talos) {
        var inner, ref, results;
        ref = start(A, talos.context);
        results = [];
        for await (inner of ref){
            results.push((yield inner));
        }
        return results;
    };
    B = Machine.make({
        name: "B",
        graph: {
            start: {
                default: "first"
            },
            first: {
                default: {
                    run: Run.grow,
                    move: "join"
                }
            },
            join: {
                default: {
                    run: Run.join,
                    move: $end
                }
            }
        }
    });
    return [
        h.test("completes operation", h.target("sync", async function() {
            var ref, talos;
            talos = await run(B, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("exposes lower order talos instance", h.target("sync", async function() {
            var expected, ref, states, talos;
            states = [];
            ref = start(B, {
                product: 1
            });
            for await (talos of ref){
                states.push({
                    name: talos.name,
                    state: talos.state
                });
            }
            expected = [
                {
                    name: "B",
                    state: "first"
                },
                {
                    name: "B",
                    state: "join"
                },
                {
                    name: "A",
                    state: "second"
                },
                {
                    name: "A",
                    state: "third"
                },
                {
                    name: "A",
                    state: $end
                },
                {
                    name: "B",
                    state: $end
                }
            ];
            return h.assert.deepEqual(expected, states);
        }))
    ];
};
export { test as nested }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9hc3luYy9uZXN0ZWQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsSUFBbEI7RUFBd0IsS0FBeEI7RUFBK0IsR0FBL0I7Q0FBQSxNQUFBOztBQUNBLE9BQU8sQ0FBQSxLQUFQLE1BQUE7O0FBR0EsSUFBQSxHQUFPLFFBQUEsQ0FBQSxDQUFBO0FBQ1AsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBO0VBQUUsR0FBQSxHQUNFO0lBQUEsSUFBQSxFQUFNLE1BQUEsUUFBQSxDQUFFLEtBQUYsQ0FBQTthQUNKLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBZCxJQUF5QixDQUFBLE1BQU0sQ0FBTjtJQURyQjtFQUFOO0VBR0YsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQ0Y7SUFBQSxJQUFBLEVBQU0sR0FBTjtJQUNBLEtBQUEsRUFDRTtNQUFBLEtBQUEsRUFDRTtRQUFBLE9BQUEsRUFBUztNQUFULENBREY7TUFFQSxNQUFBLEVBQ0U7UUFBQSxPQUFBLEVBQ0U7VUFBQSxHQUFBLEVBQUssR0FBRyxDQUFDLElBQVQ7VUFDQSxJQUFBLEVBQU07UUFETjtNQURGLENBSEY7TUFNQSxLQUFBLEVBQ0U7UUFBQSxPQUFBLEVBQ0U7VUFBQSxHQUFBLEVBQUssR0FBRyxDQUFDLElBQVQ7VUFDQSxJQUFBLEVBQU07UUFETjtNQURGO0lBUEY7RUFGRixDQURFO0VBY0osR0FBRyxDQUFDLElBQUosR0FBVyxNQUFBLFNBQUEsQ0FBRSxLQUFGLENBQUE7QUFDYixRQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUE7QUFBSTtBQUFBO0lBQUEsd0JBQUE7bUJBQ0UsQ0FBQSxNQUFNLEtBQU47SUFERixDQUFBOztFQURTO0VBSVgsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQ0Y7SUFBQSxJQUFBLEVBQU0sR0FBTjtJQUNBLEtBQUEsRUFDRTtNQUFBLEtBQUEsRUFDRTtRQUFBLE9BQUEsRUFBUztNQUFULENBREY7TUFFQSxLQUFBLEVBQ0U7UUFBQSxPQUFBLEVBQ0U7VUFBQSxHQUFBLEVBQUssR0FBRyxDQUFDLElBQVQ7VUFDQSxJQUFBLEVBQU07UUFETjtNQURGLENBSEY7TUFNQSxJQUFBLEVBQ0U7UUFBQSxPQUFBLEVBQ0U7VUFBQSxHQUFBLEVBQUssR0FBRyxDQUFDLElBQVQ7VUFDQSxJQUFBLEVBQU07UUFETjtNQURGO0lBUEY7RUFGRixDQURFO1NBZUo7SUFDRSxDQUFDLENBQUMsSUFBRixDQUFPLHFCQUFQO0lBQThCLENBQUMsQ0FBQyxNQUFGLENBQVMsTUFBVDtJQUFpQixNQUFBLFFBQUEsQ0FBQSxDQUFBO0FBQ25ELFVBQUEsR0FBQTtJQUFBO01BQU0sS0FBQSxHQUFRLENBQUEsTUFBTSxHQUFBLENBQUksQ0FBSjtJQUFPO1FBQUEsT0FBQSxFQUFTO01BQVQsQ0FBUCxDQUFOO2FBQ1IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsQ0FBZjt1Q0FBK0IsQ0FBRSxnQkFBakM7SUFGNkMsQ0FBakIsQ0FBOUIsQ0FERjtJQUtFLENBQUMsQ0FBQyxJQUFGLENBQU8sb0NBQVA7SUFBNkMsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxNQUFUO0lBQWlCLE1BQUEsUUFBQSxDQUFBLENBQUE7QUFDbEUsVUFBQSxRQUFBO0lBQUEsR0FBQTtJQUFBLE1BQUE7SUFBQTtNQUFNLE1BQUEsR0FBUztBQUNUOzs7TUFBQSx3QkFBQTtRQUNFLE1BQU0sQ0FBQyxJQUFQLENBQ0U7VUFBQSxJQUFBLEVBQU0sS0FBSyxDQUFDLElBQVo7VUFDQSxLQUFBLEVBQU8sS0FBSyxDQUFDO1FBRGIsQ0FERjtNQURGO01BS0EsUUFBQSxHQUFXO1FBQ1Q7VUFBQSxJQUFBLEVBQU0sR0FBTjtVQUNBLEtBQUEsRUFBTztRQURQLENBRFM7UUFJVDtVQUFBLElBQUEsRUFBTSxHQUFOO1VBQ0EsS0FBQSxFQUFPO1FBRFAsQ0FKUztRQU9UO1VBQUEsSUFBQSxFQUFNLEdBQU47VUFDQSxLQUFBLEVBQU87UUFEUCxDQVBTO1FBVVQ7VUFBQSxJQUFBLEVBQU0sR0FBTjtVQUNBLEtBQUEsRUFBTztRQURQLENBVlM7UUFhVDtVQUFBLElBQUEsRUFBTSxHQUFOO1VBQ0EsS0FBQSxFQUFPO1FBRFAsQ0FiUztRQWdCVDtVQUFBLElBQUEsRUFBTSxHQUFOO1VBQ0EsS0FBQSxFQUFPO1FBRFAsQ0FoQlM7O2FBb0JYLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBVCxDQUFtQixRQUFuQjtJQUE2QixNQUE3QjtJQTNCNEQsQ0FBakIsQ0FBN0MsQ0FMRjs7QUF0Q0s7O0FBMEVQLE9BQUE7RUFBUyxJQUFBLFVBQVQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWNoaW5lLCAkZW5kLCBzdGFydCwgcnVuIH0gZnJvbSBcIi4uLy4uL3NyYy9hc3luY1wiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuXG50ZXN0ID0gLT5cbiAgUnVuID0gXG4gICAgZ3JvdzogKCB0YWxvcyApIC0+XG4gICAgICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gYXdhaXQgMlxuXG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBuYW1lOiBcIkFcIlxuICAgIGdyYXBoOlxuICAgICAgc3RhcnQ6XG4gICAgICAgIGRlZmF1bHQ6IFwic2Vjb25kXCJcbiAgICAgIHNlY29uZDpcbiAgICAgICAgZGVmYXVsdDogXG4gICAgICAgICAgcnVuOiBSdW4uZ3Jvd1xuICAgICAgICAgIG1vdmU6IFwidGhpcmRcIlxuICAgICAgdGhpcmQ6IFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJ1bjogUnVuLmdyb3dcbiAgICAgICAgICBtb3ZlOiAkZW5kXG5cbiAgUnVuLmpvaW4gPSAoIHRhbG9zICkgLT5cbiAgICBmb3IgYXdhaXQgaW5uZXIgZnJvbSBzdGFydCBBLCB0YWxvcy5jb250ZXh0XG4gICAgICB5aWVsZCBpbm5lclxuXG4gIEIgPSBNYWNoaW5lLm1ha2UgXG4gICAgbmFtZTogXCJCXCJcbiAgICBncmFwaDpcbiAgICAgIHN0YXJ0OlxuICAgICAgICBkZWZhdWx0OiBcImZpcnN0XCIgXG4gICAgICBmaXJzdDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBydW46IFJ1bi5ncm93XG4gICAgICAgICAgbW92ZTogXCJqb2luXCJcbiAgICAgIGpvaW46IFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJ1bjogUnVuLmpvaW5cbiAgICAgICAgICBtb3ZlOiAkZW5kXG5cblxuICBbXG4gICAgaC50ZXN0IFwiY29tcGxldGVzIG9wZXJhdGlvblwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImV4cG9zZXMgbG93ZXIgb3JkZXIgdGFsb3MgaW5zdGFuY2VcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBzdGF0ZXMgPSBbXVxuICAgICAgZm9yIGF3YWl0IHRhbG9zIGZyb20gc3RhcnQgQiwgcHJvZHVjdDogMVxuICAgICAgICBzdGF0ZXMucHVzaFxuICAgICAgICAgIG5hbWU6IHRhbG9zLm5hbWVcbiAgICAgICAgICBzdGF0ZTogdGFsb3Muc3RhdGVcbiAgICBcbiAgICAgIGV4cGVjdGVkID0gWyBcbiAgICAgICAgbmFtZTogXCJCXCJcbiAgICAgICAgc3RhdGU6IFwiZmlyc3RcIlxuICAgICAgLCBcbiAgICAgICAgbmFtZTogXCJCXCJcbiAgICAgICAgc3RhdGU6IFwiam9pblwiXG4gICAgICAsIFxuICAgICAgICBuYW1lOiBcIkFcIlxuICAgICAgICBzdGF0ZTogXCJzZWNvbmRcIlxuICAgICAgLCBcbiAgICAgICAgbmFtZTogXCJBXCJcbiAgICAgICAgc3RhdGU6IFwidGhpcmRcIlxuICAgICAgLFxuICAgICAgICBuYW1lOiBcIkFcIlxuICAgICAgICBzdGF0ZTogJGVuZFxuICAgICAgLFxuICAgICAgICBuYW1lOiBcIkJcIlxuICAgICAgICBzdGF0ZTogJGVuZFxuICAgICAgXVxuICAgICAgXG4gICAgICBoLmFzc2VydC5kZWVwRXF1YWwgZXhwZWN0ZWQsIHN0YXRlc1xuICAgICAgXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBuZXN0ZWQgfSJdfQ==
 //# sourceURL=test/async/nested.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYXN5bmMvbmVzdGVkLmNvZmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWNoaW5lLCAkZW5kLCBzdGFydCwgcnVuIH0gZnJvbSBcIi4uLy4uL3NyYy9hc3luY1wiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuLi9oZWxwZXJzXCJcblxuXG50ZXN0ID0gLT5cbiAgUnVuID0gXG4gICAgZ3JvdzogKCB0YWxvcyApIC0+XG4gICAgICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gYXdhaXQgMlxuXG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBuYW1lOiBcIkFcIlxuICAgIGdyYXBoOlxuICAgICAgc3RhcnQ6XG4gICAgICAgIGRlZmF1bHQ6IFwic2Vjb25kXCJcbiAgICAgIHNlY29uZDpcbiAgICAgICAgZGVmYXVsdDogXG4gICAgICAgICAgcnVuOiBSdW4uZ3Jvd1xuICAgICAgICAgIG1vdmU6IFwidGhpcmRcIlxuICAgICAgdGhpcmQ6IFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJ1bjogUnVuLmdyb3dcbiAgICAgICAgICBtb3ZlOiAkZW5kXG5cbiAgUnVuLmpvaW4gPSAoIHRhbG9zICkgLT5cbiAgICBmb3IgYXdhaXQgaW5uZXIgZnJvbSBzdGFydCBBLCB0YWxvcy5jb250ZXh0XG4gICAgICB5aWVsZCBpbm5lclxuXG4gIEIgPSBNYWNoaW5lLm1ha2UgXG4gICAgbmFtZTogXCJCXCJcbiAgICBncmFwaDpcbiAgICAgIHN0YXJ0OlxuICAgICAgICBkZWZhdWx0OiBcImZpcnN0XCIgXG4gICAgICBmaXJzdDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBydW46IFJ1bi5ncm93XG4gICAgICAgICAgbW92ZTogXCJqb2luXCJcbiAgICAgIGpvaW46IFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJ1bjogUnVuLmpvaW5cbiAgICAgICAgICBtb3ZlOiAkZW5kXG5cblxuICBbXG4gICAgaC50ZXN0IFwiY29tcGxldGVzIG9wZXJhdGlvblwiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIHRhbG9zID0gYXdhaXQgcnVuIEIsIHByb2R1Y3Q6IDFcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDgsIHRhbG9zLmNvbnRleHQ/LnByb2R1Y3RcblxuICAgIGgudGVzdCBcImV4cG9zZXMgbG93ZXIgb3JkZXIgdGFsb3MgaW5zdGFuY2VcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBzdGF0ZXMgPSBbXVxuICAgICAgZm9yIGF3YWl0IHRhbG9zIGZyb20gc3RhcnQgQiwgcHJvZHVjdDogMVxuICAgICAgICBzdGF0ZXMucHVzaFxuICAgICAgICAgIG5hbWU6IHRhbG9zLm5hbWVcbiAgICAgICAgICBzdGF0ZTogdGFsb3Muc3RhdGVcbiAgICBcbiAgICAgIGV4cGVjdGVkID0gWyBcbiAgICAgICAgbmFtZTogXCJCXCJcbiAgICAgICAgc3RhdGU6IFwiZmlyc3RcIlxuICAgICAgLCBcbiAgICAgICAgbmFtZTogXCJCXCJcbiAgICAgICAgc3RhdGU6IFwiam9pblwiXG4gICAgICAsIFxuICAgICAgICBuYW1lOiBcIkFcIlxuICAgICAgICBzdGF0ZTogXCJzZWNvbmRcIlxuICAgICAgLCBcbiAgICAgICAgbmFtZTogXCJBXCJcbiAgICAgICAgc3RhdGU6IFwidGhpcmRcIlxuICAgICAgLFxuICAgICAgICBuYW1lOiBcIkFcIlxuICAgICAgICBzdGF0ZTogJGVuZFxuICAgICAgLFxuICAgICAgICBuYW1lOiBcIkJcIlxuICAgICAgICBzdGF0ZTogJGVuZFxuICAgICAgXVxuICAgICAgXG4gICAgICBoLmFzc2VydC5kZWVwRXF1YWwgZXhwZWN0ZWQsIHN0YXRlc1xuICAgICAgXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBuZXN0ZWQgfSJdLCJuYW1lcyI6WyJ0ZXN0IiwiTWFjaGluZSIsIiRlbmQiLCJzdGFydCIsInJ1biIsImgiLCJBIiwiQiIsIlJ1biIsImdyb3ciLCJ0YWxvcyIsImNvbnRleHQiLCJwcm9kdWN0IiwibWFrZSIsIm5hbWUiLCJncmFwaCIsImRlZmF1bHQiLCJzZWNvbmQiLCJtb3ZlIiwidGhpcmQiLCJqb2luIiwiaW5uZXIiLCJyZWYiLCJyZXN1bHRzIiwiZmlyc3QiLCJ0YXJnZXQiLCJhc3NlcnQiLCJlcXVhbCIsImV4cGVjdGVkIiwic3RhdGVzIiwicHVzaCIsInN0YXRlIiwiZGVlcEVxdWFsIiwibmVzdGVkIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQTtBQUFBLFNBQVNDLE9BQVQsRUFBa0JDLElBQWxCLEVBQXdCQyxLQUF4QixFQUErQkMsR0FBL0IsUUFBQSxrQkFBQTtBQUNBLFlBQU9DLE9BQVAsYUFBQTtBQUdBTCxPQUFPO0lBQ1AsSUFBQU0sR0FBQUMsR0FBQUM7SUFBRUEsTUFDRTtRQUFBQyxNQUFNLGVBQUVDLEtBQUY7bUJBQ0pBLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBZCxJQUF5QixNQUFNO1FBRDNCO0lBQU47SUFHRk4sSUFBSUwsUUFBUVksSUFBUixDQUNGO1FBQUFDLE1BQU07UUFDTkMsT0FDRTtZQUFBWixPQUNFO2dCQUFBYSxTQUFTO1lBQVQ7WUFDRkMsUUFDRTtnQkFBQUQsU0FDRTtvQkFBQVosS0FBS0ksSUFBSUMsSUFBVDtvQkFDQVMsTUFBTTtnQkFETjtZQURGO1lBR0ZDLE9BQ0U7Z0JBQUFILFNBQ0U7b0JBQUFaLEtBQUtJLElBQUlDLElBQVQ7b0JBQ0FTLE1BQU1oQjtnQkFETjtZQURGO1FBUEY7SUFGRjtJQWFGTSxJQUFJWSxJQUFKLEdBQVcsZ0JBQUVWLEtBQUY7UUFDYixJQUFBVyxPQUFBQyxLQUFBQztRQUFJRCxNQUFBbkIsTUFBQUcsR0FBQUksTUFBQUMsT0FBQTtRQUFBWSxVQUFBLEVBQUE7UUFBQSxXQUFBRixTQUFBQyxJQUFBO3lCQUNFLENBQUEsTUFBTUQsS0FBQTtRQURSOztJQURTO0lBSVhkLElBQUlOLFFBQVFZLElBQVIsQ0FDRjtRQUFBQyxNQUFNO1FBQ05DLE9BQ0U7WUFBQVosT0FDRTtnQkFBQWEsU0FBUztZQUFUO1lBQ0ZRLE9BQ0U7Z0JBQUFSLFNBQ0U7b0JBQUFaLEtBQUtJLElBQUlDLElBQVQ7b0JBQ0FTLE1BQU07Z0JBRE47WUFERjtZQUdGRSxNQUNFO2dCQUFBSixTQUNFO29CQUFBWixLQUFLSSxJQUFJWSxJQUFUO29CQUNBRixNQUFNaEI7Z0JBRE47WUFERjtRQVBGO0lBRkY7V0FjRjtRQUNFRyxFQUFFTCxJQUFGLENBQU8sdUJBQXVCSyxFQUFFb0IsTUFBRixDQUFTLFFBQVE7WUFDbkQsSUFBQUgsS0FBQVo7WUFBTUEsUUFBUSxNQUFNTixJQUFJRyxHQUFHO2dCQUFBSyxTQUFTO1lBQVQ7bUJBQ3JCUCxFQUFFcUIsTUFBTSxDQUFDQyxLQUFULENBQWUsdUNBQWtCZixPQUFBLEdBQUEsS0FBQTtRQUZZO1FBSS9DUCxFQUFFTCxJQUFGLENBQU8sc0NBQXNDSyxFQUFFb0IsTUFBRixDQUFTLFFBQVE7WUFDbEUsSUFBQUcsVUFBQU4sS0FBQU8sUUFBQW5CO1lBQU1tQixTQUFTLEVBQUE7WUFDVFAsTUFBQW5CLE1BQUFJLEdBQUE7OztZQUFBLFdBQUFHLFNBQUFZLElBQUE7Z0JBQ0VPLE9BQU9DLElBQVAsQ0FDRTtvQkFBQWhCLE1BQU1KLE1BQU1JLElBQVo7b0JBQ0FpQixPQUFPckIsTUFBTXFCLEtBQUE7Z0JBRGI7WUFGSjtZQUtBSCxXQUFXO2dCQUNUO29CQUFBZCxNQUFNO29CQUNOaUIsT0FBTztnQkFEUDtnQkFHQTtvQkFBQWpCLE1BQU07b0JBQ05pQixPQUFPO2dCQURQO2dCQUdBO29CQUFBakIsTUFBTTtvQkFDTmlCLE9BQU87Z0JBRFA7Z0JBR0E7b0JBQUFqQixNQUFNO29CQUNOaUIsT0FBTztnQkFEUDtnQkFHQTtvQkFBQWpCLE1BQU07b0JBQ05pQixPQUFPN0I7Z0JBRFA7Z0JBR0E7b0JBQUFZLE1BQU07b0JBQ05pQixPQUFPN0I7Z0JBRFA7O21CQUlGRyxFQUFFcUIsTUFBTSxDQUFDTSxTQUFULENBQW1CSixVQUFVQztRQTNCK0I7O0FBM0MzRDtBQTBFUCxTQUFTN0IsUUFBQWlDLE1BQVQifQ==