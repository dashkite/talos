var add, grow, test;
import { Machine, Talos, $start, $end } from "../../src";
import { start, run, build, flow, flowWith } from "../../src/async";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        h.test("start", h.target("async", function() {
            var cycle;
            cycle = start(A);
            return h.assert(Type.isAsyncIterator(cycle));
        })),
        h.test("run while waiting on events", h.target("async", async function() {
            var cycle, events, ref, talos;
            events = [
                new Promise(function(resolve, reject) {
                    return resolve(1);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(2);
                }),
                new Promise(function(resolve, reject) {
                    return resolve(3);
                })
            ];
            cycle = start(A, {
                sum: 0
            }, events);
            talos = await run(cycle);
            return h.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        h.test("auto-run without events", h.target("async", async function() {
            var cycle, ref, talos;
            cycle = start(B, {
                product: 1
            });
            talos = await run(cycle);
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("build", h.target("async", async function() {
            var f, ref, talos;
            f = build(B);
            h.assert(Type.isFunction(f));
            talos = await f({
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("flow", h.target("async", async function() {
            var a, b, c, context, f;
            a = async function(talos, context) {
                return context.sum = await 1;
            };
            b = async function(talos, context) {
                return context.sum += await 2;
            };
            c = async function(talos, context) {
                return context.sum += await 3;
            };
            f = flow([
                a,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = await f({});
            return h.assert.equal(6, context != null ? context.sum : void 0);
        })),
        h.test("flowWith", h.target("async", async function() {
            var a, b, c, context, f, log;
            a = async function(talos, context) {
                return context.sum = await 1;
            };
            b = async function(talos, context) {
                return context.sum += await 2;
            };
            c = async function(talos, context) {
                return context.sum += await 3;
            };
            log = async function(talos) {
                var base;
                if ((base = talos.context).product == null) {
                    base.product = 1;
                }
                return talos.context.product *= await talos.context.sum;
            };
            // console.log talos.context.product
            f = flowWith(log, [
                a,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = await f({});
            h.assert.equal(6, context != null ? context.sum : void 0);
            return h.assert.equal(18, context != null ? context.product : void 0);
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=test/async/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYXN5bmMvYmFzaWMuY29mZmVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hY2hpbmUsIFRhbG9zLCAkc3RhcnQsICRlbmQgfSBmcm9tIFwiLi4vLi4vc3JjXCJcbmltcG9ydCB7IHN0YXJ0LCBydW4sIGJ1aWxkLCBmbG93LCBmbG93V2l0aCB9IGZyb20gXCIuLi8uLi9zcmMvYXN5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwiYXN5bmNcIiwgLT5cbiAgICAgIGN5Y2xlID0gc3RhcnQgQVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0FzeW5jSXRlcmF0b3IgY3ljbGVcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSB3YWl0aW5nIG9uIGV2ZW50c1wiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBldmVudHMgPSBbIFxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgMVxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgMlxuICAgICAgICBuZXcgUHJvbWlzZSAoIHJlc29sdmUsIHJlamVjdCApIC0+IHJlc29sdmUgM1xuICAgICAgXVxuICAgICAgY3ljbGUgPSBzdGFydCBBLCBzdW06IDAsIGV2ZW50c1xuICAgICAgdGFsb3MgPSBhd2FpdCBydW4gY3ljbGVcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIHRhbG9zLmNvbnRleHQ/LnN1bVxuXG4gICAgaC50ZXN0IFwiYXV0by1ydW4gd2l0aG91dCBldmVudHNcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgY3ljbGUgPSBzdGFydCBCLCBwcm9kdWN0OiAxXG4gICAgICB0YWxvcyA9IGF3YWl0IHJ1biBjeWNsZVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiYnVpbGRcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgZiA9IGJ1aWxkIEJcbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICB0YWxvcyA9IGF3YWl0IGYgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiZmxvd1wiLCBoLnRhcmdldCBcImFzeW5jXCIsIC0+XG4gICAgICBhID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtID0gYXdhaXQgMVxuICAgICAgYiA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSArPSBhd2FpdCAyXG4gICAgICBjID0gKCB0YWxvcywgY29udGV4dCApIC0+IGNvbnRleHQuc3VtICs9IGF3YWl0IDMgXG5cbiAgICAgIGYgPSBmbG93IFsgYSwgYiwgYyBdXG4gICAgICBoLmFzc2VydCBUeXBlLmlzRnVuY3Rpb24gZlxuICAgICAgY29udGV4dCA9IGF3YWl0IGYge31cbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIGNvbnRleHQ/LnN1bVxuXG4gICAgaC50ZXN0IFwiZmxvd1dpdGhcIiwgaC50YXJnZXQgXCJhc3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSA9IGF3YWl0IDFcbiAgICAgIGIgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gKz0gYXdhaXQgMlxuICAgICAgYyA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSArPSBhd2FpdCAzIFxuICAgICAgbG9nID0gKCB0YWxvcyApIC0+XG4gICAgICAgIHRhbG9zLmNvbnRleHQucHJvZHVjdCA/PSAxIFxuICAgICAgICB0YWxvcy5jb250ZXh0LnByb2R1Y3QgKj0gYXdhaXQgdGFsb3MuY29udGV4dC5zdW1cbiAgICAgICAgIyBjb25zb2xlLmxvZyB0YWxvcy5jb250ZXh0LnByb2R1Y3RcblxuICAgICAgZiA9IGZsb3dXaXRoIGxvZywgWyBhLCBiLCBjIF1cbiAgICAgIGguYXNzZXJ0IFR5cGUuaXNGdW5jdGlvbiBmXG4gICAgICBjb250ZXh0ID0gYXdhaXQgZiB7fVxuICAgICAgaC5hc3NlcnQuZXF1YWwgNiwgY29udGV4dD8uc3VtXG4gICAgICBoLmFzc2VydC5lcXVhbCAxOCwgY29udGV4dD8ucHJvZHVjdFxuXG4gIF1cblxuZXhwb3J0IHsgdGVzdCBhcyBiYXNpYyB9Il0sIm5hbWVzIjpbImFkZCIsImdyb3ciLCJ0ZXN0IiwiTWFjaGluZSIsIlRhbG9zIiwiJHN0YXJ0IiwiJGVuZCIsInN0YXJ0IiwicnVuIiwiYnVpbGQiLCJmbG93IiwiZmxvd1dpdGgiLCJUeXBlIiwiaCIsInRhbG9zIiwiZXZlbnQiLCJjb250ZXh0Iiwic3VtIiwicHJvZHVjdCIsIkEiLCJCIiwibWFrZSIsImhvbGQiLCJmaXJzdCIsInNlY29uZCIsImVuZCIsInRhcmdldCIsImN5Y2xlIiwiYXNzZXJ0IiwiaXNBc3luY0l0ZXJhdG9yIiwiZXZlbnRzIiwicmVmIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcXVhbCIsImYiLCJpc0Z1bmN0aW9uIiwiYSIsImIiLCJjIiwibG9nIiwiYmFzZSIsImJhc2ljIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSxLQUFBQyxNQUFBQztBQUFBLFNBQVNDLE9BQVQsRUFBa0JDLEtBQWxCLEVBQXlCQyxNQUF6QixFQUFpQ0MsSUFBakMsUUFBQSxZQUFBO0FBQ0EsU0FBU0MsS0FBVCxFQUFnQkMsR0FBaEIsRUFBcUJDLEtBQXJCLEVBQTRCQyxJQUE1QixFQUFrQ0MsUUFBbEMsUUFBQSxrQkFBQTtBQUNBLFlBQU9DLFVBQVAscUJBQUE7QUFDQSxZQUFPQyxPQUFQLGFBQUE7QUFFQWIsTUFBTSxTQUFFYyxLQUFGLEVBQVNDLEtBQVQ7V0FDSkQsTUFBTUUsT0FBTyxDQUFDQyxHQUFkLElBQXFCRjtBQURqQjtBQUVOZCxPQUFPLFNBQUVhLEtBQUY7V0FDTEEsTUFBTUUsT0FBTyxDQUFDRSxPQUFkLElBQXlCO0FBRHBCO0FBSVBoQixPQUFPO0lBQ1AsSUFBQWlCLEdBQUFDO0lBQUVELElBQUloQixRQUFRa0IsSUFBUixDQUNGO1FBQUFkLE9BQ0U7WUFBQWUsTUFDRTtnQkFBQWQsS0FBS1I7WUFBTDtRQURGO1FBRUZzQixNQUNFO1lBQUFBLE1BQ0U7Z0JBQUFkLEtBQUtSO1lBQUw7UUFERjtJQUpGO0lBT0ZvQixJQUFJakIsUUFBUWtCLElBQVIsQ0FDRjtRQUFBZCxPQUNFO1lBQUFnQixPQUNFO2dCQUFBZixLQUFLUDtZQUFMO1FBREY7UUFFRnNCLE9BQ0U7WUFBQUMsUUFDRTtnQkFBQWhCLEtBQUtQO1lBQUw7UUFERjtRQUVGdUIsUUFDRTtZQUFBQyxLQUNFO2dCQUFBakIsS0FBS1A7WUFBTDtRQURGO0lBUEY7V0FXRjtRQUNFWSxFQUFFWCxJQUFGLENBQU8sU0FBU1csRUFBRWEsTUFBRixDQUFTLFNBQVM7WUFDdEMsSUFBQUM7WUFBTUEsUUFBUXBCLE1BQU1ZO21CQUNkTixFQUFFZSxNQUFGLENBQVNoQixLQUFLaUIsZUFBTCxDQUFxQkY7UUFGRTtRQUlsQ2QsRUFBRVgsSUFBRixDQUFPLCtCQUErQlcsRUFBRWEsTUFBRixDQUFTLFNBQVM7WUFDNUQsSUFBQUMsT0FBQUcsUUFBQUMsS0FBQWpCO1lBQU1nQixTQUFTO2dCQUNQLElBQUlFLFFBQVEsU0FBRUMsT0FBRixFQUFXQyxNQUFYOzJCQUF1QkQsUUFBUTtnQkFBL0I7Z0JBQ1osSUFBSUQsUUFBUSxTQUFFQyxPQUFGLEVBQVdDLE1BQVg7MkJBQXVCRCxRQUFRO2dCQUEvQjtnQkFDWixJQUFJRCxRQUFRLFNBQUVDLE9BQUYsRUFBV0MsTUFBWDsyQkFBdUJELFFBQVE7Z0JBQS9COztZQUVkTixRQUFRcEIsTUFBTVksR0FBRztnQkFBQUYsS0FBSztZQUFMLEdBQVFhO1lBQ3pCaEIsUUFBUSxNQUFNTixJQUFJbUI7bUJBQ2xCZCxFQUFFZSxNQUFNLENBQUNPLEtBQVQsQ0FBZSx1Q0FBa0JsQixHQUFBLEdBQUEsS0FBQTtRQVJxQjtRQVV4REosRUFBRVgsSUFBRixDQUFPLDJCQUEyQlcsRUFBRWEsTUFBRixDQUFTLFNBQVM7WUFDeEQsSUFBQUMsT0FBQUksS0FBQWpCO1lBQU1hLFFBQVFwQixNQUFNYSxHQUFHO2dCQUFBRixTQUFTO1lBQVQ7WUFDakJKLFFBQVEsTUFBTU4sSUFBSW1CO21CQUNsQmQsRUFBRWUsTUFBTSxDQUFDTyxLQUFULENBQWUsdUNBQWtCakIsT0FBQSxHQUFBLEtBQUE7UUFIaUI7UUFLcERMLEVBQUVYLElBQUYsQ0FBTyxTQUFTVyxFQUFFYSxNQUFGLENBQVMsU0FBUztZQUN0QyxJQUFBVSxHQUFBTCxLQUFBakI7WUFBTXNCLElBQUkzQixNQUFNVztZQUNWUCxFQUFFZSxNQUFGLENBQVNoQixLQUFLeUIsVUFBTCxDQUFnQkQ7WUFDekJ0QixRQUFRLE1BQU1zQixFQUFFO2dCQUFBbEIsU0FBUztZQUFUO21CQUNoQkwsRUFBRWUsTUFBTSxDQUFDTyxLQUFULENBQWUsdUNBQWtCakIsT0FBQSxHQUFBLEtBQUE7UUFKRDtRQU1sQ0wsRUFBRVgsSUFBRixDQUFPLFFBQVFXLEVBQUVhLE1BQUYsQ0FBUyxTQUFTO1lBQ3JDLElBQUFZLEdBQUFDLEdBQUFDLEdBQUF4QixTQUFBb0I7WUFBTUUsSUFBSSxlQUFFeEIsS0FBRixFQUFTRSxPQUFUO3VCQUFzQkEsUUFBUUMsR0FBUixHQUFjLE1BQU07WUFBMUM7WUFDSnNCLElBQUksZUFBRXpCLEtBQUYsRUFBU0UsT0FBVDt1QkFBc0JBLFFBQVFDLEdBQVIsSUFBZSxNQUFNO1lBQTNDO1lBQ0p1QixJQUFJLGVBQUUxQixLQUFGLEVBQVNFLE9BQVQ7dUJBQXNCQSxRQUFRQyxHQUFSLElBQWUsTUFBTTtZQUEzQztZQUVKbUIsSUFBSTFCLEtBQUs7Z0JBQUU0QjtnQkFBR0M7Z0JBQUdDO2FBQWI7WUFDSjNCLEVBQUVlLE1BQUYsQ0FBU2hCLEtBQUt5QixVQUFMLENBQWdCRDtZQUN6QnBCLFVBQVUsTUFBTW9CLEVBQUUsQ0FBQTttQkFDbEJ2QixFQUFFZSxNQUFNLENBQUNPLEtBQVQsQ0FBZSxxQkFBR25CLFFBQVNDLEdBQUEsR0FBQSxLQUFBO1FBUkk7UUFVakNKLEVBQUVYLElBQUYsQ0FBTyxZQUFZVyxFQUFFYSxNQUFGLENBQVMsU0FBUztZQUN6QyxJQUFBWSxHQUFBQyxHQUFBQyxHQUFBeEIsU0FBQW9CLEdBQUFLO1lBQU1ILElBQUksZUFBRXhCLEtBQUYsRUFBU0UsT0FBVDt1QkFBc0JBLFFBQVFDLEdBQVIsR0FBYyxNQUFNO1lBQTFDO1lBQ0pzQixJQUFJLGVBQUV6QixLQUFGLEVBQVNFLE9BQVQ7dUJBQXNCQSxRQUFRQyxHQUFSLElBQWUsTUFBTTtZQUEzQztZQUNKdUIsSUFBSSxlQUFFMUIsS0FBRixFQUFTRSxPQUFUO3VCQUFzQkEsUUFBUUMsR0FBUixJQUFlLE1BQU07WUFBM0M7WUFDSndCLE1BQU0sZUFBRTNCLEtBQUY7Z0JBQ1osSUFBQTRCOzt5QkFBc0J4QixPQUFBLEdBQVc7O3VCQUN6QkosTUFBTUUsT0FBTyxDQUFDRSxPQUFkLElBQXlCLE1BQU1KLE1BQU1FLE9BQU8sQ0FBQ0MsR0FBcEI7WUFGckI7O1lBS05tQixJQUFJekIsU0FBUzhCLEtBQUs7Z0JBQUVIO2dCQUFHQztnQkFBR0M7YUFBdEI7WUFDSjNCLEVBQUVlLE1BQUYsQ0FBU2hCLEtBQUt5QixVQUFMLENBQWdCRDtZQUN6QnBCLFVBQVUsTUFBTW9CLEVBQUUsQ0FBQTtZQUNsQnZCLEVBQUVlLE1BQU0sQ0FBQ08sS0FBVCxDQUFlLHFCQUFHbkIsUUFBU0MsR0FBQSxHQUFBLEtBQUE7bUJBQzNCSixFQUFFZSxNQUFNLENBQUNPLEtBQVQsQ0FBZSxzQkFBSW5CLFFBQVNFLE9BQUEsR0FBQSxLQUFBO1FBYk87O0FBekRsQztBQTBFUCxTQUFTaEIsUUFBQXlDLEtBQVQifQ==