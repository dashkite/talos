var _debug, _step, debug, matchEdge, matchVertex, move, run, step;
import * as Type from "@dashkite/joy/type";
import { negate } from "@dashkite/joy/predicate";
import { generic } from "@dashkite/joy/generic";
import { Graph, Talos } from "../containers";
import * as Errors from "../containers/errors";
matchVertex = function(graph, talos) {
    var vertex;
    vertex = graph.get(talos);
    if (vertex == null) {
        talos.throw(Errors.InvalidState.make("talos state is not in graph"));
    }
    return vertex;
};
matchEdge = function(vertex, talos, transforms) {
    var edge, i, len, ref;
    ref = vertex.edges;
    for(i = 0, len = ref.length; i < len; i++){
        edge = ref[i];
        if (edge.accept(talos, ...transforms) === true) {
            return edge;
        }
    }
};
run = function(edge, talos, transforms) {
    var error;
    if (edge.run != null) {
        try {
            return edge.run(talos, ...transforms);
        } catch (error1) {
            error = error1;
            return talos.throw(Errors.FailedRun.make(error, "encountered an error while running edge function"));
        }
    }
};
move = function(edge, talos, transforms) {
    var error;
    try {
        return edge.move(talos, ...transforms);
    } catch (error1) {
        error = error1;
        return talos.throw(Errors.FailedMove.make(error, "encountered an error while moving states"));
    }
};
step = generic({
    name: "step talos",
    default: function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        throw new Error(`step: input is malformed ${JSON.stringify(args)}`);
    }
});
generic(step, Graph.isType, Talos.isType, Type.isAny, function(graph, talos) {
    for(var _len = arguments.length, transforms = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        transforms[_key - 2] = arguments[_key];
    }
    return _step(graph, talos, transforms);
});
generic(step, Graph.isType, Talos.isType, function(graph, talos) {
    return _step(graph, talos, []);
});
generic(step, Graph.isType, negate(Talos.isType), function(graph) {
    for(var _len = arguments.length, transforms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        transforms[_key - 1] = arguments[_key];
    }
    return _step(graph, Talos.make(), ...transforms);
});
_step = function(graph, talos, transforms) {
    var edge, vertex;
    vertex = matchVertex(graph, talos);
    if (talos.halted) {
        return talos;
    }
    edge = matchEdge(vertex, talos, transforms);
    if (edge == null) {
        return talos;
    }
    if (talos.halted) {
        return talos;
    }
    run(edge, talos, transforms);
    if (talos.halted) {
        return talos;
    }
    move(edge, talos, transforms);
    return talos;
};
debug = generic({
    name: "debug step talos",
    default: function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        throw new Error(`debug step: input is malformed ${JSON.stringify(args)}`);
    }
});
generic(debug, Graph.isType, Talos.isType, Type.isAny, function(graph, talos) {
    for(var _len = arguments.length, transforms = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        transforms[_key - 2] = arguments[_key];
    }
    return _debug(graph, talos, transforms);
});
generic(debug, Graph.isType, Talos.isType, function(graph, talos) {
    return _debug(graph, talos, []);
});
generic(debug, Graph.isType, negate(Talos.isType), function(graph) {
    for(var _len = arguments.length, transforms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        transforms[_key - 1] = arguments[_key];
    }
    return _debug(graph, Talos.make(), transforms);
});
_debug = function(graph, talos, transforms) {
    var edge, vertex;
    console.log("starting step", {
        graph,
        talos,
        transforms
    });
    vertex = matchVertex(graph, talos);
    if (talos.halted) {
        console.error("encountered error matching vertex", talos.error.error, talos);
        return talos;
    } else {
        console.log("vertex matched", {
            vertex,
            talos
        });
    }
    edge = matchEdge(vertex, talos, transforms);
    if (edge == null) {
        console.log("no edge match, ignoring transforms");
        return talos;
    }
    if (talos.halted) {
        console.error("encountered error matching edge", talos.error.error, talos);
        return talos;
    } else {
        console.log("edge matched", {
            edge,
            talos
        });
    }
    run(edge, talos, transforms);
    if (talos.halted) {
        console.error("encountered error running edge function", talos.error.error, talos);
        return talos;
    } else {
        console.log("edge function complete", {
            talos
        });
    }
    move(edge, talos, transforms);
    if (talos.halted) {
        console.error("encountered error running move function", talos.error.error, talos);
        return talos;
    } else {
        console.log("talos move complete", {
            talos
        });
    }
    return talos;
};
export { step, debug, matchVertex, matchEdge, run, move }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=src/stable/sync.coffee

//# sourceMappingURL=data:application/json;base64,