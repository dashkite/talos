var add, grow, test;
import { Machine, Talos, $start, $end } from "../../src";
import { start, run, build, pipe } from "../../src/sync";
import * as Type from "@dashkite/joy/type";
import * as h from "../helpers";
add = function(talos, event) {
    return talos.context.sum += event;
};
grow = function(talos) {
    return talos.context.product *= 2;
};
test = function() {
    var A, B;
    A = Machine.make({
        start: {
            hold: {
                run: add
            }
        },
        hold: {
            hold: {
                run: add
            }
        }
    });
    B = Machine.make({
        start: {
            first: {
                run: grow
            }
        },
        first: {
            second: {
                run: grow
            }
        },
        second: {
            end: {
                run: grow
            }
        }
    });
    return [
        h.test("start", h.target("sync", function() {
            var talos;
            talos = start(A);
            return h.assert(Talos.isType(talos));
        })),
        h.test("run while waiting on events", h.target("sync", function() {
            var events, ref, talos;
            events = [
                1,
                2,
                3
            ];
            talos = start(A);
            run(talos, {
                sum: 0
            }, events);
            return h.assert.equal(6, (ref = talos.context) != null ? ref.sum : void 0);
        })),
        h.test("auto-run without events", h.target("sync", function() {
            var ref, talos;
            talos = start(B);
            run(talos, {
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("build", h.target("sync", function() {
            var f, ref, talos;
            f = build(B);
            h.assert(Type.isFunction(f));
            talos = f({
                product: 1
            });
            return h.assert.equal(8, (ref = talos.context) != null ? ref.product : void 0);
        })),
        h.test("pipe", h.target("sync", function() {
            var a, b, c, context, f;
            a = function(talos, context) {
                return context.sum = 1;
            };
            b = function(talos, context) {
                return context.sum += 2;
            };
            c = function(talos, context) {
                return context.sum += 3;
            };
            f = pipe([
                a,
                b,
                c
            ]);
            h.assert(Type.isFunction(f));
            context = f({});
            return h.assert.equal(6, context != null ? context.sum : void 0);
        }))
    ];
};
export { test as basic }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC9zeW5jL2Jhc2ljLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7O0FBQUEsT0FBQTtFQUFTLE9BQVQ7RUFBa0IsS0FBbEI7RUFBeUIsTUFBekI7RUFBaUMsSUFBakM7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0VBQWdCLEdBQWhCO0VBQXFCLEtBQXJCO0VBQTRCLElBQTVCO0NBQUEsTUFBQTs7QUFDQSxPQUFPLENBQUEsUUFBUCxNQUFBOztBQUNBLE9BQU8sQ0FBQSxLQUFQLE1BQUE7O0FBRUEsR0FBQSxHQUFNLFFBQUEsQ0FBRSxLQUFGLEVBQVMsS0FBVCxDQUFBO1NBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFkLElBQXFCO0FBRGpCOztBQUVOLElBQUEsR0FBTyxRQUFBLENBQUUsS0FBRixDQUFBO1NBQ0wsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFkLElBQXlCO0FBRHBCOztBQUlQLElBQUEsR0FBTyxRQUFBLENBQUEsQ0FBQTtBQUNQLE1BQUEsQ0FBQSxFQUFBO0VBQUUsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxJQUFSLENBQ0Y7SUFBQSxLQUFBLEVBQ0U7TUFBQSxJQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGLENBREY7SUFHQSxJQUFBLEVBQ0U7TUFBQSxJQUFBLEVBQ0U7UUFBQSxHQUFBLEVBQUs7TUFBTDtJQURGO0VBSkYsQ0FERTtFQVFKLENBQUEsR0FBSSxPQUFPLENBQUMsSUFBUixDQUNGO0lBQUEsS0FBQSxFQUNFO01BQUEsS0FBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERixDQURGO0lBR0EsS0FBQSxFQUNFO01BQUEsTUFBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERixDQUpGO0lBTUEsTUFBQSxFQUNFO01BQUEsR0FBQSxFQUNFO1FBQUEsR0FBQSxFQUFLO01BQUw7SUFERjtFQVBGLENBREU7U0FZSjtJQUNFLENBQUMsQ0FBQyxJQUFGLENBQU8sT0FBUDtJQUFnQixDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQ7SUFBaUIsUUFBQSxDQUFBLENBQUE7QUFDckMsVUFBQTtNQUFNLEtBQUEsR0FBUSxLQUFBLENBQU0sQ0FBTjthQUNSLENBQUMsQ0FBQyxNQUFGLENBQVMsS0FBSyxDQUFDLE1BQU4sQ0FBYSxLQUFiLENBQVQ7SUFGK0IsQ0FBakIsQ0FBaEIsQ0FERjtJQUtFLENBQUMsQ0FBQyxJQUFGLENBQU8sNkJBQVA7SUFBc0MsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxNQUFUO0lBQWlCLFFBQUEsQ0FBQSxDQUFBO0FBQzNELFVBQUEsTUFBQTtJQUFBLEdBQUE7SUFBQTtNQUFNLE1BQUEsR0FBUyxDQUFFLENBQUY7SUFBSyxDQUFMO0lBQVEsQ0FBUjtNQUNULEtBQUEsR0FBUSxLQUFBLENBQU0sQ0FBTjtNQUNSLEdBQUEsQ0FBSSxLQUFKO0lBQVc7UUFBQSxHQUFBLEVBQUs7TUFBTCxDQUFYO0lBQW1CLE1BQW5CO2FBQ0EsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsQ0FBZjt1Q0FBK0IsQ0FBRSxZQUFqQztJQUpxRCxDQUFqQixDQUF0QyxDQUxGO0lBV0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyx5QkFBUDtJQUFrQyxDQUFDLENBQUMsTUFBRixDQUFTLE1BQVQ7SUFBaUIsUUFBQSxDQUFBLENBQUE7QUFDdkQsVUFBQSxHQUFBO0lBQUE7TUFBTSxLQUFBLEdBQVEsS0FBQSxDQUFNLENBQU47TUFDUixHQUFBLENBQUksS0FBSjtJQUFXO1FBQUEsT0FBQSxFQUFTO01BQVQsQ0FBWDthQUNBLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQWY7dUNBQStCLENBQUUsZ0JBQWpDO0lBSGlELENBQWpCLENBQWxDLENBWEY7SUFnQkUsQ0FBQyxDQUFDLElBQUYsQ0FBTyxPQUFQO0lBQWdCLENBQUMsQ0FBQyxNQUFGLENBQVMsTUFBVDtJQUFpQixRQUFBLENBQUEsQ0FBQTtBQUNyQyxVQUFBLENBQUE7SUFBQSxHQUFBO0lBQUE7TUFBTSxDQUFBLEdBQUksS0FBQSxDQUFNLENBQU47TUFDSixDQUFDLENBQUMsTUFBRixDQUFTLElBQUksQ0FBQyxVQUFMLENBQWdCLENBQWhCLENBQVQ7TUFDQSxLQUFBLEdBQVEsQ0FBQSxDQUFFO1FBQUEsT0FBQSxFQUFTO01BQVQsQ0FBRjthQUNSLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQWY7dUNBQStCLENBQUUsZ0JBQWpDO0lBSitCLENBQWpCLENBQWhCLENBaEJGO0lBc0JFLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBUDtJQUFlLENBQUMsQ0FBQyxNQUFGLENBQVMsTUFBVDtJQUFpQixRQUFBLENBQUEsQ0FBQTtBQUNwQyxVQUFBLENBQUE7SUFBQSxDQUFBO0lBQUEsQ0FBQTtJQUFBLE9BQUE7SUFBQTtNQUFNLENBQUEsR0FBSSxRQUFBLENBQUUsS0FBRjtJQUFTLE9BQVQsQ0FBQTtlQUFzQixPQUFPLENBQUMsR0FBUixHQUFjO01BQXBDO01BQ0osQ0FBQSxHQUFJLFFBQUEsQ0FBRSxLQUFGO0lBQVMsT0FBVCxDQUFBO2VBQXNCLE9BQU8sQ0FBQyxHQUFSLElBQWU7TUFBckM7TUFDSixDQUFBLEdBQUksUUFBQSxDQUFFLEtBQUY7SUFBUyxPQUFULENBQUE7ZUFBc0IsT0FBTyxDQUFDLEdBQVIsSUFBZTtNQUFyQztNQUVKLENBQUEsR0FBSSxJQUFBLENBQUssQ0FBRSxDQUFGO0lBQUssQ0FBTDtJQUFRLENBQVIsQ0FBTDtNQUNKLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBSSxDQUFDLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBVDtNQUNBLE9BQUEsR0FBVSxDQUFBLENBQUUsQ0FBQSxDQUFGO2FBQ1YsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsQ0FBZjtzQkFBa0IsT0FBTyxDQUFFLFlBQTNCO0lBUjhCLENBQWpCLENBQWYsQ0F0QkY7O0FBckJLOztBQXVEUCxPQUFBO0VBQVMsSUFBQSxTQUFUIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0IHsgc3RhcnQsIHJ1biwgYnVpbGQsIHBpcGUgfSBmcm9tIFwiLi4vLi4vc3JjL3N5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBzdGFydCBBXG4gICAgICBoLmFzc2VydCBUYWxvcy5pc1R5cGUgdGFsb3NcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSB3YWl0aW5nIG9uIGV2ZW50c1wiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgMSwgMiwgMyBdXG4gICAgICB0YWxvcyA9IHN0YXJ0IEFcbiAgICAgIHJ1biB0YWxvcywgc3VtOiAwLCBldmVudHNcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIHRhbG9zLmNvbnRleHQ/LnN1bVxuXG4gICAgaC50ZXN0IFwiYXV0by1ydW4gd2l0aG91dCBldmVudHNcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IHN0YXJ0IEJcbiAgICAgIHJ1biB0YWxvcywgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiYnVpbGRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBmID0gYnVpbGQgQlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIHRhbG9zID0gZiBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJwaXBlXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gKz0gMlxuICAgICAgYyA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSArPSAzIFxuXG4gICAgICBmID0gcGlwZSBbIGEsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBmIHt9XG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCBjb250ZXh0Py5zdW1cblxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSJdfQ==
 //# sourceURL=test/sync/basic.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc3luYy9iYXNpYy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFjaGluZSwgVGFsb3MsICRzdGFydCwgJGVuZCB9IGZyb20gXCIuLi8uLi9zcmNcIlxuaW1wb3J0IHsgc3RhcnQsIHJ1biwgYnVpbGQsIHBpcGUgfSBmcm9tIFwiLi4vLi4vc3JjL3N5bmNcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCAqIGFzIGggZnJvbSBcIi4uL2hlbHBlcnNcIlxuXG5hZGQgPSAoIHRhbG9zLCBldmVudCApIC0+XG4gIHRhbG9zLmNvbnRleHQuc3VtICs9IGV2ZW50XG5ncm93ID0gKCB0YWxvcyApIC0+XG4gIHRhbG9zLmNvbnRleHQucHJvZHVjdCAqPSAyXG5cblxudGVzdCA9IC0+XG4gIEEgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGhvbGQ6IFxuICAgICAgICBydW46IGFkZFxuICAgIGhvbGQ6XG4gICAgICBob2xkOlxuICAgICAgICBydW46IGFkZFxuXG4gIEIgPSBNYWNoaW5lLm1ha2VcbiAgICBzdGFydDpcbiAgICAgIGZpcnN0OiBcbiAgICAgICAgcnVuOiBncm93XG4gICAgZmlyc3Q6XG4gICAgICBzZWNvbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuICAgIHNlY29uZDogXG4gICAgICBlbmQ6XG4gICAgICAgIHJ1bjogZ3Jvd1xuXG5cbiAgW1xuICAgIGgudGVzdCBcInN0YXJ0XCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgdGFsb3MgPSBzdGFydCBBXG4gICAgICBoLmFzc2VydCBUYWxvcy5pc1R5cGUgdGFsb3NcblxuICAgIGgudGVzdCBcInJ1biB3aGlsZSB3YWl0aW5nIG9uIGV2ZW50c1wiLCBoLnRhcmdldCBcInN5bmNcIiwgLT5cbiAgICAgIGV2ZW50cyA9IFsgMSwgMiwgMyBdXG4gICAgICB0YWxvcyA9IHN0YXJ0IEFcbiAgICAgIHJ1biB0YWxvcywgc3VtOiAwLCBldmVudHNcbiAgICAgIGguYXNzZXJ0LmVxdWFsIDYsIHRhbG9zLmNvbnRleHQ/LnN1bVxuXG4gICAgaC50ZXN0IFwiYXV0by1ydW4gd2l0aG91dCBldmVudHNcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICB0YWxvcyA9IHN0YXJ0IEJcbiAgICAgIHJ1biB0YWxvcywgcHJvZHVjdDogMVxuICAgICAgaC5hc3NlcnQuZXF1YWwgOCwgdGFsb3MuY29udGV4dD8ucHJvZHVjdFxuXG4gICAgaC50ZXN0IFwiYnVpbGRcIiwgaC50YXJnZXQgXCJzeW5jXCIsIC0+XG4gICAgICBmID0gYnVpbGQgQlxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIHRhbG9zID0gZiBwcm9kdWN0OiAxXG4gICAgICBoLmFzc2VydC5lcXVhbCA4LCB0YWxvcy5jb250ZXh0Py5wcm9kdWN0XG5cbiAgICBoLnRlc3QgXCJwaXBlXCIsIGgudGFyZ2V0IFwic3luY1wiLCAtPlxuICAgICAgYSA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSA9IDFcbiAgICAgIGIgPSAoIHRhbG9zLCBjb250ZXh0ICkgLT4gY29udGV4dC5zdW0gKz0gMlxuICAgICAgYyA9ICggdGFsb3MsIGNvbnRleHQgKSAtPiBjb250ZXh0LnN1bSArPSAzIFxuXG4gICAgICBmID0gcGlwZSBbIGEsIGIsIGMgXVxuICAgICAgaC5hc3NlcnQgVHlwZS5pc0Z1bmN0aW9uIGZcbiAgICAgIGNvbnRleHQgPSBmIHt9XG4gICAgICBoLmFzc2VydC5lcXVhbCA2LCBjb250ZXh0Py5zdW1cblxuICBdXG5cbmV4cG9ydCB7IHRlc3QgYXMgYmFzaWMgfSJdLCJuYW1lcyI6WyJhZGQiLCJncm93IiwidGVzdCIsIk1hY2hpbmUiLCJUYWxvcyIsIiRzdGFydCIsIiRlbmQiLCJzdGFydCIsInJ1biIsImJ1aWxkIiwicGlwZSIsIlR5cGUiLCJoIiwidGFsb3MiLCJldmVudCIsImNvbnRleHQiLCJzdW0iLCJwcm9kdWN0IiwiQSIsIkIiLCJtYWtlIiwiaG9sZCIsImZpcnN0Iiwic2Vjb25kIiwiZW5kIiwidGFyZ2V0IiwiYXNzZXJ0IiwiaXNUeXBlIiwiZXZlbnRzIiwicmVmIiwiZXF1YWwiLCJmIiwiaXNGdW5jdGlvbiIsImEiLCJiIiwiYyIsImJhc2ljIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQSxLQUFBQyxNQUFBQztBQUFBLFNBQVNDLE9BQVQsRUFBa0JDLEtBQWxCLEVBQXlCQyxNQUF6QixFQUFpQ0MsSUFBakMsUUFBQSxZQUFBO0FBQ0EsU0FBU0MsS0FBVCxFQUFnQkMsR0FBaEIsRUFBcUJDLEtBQXJCLEVBQTRCQyxJQUE1QixRQUFBLGlCQUFBO0FBQ0EsWUFBT0MsVUFBUCxxQkFBQTtBQUNBLFlBQU9DLE9BQVAsYUFBQTtBQUVBWixNQUFNLFNBQUVhLEtBQUYsRUFBU0MsS0FBVDtXQUNKRCxNQUFNRSxPQUFPLENBQUNDLEdBQWQsSUFBcUJGO0FBRGpCO0FBRU5iLE9BQU8sU0FBRVksS0FBRjtXQUNMQSxNQUFNRSxPQUFPLENBQUNFLE9BQWQsSUFBeUI7QUFEcEI7QUFJUGYsT0FBTztJQUNQLElBQUFnQixHQUFBQztJQUFFRCxJQUFJZixRQUFRaUIsSUFBUixDQUNGO1FBQUFiLE9BQ0U7WUFBQWMsTUFDRTtnQkFBQWIsS0FBS1I7WUFBTDtRQURGO1FBRUZxQixNQUNFO1lBQUFBLE1BQ0U7Z0JBQUFiLEtBQUtSO1lBQUw7UUFERjtJQUpGO0lBT0ZtQixJQUFJaEIsUUFBUWlCLElBQVIsQ0FDRjtRQUFBYixPQUNFO1lBQUFlLE9BQ0U7Z0JBQUFkLEtBQUtQO1lBQUw7UUFERjtRQUVGcUIsT0FDRTtZQUFBQyxRQUNFO2dCQUFBZixLQUFLUDtZQUFMO1FBREY7UUFFRnNCLFFBQ0U7WUFBQUMsS0FDRTtnQkFBQWhCLEtBQUtQO1lBQUw7UUFERjtJQVBGO1dBV0Y7UUFDRVcsRUFBRVYsSUFBRixDQUFPLFNBQVNVLEVBQUVhLE1BQUYsQ0FBUyxRQUFRO1lBQ3JDLElBQUFaO1lBQU1BLFFBQVFOLE1BQU1XO21CQUNkTixFQUFFYyxNQUFGLENBQVN0QixNQUFNdUIsTUFBTixDQUFhZDtRQUZTO1FBSWpDRCxFQUFFVixJQUFGLENBQU8sK0JBQStCVSxFQUFFYSxNQUFGLENBQVMsUUFBUTtZQUMzRCxJQUFBRyxRQUFBQyxLQUFBaEI7WUFBTWUsU0FBUztnQkFBRTtnQkFBRztnQkFBRzthQUFSO1lBQ1RmLFFBQVFOLE1BQU1XO1lBQ2RWLElBQUlLLE9BQU87Z0JBQUFHLEtBQUs7WUFBTCxHQUFRWTttQkFDbkJoQixFQUFFYyxNQUFNLENBQUNJLEtBQVQsQ0FBZSx1Q0FBa0JkLEdBQUEsR0FBQSxLQUFBO1FBSm9CO1FBTXZESixFQUFFVixJQUFGLENBQU8sMkJBQTJCVSxFQUFFYSxNQUFGLENBQVMsUUFBUTtZQUN2RCxJQUFBSSxLQUFBaEI7WUFBTUEsUUFBUU4sTUFBTVk7WUFDZFgsSUFBSUssT0FBTztnQkFBQUksU0FBUztZQUFUO21CQUNYTCxFQUFFYyxNQUFNLENBQUNJLEtBQVQsQ0FBZSx1Q0FBa0JiLE9BQUEsR0FBQSxLQUFBO1FBSGdCO1FBS25ETCxFQUFFVixJQUFGLENBQU8sU0FBU1UsRUFBRWEsTUFBRixDQUFTLFFBQVE7WUFDckMsSUFBQU0sR0FBQUYsS0FBQWhCO1lBQU1rQixJQUFJdEIsTUFBTVU7WUFDVlAsRUFBRWMsTUFBRixDQUFTZixLQUFLcUIsVUFBTCxDQUFnQkQ7WUFDekJsQixRQUFRa0IsRUFBRTtnQkFBQWQsU0FBUztZQUFUO21CQUNWTCxFQUFFYyxNQUFNLENBQUNJLEtBQVQsQ0FBZSx1Q0FBa0JiLE9BQUEsR0FBQSxLQUFBO1FBSkY7UUFNakNMLEVBQUVWLElBQUYsQ0FBTyxRQUFRVSxFQUFFYSxNQUFGLENBQVMsUUFBUTtZQUNwQyxJQUFBUSxHQUFBQyxHQUFBQyxHQUFBcEIsU0FBQWdCO1lBQU1FLElBQUksU0FBRXBCLEtBQUYsRUFBU0UsT0FBVDt1QkFBc0JBLFFBQVFDLEdBQVIsR0FBYztZQUFwQztZQUNKa0IsSUFBSSxTQUFFckIsS0FBRixFQUFTRSxPQUFUO3VCQUFzQkEsUUFBUUMsR0FBUixJQUFlO1lBQXJDO1lBQ0ptQixJQUFJLFNBQUV0QixLQUFGLEVBQVNFLE9BQVQ7dUJBQXNCQSxRQUFRQyxHQUFSLElBQWU7WUFBckM7WUFFSmUsSUFBSXJCLEtBQUs7Z0JBQUV1QjtnQkFBR0M7Z0JBQUdDO2FBQWI7WUFDSnZCLEVBQUVjLE1BQUYsQ0FBU2YsS0FBS3FCLFVBQUwsQ0FBZ0JEO1lBQ3pCaEIsVUFBVWdCLEVBQUUsQ0FBQTttQkFDWm5CLEVBQUVjLE1BQU0sQ0FBQ0ksS0FBVCxDQUFlLHFCQUFHZixRQUFTQyxHQUFBLEdBQUEsS0FBQTtRQVJHOztBQTNDN0I7QUF1RFAsU0FBU2QsUUFBQWtDLEtBQVQifQ==