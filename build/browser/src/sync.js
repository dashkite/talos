var Step, build, pipe, run, start;
import { generic } from "@dashkite/joy/generic";
import * as Type from "@dashkite/joy/type";
import log from "@dashkite/kaiko";
import { Machine } from "./machine";
import { Talos } from "./talos";
Step = {
    matchVertex: function(talos) {
        var vertex;
        vertex = talos.machine.graph[talos.state];
        if (vertex == null) {
            talos.catch(new Error("talos state is not in machine graph"));
        }
        return vertex;
    },
    matchEdge: function(vertex, talos, event) {
        var edge, error, i, len, ref;
        ref = vertex.edges;
        for(i = 0, len = ref.length; i < len; i++){
            edge = ref[i];
            try {
                if (edge.when(talos, event) === true) {
                    return edge;
                }
            } catch (error1) {
                error = error1;
                return talos.catch(error);
            }
        }
        return talos.catch(new Error("no matching when condition"));
    },
    run: function(edge, talos, event) {
        var error;
        if (edge.run != null) {
            try {
                return edge.run(talos, event);
            } catch (error1) {
                error = error1;
                return talos.catch(error);
            }
        }
    },
    move: function(edge, talos, event) {
        var error;
        try {
            return edge.move(talos, event);
        } catch (error1) {
            error = error1;
            return talos.catch(error);
        }
    },
    step: function(talos, event) {
        var edge, vertex;
        console.log("new event", {
            event
        });
        vertex = Step.matchVertex(talos);
        if (talos.ended) {
            return talos;
        }
        edge = Step.matchEdge(vertex, talos, event);
        if (talos.ended) {
            return talos;
        }
        Step.run(edge, talos, event);
        if (talos.ended) {
            return talos;
        }
        Step.move(edge, talos, event);
        return talos;
    },
    generator: function*() {
        while(true){
            Step.step(this, (yield));
            if (this.ended) {
                return this;
            }
        }
    }
};
start = function(machine) {
    var talos;
    talos = Talos.make(machine);
    talos.generator = Step.generator.bind(talos);
    talos.cycle = talos.generator();
    talos.cycle.next();
    return talos;
};
run = generic({
    name: "talos: run",
    default: function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        throw new Error(`talos run: input is malformed ${JSON.stringify(args)}`);
    }
});
generic(run, Type.isObject, function(machine) {
    var talos;
    talos = start(machine);
    return run(talos, talos.context);
});
generic(run, Talos.isType, function(talos) {
    return run(talos, talos.context);
});
generic(run, Type.isObject, Type.isAny, function(machine, context) {
    var talos;
    talos = start(machine);
    return run(talos, context);
});
generic(run, Talos.isType, Type.isAny, function(talos, context) {
    talos.context = context;
    while(true){
        talos.cycle.next(talos.context);
        console.log("event processed", talos.state, talos.context);
        if (talos.ended) {
            break;
        }
    }
    if (talos.error != null) {
        console.error(talos.error);
    }
    return talos;
});
generic(run, Type.isObject, Type.isAny, Type.isIterable, function(machine, context, events) {
    var talos;
    talos = start(machine);
    return run(talos, context, events);
});
generic(run, Talos.isType, Type.isAny, Type.isIterable, function(talos, context, events) {
    var event;
    talos.context = context;
    for (event of events){
        talos.cycle.next(event);
        console.log("event processed", talos.state, talos.context);
        if (talos.ended) {
            break;
        }
    }
    if (talos.error != null) {
        console.error(talos.error);
    }
    return talos;
});
build = function(talos) {
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        return run(talos, ...args);
    };
};
pipe = function(fx) {
    var machine;
    machine = Machine.make(fx);
    return function(context) {
        var talos;
        talos = start(machine);
        run(talos, context);
        return talos.context;
    };
};
export { Step, start, run, build, pipe }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=src/sync.coffee

//# sourceMappingURL=data:application/json;base64,