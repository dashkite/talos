"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.step = exports.debug = void 0;
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _predicate = require("@dashkite/joy/predicate");
var _generic = require("@dashkite/joy/generic");
var _index = require("../containers/index.js");
var Errors = _interopRequireWildcard(require("../containers/errors.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var _debug, _step, debug, matchEdge, matchVertex, move, run, step;
matchVertex = function (graph, talos) {
  var vertex;
  vertex = graph.get(talos);
  if (vertex == null) {
    talos.throw(Errors.InvalidState.create("talos state is not in graph"));
  }
  return vertex;
};
matchEdge = async function (vertex, talos, transform) {
  var edge, i, len, ref;
  ref = vertex.edges;
  for (i = 0, len = ref.length; i < len; i++) {
    edge = ref[i];
    if ((await edge.accept(talos, transform)) === true) {
      return edge;
    }
  }
  return talos.throw(Errors.MissingTransition.create("no edge matches transform"));
};
run = async function (edge, talos, transform) {
  var error;
  if (edge.run != null) {
    try {
      return await edge.run(talos, transform);
    } catch (error1) {
      error = error1;
      return talos.throw(Errors.FailedRun.create(error, "encountered an error while running edge function"));
    }
  }
};
move = async function (edge, talos, transform) {
  var error;
  try {
    return await edge.move(talos, transform);
  } catch (error1) {
    error = error1;
    return talos.throw(Errors.FailedMove.create(error, "encountered an error while moving states"));
  }
};
exports.step = step = (0, _generic.generic)({
  name: "step talos",
  default: function (...args) {
    throw new Error(`step: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(step, _index.Graph.isType, _index.Talos.isType, Type.isAny, function (graph, talos, transform) {
  return _step(graph, talos, transform);
});
(0, _generic.generic)(step, _index.Graph.isType, (0, _predicate.negate)(_index.Talos.isType), function (graph, transform) {
  return step(graph, _index.Talos.create(), transform);
});
_step = async function (graph, talos, transform) {
  var edge, vertex;
  vertex = matchVertex(graph, talos);
  if (talos.halted) {
    return talos;
  }
  edge = await matchEdge(vertex, talos, transform);
  if (talos.halted) {
    return talos;
  }
  await run(edge, talos, transform);
  if (talos.halted) {
    return talos;
  }
  await move(edge, talos, transform);
  return talos;
};
exports.debug = debug = (0, _generic.generic)({
  name: "debug step talos",
  default: function (...args) {
    throw new Error(`debug step: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(debug, _index.Graph.isType, _index.Talos.isType, Type.isAny, function (graph, talos, transform) {
  return _debug(graph, talos, transform);
});
(0, _generic.generic)(debug, _index.Graph.isType, (0, _predicate.negate)(_index.Talos.isType), function (graph, transform) {
  return _debug(graph, _index.Talos.create(), transform);
});
_debug = async function (graph, talos, transform) {
  var edge, vertex;
  console.log("starting step", {
    graph,
    talos,
    transform
  });
  vertex = matchVertex(graph, talos);
  if (talos.halted) {
    console.error("encountered error matching vertex", talos.error.error, talos);
    return talos;
  } else {
    console.log("vertex matched", {
      vertex,
      talos
    });
  }
  edge = await matchEdge(vertex, talos, transform);
  if (talos.halted) {
    console.error("encountered error matching edge", talos.error.error, talos);
    return talos;
  } else {
    console.log("edge matched", {
      edge,
      talos
    });
  }
  await run(edge, talos, transform);
  if (talos.halted) {
    console.error("encountered error running edge function", talos.error.error, talos);
    return talos;
  } else {
    console.log("edge function complete", {
      talos
    });
  }
  await move(edge, talos, transform);
  if (talos.halted) {
    console.error("encountered error running move function", talos.error.error, talos);
    return talos;
  } else {
    console.log("talos move complete", {
      talos
    });
  }
  return talos;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zdHJpY3QvYXN5bmMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUEsSUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLFFBQUEsR0FBQSxPQUFBO0FBQUEsSUFBQSxNQUFBLEdBQUEsT0FBQTtBQUFBLElBQUEsTUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUFBLFNBQUEseUJBQUEsQ0FBQSw2QkFBQSxPQUFBLG1CQUFBLENBQUEsT0FBQSxPQUFBLElBQUEsQ0FBQSxPQUFBLE9BQUEsWUFBQSx3QkFBQSxZQUFBLENBQUEsQ0FBQSxXQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUE7QUFBQSxTQUFBLHdCQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsVUFBQSxTQUFBLENBQUEsZUFBQSxDQUFBLHVCQUFBLENBQUEseUJBQUEsQ0FBQSxXQUFBLE9BQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLHdCQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsU0FBQSxVQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLENBQUEsSUFBQSxDQUFBLG9CQUFBLENBQUEsSUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLENB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QVUsTUFBVixFQUFrQixLQUFsQixFQUF5QixTQUEvQixDQUFBO0VBQ1AsSUFBRyxLQUFLLENBQUMsTUFBVCxFQUFBO0lBQ0UsT0FBTyxDQUFDLEtBQVIsQ0FBYyxpQ0FBZCxFQUFpRCxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQTdELEVBQW9FLEtBQXBFLENBQUE7SUFDQSxPQUFPLEtBRlQ7R0FBQSxNQUFBO0lBSUUsT0FBTyxDQUFDLEdBQVIsQ0FBWSxjQUFaLEVBQTRCO01BQUUsSUFBRjtNQUFRO0lBQVIsQ0FBNUIsQ0FKRjs7RUFNQSxNQUFNLEdBQUEsQ0FBSSxJQUFKLEVBQVUsS0FBVixFQUFpQixTQUFqQixDQUFBO0VBQ04sSUFBRyxLQUFLLENBQUMsTUFBVCxFQUFBO0lBQ0UsT0FBTyxDQUFDLEtBQVIsQ0FBYyx5Q0FBZCxFQUF5RCxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQXJFLEVBQTRFLEtBQTVFLENBQUE7SUFDQSxPQUFPLEtBRlQ7R0FBQSxNQUFBO0lBSUUsT0FBTyxDQUFDLEdBQVIsQ0FBWSx3QkFBWixFQUFzQztNQUFFO0lBQUYsQ0FBdEMsQ0FKRjs7RUFNQSxNQUFNLElBQUEsQ0FBSyxJQUFMLEVBQVcsS0FBWCxFQUFrQixTQUFsQixDQUFBO0VBQ04sSUFBRyxLQUFLLENBQUMsTUFBVCxFQUFBO0lBQ0UsT0FBTyxDQUFDLEtBQVIsQ0FBYyx5Q0FBZCxFQUF5RCxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQXJFLEVBQTRFLEtBQTVFLENBQUE7SUFDQSxPQUFPLEtBRlQ7R0FBQSxNQUFBO0lBSUUsT0FBTyxDQUFDLEdBQVIsQ0FBWSxxQkFBWixFQUFtQztNQUFFO0lBQUYsQ0FBbkMsQ0FKRjs7U0FNQSxLQUFBO0FBL0JPLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgbmVnYXRlIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvcHJlZGljYXRlXCJcbmltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcbmltcG9ydCB7IEdyYXBoLCBUYWxvcyB9IGZyb20gXCIuLi9jb250YWluZXJzXCJcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi4vY29udGFpbmVycy9lcnJvcnNcIlxuXG5cbm1hdGNoVmVydGV4ID0gKCBncmFwaCwgdGFsb3MgKSAtPlxuICB2ZXJ0ZXggPSBncmFwaC5nZXQgdGFsb3NcbiAgaWYgIXZlcnRleD9cbiAgICB0YWxvcy50aHJvdyBFcnJvcnMuSW52YWxpZFN0YXRlLmNyZWF0ZSBcInRhbG9zIHN0YXRlIGlzIG5vdFxuICAgICAgaW4gZ3JhcGhcIlxuICB2ZXJ0ZXhcblxubWF0Y2hFZGdlID0gKCB2ZXJ0ZXgsIHRhbG9zLCB0cmFuc2Zvcm0gKSAtPlxuICBmb3IgZWRnZSBpbiB2ZXJ0ZXguZWRnZXNcbiAgICBpZiAoIGF3YWl0IGVkZ2UuYWNjZXB0IHRhbG9zLCB0cmFuc2Zvcm0gKSA9PSB0cnVlXG4gICAgICByZXR1cm4gZWRnZVxuICB0YWxvcy50aHJvdyBFcnJvcnMuTWlzc2luZ1RyYW5zaXRpb24uY3JlYXRlIFwibm8gZWRnZSBtYXRjaGVzIHRyYW5zZm9ybVwiXG5cbnJ1biA9ICggZWRnZSwgdGFsb3MsIHRyYW5zZm9ybSApIC0+XG4gIGlmIGVkZ2UucnVuP1xuICAgIHRyeVxuICAgICAgYXdhaXQgZWRnZS5ydW4gdGFsb3MsIHRyYW5zZm9ybVxuICAgIGNhdGNoIGVycm9yXG4gICAgICB0YWxvcy50aHJvdyBFcnJvcnMuRmFpbGVkUnVuLmNyZWF0ZSBlcnJvciwgXG4gICAgICAgIFwiZW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgcnVubmluZyBlZGdlIGZ1bmN0aW9uXCJcblxubW92ZSA9ICggZWRnZSwgdGFsb3MsIHRyYW5zZm9ybSApIC0+XG4gIHRyeVxuICAgIGF3YWl0IGVkZ2UubW92ZSB0YWxvcywgdHJhbnNmb3JtXG4gIGNhdGNoIGVycm9yXG4gICAgdGFsb3MudGhyb3cgRXJyb3JzLkZhaWxlZE1vdmUuY3JlYXRlIGVycm9yLCBcbiAgICAgIFwiZW5jb3VudGVyZWQgYW4gZXJyb3Igd2hpbGUgbW92aW5nIHN0YXRlc1wiXG5cblxuc3RlcCA9IGdlbmVyaWMgXG4gIG5hbWU6IFwic3RlcCB0YWxvc1wiXG4gIGRlZmF1bHQ6ICggYXJncy4uLiApIC0+IFxuICAgIHRocm93IG5ldyBFcnJvciBcInN0ZXA6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuZ2VuZXJpYyBzdGVwLCBHcmFwaC5pc1R5cGUsIFRhbG9zLmlzVHlwZSwgVHlwZS5pc0FueSwgKCBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybSApIC0+XG4gIF9zdGVwIGdyYXBoLCB0YWxvcywgdHJhbnNmb3JtXG5cbmdlbmVyaWMgc3RlcCwgR3JhcGguaXNUeXBlLCAoIG5lZ2F0ZSBUYWxvcy5pc1R5cGUgKSwgKCBncmFwaCwgdHJhbnNmb3JtICkgLT5cbiAgc3RlcCBncmFwaCwgVGFsb3MuY3JlYXRlKCksIHRyYW5zZm9ybVxuXG5cbl9zdGVwID0gKCBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybSApIC0+XG4gIHZlcnRleCA9IG1hdGNoVmVydGV4IGdyYXBoLCB0YWxvc1xuICByZXR1cm4gdGFsb3MgaWYgdGFsb3MuaGFsdGVkXG5cbiAgZWRnZSA9IGF3YWl0IG1hdGNoRWRnZSB2ZXJ0ZXgsIHRhbG9zLCB0cmFuc2Zvcm1cbiAgcmV0dXJuIHRhbG9zIGlmIHRhbG9zLmhhbHRlZFxuXG4gIGF3YWl0IHJ1biBlZGdlLCB0YWxvcywgdHJhbnNmb3JtXG4gIHJldHVybiB0YWxvcyBpZiB0YWxvcy5oYWx0ZWRcblxuICBhd2FpdCBtb3ZlIGVkZ2UsIHRhbG9zLCB0cmFuc2Zvcm1cbiAgdGFsb3NcblxuXG5cbmRlYnVnID0gZ2VuZXJpYyBcbiAgbmFtZTogXCJkZWJ1ZyBzdGVwIHRhbG9zXCJcbiAgZGVmYXVsdDogKCBhcmdzLi4uICkgLT4gXG4gICAgdGhyb3cgbmV3IEVycm9yIFwiZGVidWcgc3RlcDogaW5wdXQgaXMgbWFsZm9ybWVkICN7SlNPTi5zdHJpbmdpZnkgYXJnc31cIlxuXG5nZW5lcmljIGRlYnVnLCBHcmFwaC5pc1R5cGUsIFRhbG9zLmlzVHlwZSwgVHlwZS5pc0FueSwgKCBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybSApIC0+XG4gIF9kZWJ1ZyBncmFwaCwgdGFsb3MsIHRyYW5zZm9ybVxuXG5nZW5lcmljIGRlYnVnLCBHcmFwaC5pc1R5cGUsICggbmVnYXRlIFRhbG9zLmlzVHlwZSApLCAoIGdyYXBoLCB0cmFuc2Zvcm0gKSAtPlxuICBfZGVidWcgZ3JhcGgsIFRhbG9zLmNyZWF0ZSgpLCB0cmFuc2Zvcm1cblxuXG5fZGVidWcgPSAoIGdyYXBoLCB0YWxvcywgdHJhbnNmb3JtICkgLT5cbiAgY29uc29sZS5sb2cgXCJzdGFydGluZyBzdGVwXCIsIHsgZ3JhcGgsIHRhbG9zLCB0cmFuc2Zvcm0gfVxuXG4gIHZlcnRleCA9IG1hdGNoVmVydGV4IGdyYXBoLCB0YWxvc1xuICBpZiB0YWxvcy5oYWx0ZWRcbiAgICBjb25zb2xlLmVycm9yIFwiZW5jb3VudGVyZWQgZXJyb3IgbWF0Y2hpbmcgdmVydGV4XCIsIHRhbG9zLmVycm9yLmVycm9yLCB0YWxvc1xuICAgIHJldHVybiB0YWxvc1xuICBlbHNlXG4gICAgY29uc29sZS5sb2cgXCJ2ZXJ0ZXggbWF0Y2hlZFwiLCB7IHZlcnRleCwgdGFsb3MgfVxuICBcbiAgZWRnZSA9IGF3YWl0IG1hdGNoRWRnZSB2ZXJ0ZXgsIHRhbG9zLCB0cmFuc2Zvcm1cbiAgaWYgdGFsb3MuaGFsdGVkXG4gICAgY29uc29sZS5lcnJvciBcImVuY291bnRlcmVkIGVycm9yIG1hdGNoaW5nIGVkZ2VcIiwgdGFsb3MuZXJyb3IuZXJyb3IsIHRhbG9zXG4gICAgcmV0dXJuIHRhbG9zXG4gIGVsc2VcbiAgICBjb25zb2xlLmxvZyBcImVkZ2UgbWF0Y2hlZFwiLCB7IGVkZ2UsIHRhbG9zIH1cblxuICBhd2FpdCBydW4gZWRnZSwgdGFsb3MsIHRyYW5zZm9ybVxuICBpZiB0YWxvcy5oYWx0ZWRcbiAgICBjb25zb2xlLmVycm9yIFwiZW5jb3VudGVyZWQgZXJyb3IgcnVubmluZyBlZGdlIGZ1bmN0aW9uXCIsIHRhbG9zLmVycm9yLmVycm9yLCB0YWxvc1xuICAgIHJldHVybiB0YWxvc1xuICBlbHNlXG4gICAgY29uc29sZS5sb2cgXCJlZGdlIGZ1bmN0aW9uIGNvbXBsZXRlXCIsIHsgdGFsb3MgfVxuXG4gIGF3YWl0IG1vdmUgZWRnZSwgdGFsb3MsIHRyYW5zZm9ybVxuICBpZiB0YWxvcy5oYWx0ZWRcbiAgICBjb25zb2xlLmVycm9yIFwiZW5jb3VudGVyZWQgZXJyb3IgcnVubmluZyBtb3ZlIGZ1bmN0aW9uXCIsIHRhbG9zLmVycm9yLmVycm9yLCB0YWxvc1xuICAgIHJldHVybiB0YWxvc1xuICBlbHNlXG4gICAgY29uc29sZS5sb2cgXCJ0YWxvcyBtb3ZlIGNvbXBsZXRlXCIsIHsgdGFsb3MgfVxuXG4gIHRhbG9zXG5cblxuXG5leHBvcnQge1xuICBzdGVwXG4gIGRlYnVnXG59Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=src/strict/async.coffee