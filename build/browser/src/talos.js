var Talos;
import * as Meta from "@dashkite/joy/metaclass";
import * as Type from "@dashkite/joy/type";
import { Machine } from "./machine";
import { $start, $end, atStart, atEnd } from "./states";
Talos = (function() {
    class Talos {
        constructor({ machine: machine1 }){
            this.machine = machine1;
            this.name = this.machine.name;
            this.state = $start;
            this.context = {};
            this.error = null;
        }
        static make(_machine) {
            var machine;
            machine = Machine.make(_machine);
            return new Talos({
                machine
            });
        }
        end() {
            return this.state = $end;
        }
        catch(error) {
            this.end();
            return this.error = error;
        }
    }
    ;
    Meta.mixin(Talos.prototype, [
        Meta.getters({
            ended: function() {
                return atEnd(this.state);
            },
            success: function() {
                return this.ended && this.error == null;
            },
            failure: function() {
                return this.ended && this.error != null;
            },
            running: function() {
                return !this.ended;
            }
        })
    ]);
    Talos.isType = Type.isType(Talos);
    return Talos;
}).call(this);
export { Talos }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL3RhbG9zLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLE9BQU8sQ0FBQSxRQUFQLE1BQUE7O0FBQ0EsT0FBTyxDQUFBLFFBQVAsTUFBQTs7QUFDQSxPQUFBO0VBQVMsT0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE1BQVQ7RUFBaUIsSUFBakI7RUFBdUIsT0FBdkI7RUFBZ0MsS0FBaEM7Q0FBQSxNQUFBOztBQUdNO0VBQU4sTUFBQSxNQUFBO0lBQ0UsV0FBYSxDQUFDO1FBQUc7TUFBSCxDQUFELENBQUE7TUFBRyxJQUFDLENBQUE7TUFDZixJQUFDLENBQUEsSUFBRCxHQUFRLElBQUMsQ0FBQSxPQUFPLENBQUM7TUFDakIsSUFBQyxDQUFBLEtBQUQsR0FBUztNQUNULElBQUMsQ0FBQSxPQUFELEdBQVcsQ0FBQTtNQUNYLElBQUMsQ0FBQSxLQUFELEdBQVM7SUFKRTs7SUFjTixPQUFOLElBQU0sQ0FBRSxRQUFGLENBQUE7QUFDVCxVQUFBO01BQUksT0FBQSxHQUFVLE9BQU8sQ0FBQyxJQUFSLENBQWEsUUFBYjthQUNWLElBQUksS0FBSixDQUFVLENBQUUsT0FBRixDQUFWO0lBRks7O0lBTVAsR0FBSyxDQUFBLENBQUE7YUFDSCxJQUFDLENBQUEsS0FBRCxHQUFTO0lBRE47O0lBR0wsS0FBTyxDQUFFLEtBQUYsQ0FBQTtNQUNMLElBQUMsQ0FBQSxHQUFELENBQUE7YUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTO0lBRko7O0VBeEJUOztFQU9FLElBQUksQ0FBQyxLQUFMLENBQVcsS0FBQyxDQUFBLFNBQVosRUFBZ0I7SUFDZCxJQUFJLENBQUMsT0FBTCxDQUNFO01BQUEsS0FBQSxFQUFPLFFBQUEsQ0FBQSxDQUFBO2VBQUcsS0FBQSxDQUFNLElBQUMsQ0FBQSxLQUFQO01BQUgsQ0FBUDtNQUNBLE9BQUEsRUFBUyxRQUFBLENBQUEsQ0FBQTtlQUFHLElBQUMsQ0FBQSxLQUFELElBQVc7TUFBZCxDQURUO01BRUEsT0FBQSxFQUFTLFFBQUEsQ0FBQSxDQUFBO2VBQUcsSUFBQyxDQUFBLEtBQUQsSUFBVTtNQUFiLENBRlQ7TUFHQSxPQUFBLEVBQVMsUUFBQSxDQUFBLENBQUE7ZUFBRyxDQUFDLElBQUMsQ0FBQTtNQUFMO0lBSFQsQ0FERixDQURjO0dBQWhCOztFQVlBLEtBQUMsQ0FBQSxNQUFELEdBQVMsSUFBSSxDQUFDLE1BQUwsQ0FBWSxLQUFaOzs7Ozs7QUFVWCxPQUFBO0VBQ0UsS0FERiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE1ldGEgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvbWV0YWNsYXNzXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgeyBNYWNoaW5lIH0gZnJvbSBcIi4vbWFjaGluZVwiXG5pbXBvcnQgeyAkc3RhcnQsICRlbmQsIGF0U3RhcnQsIGF0RW5kIH0gZnJvbSBcIi4vc3RhdGVzXCJcblxuXG5jbGFzcyBUYWxvc1xuICBjb25zdHJ1Y3RvcjogKHsgQG1hY2hpbmUgfSkgLT5cbiAgICBAbmFtZSA9IEBtYWNoaW5lLm5hbWVcbiAgICBAc3RhdGUgPSAkc3RhcnRcbiAgICBAY29udGV4dCA9IHt9XG4gICAgQGVycm9yID0gbnVsbFxuXG4gIE1ldGEubWl4aW4gQDo6LCBbXG4gICAgTWV0YS5nZXR0ZXJzXG4gICAgICBlbmRlZDogLT4gYXRFbmQgQHN0YXRlXG4gICAgICBzdWNjZXNzOiAtPiBAZW5kZWQgJiYgIUBlcnJvcj9cbiAgICAgIGZhaWx1cmU6IC0+IEBlbmRlZCAmJiBAZXJyb3I/XG4gICAgICBydW5uaW5nOiAtPiAhQGVuZGVkXG4gIF1cblxuICBAbWFrZTogKCBfbWFjaGluZSApIC0+IFxuICAgIG1hY2hpbmUgPSBNYWNoaW5lLm1ha2UgX21hY2hpbmVcbiAgICBuZXcgVGFsb3MgeyBtYWNoaW5lIH1cbiAgXG4gIEBpc1R5cGU6IFR5cGUuaXNUeXBlIEBcblxuICBlbmQ6IC0+XG4gICAgQHN0YXRlID0gJGVuZFxuXG4gIGNhdGNoOiAoIGVycm9yICkgLT5cbiAgICBAZW5kKClcbiAgICBAZXJyb3IgPSBlcnJvclxuXG5cbmV4cG9ydCB7XG4gIFRhbG9zXG59Il19
 //# sourceURL=src/talos.coffee

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy90YWxvcy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTWV0YSBmcm9tIFwiQGRhc2hraXRlL2pveS9tZXRhY2xhc3NcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCB7IE1hY2hpbmUgfSBmcm9tIFwiLi9tYWNoaW5lXCJcbmltcG9ydCB7ICRzdGFydCwgJGVuZCwgYXRTdGFydCwgYXRFbmQgfSBmcm9tIFwiLi9zdGF0ZXNcIlxuXG5cbmNsYXNzIFRhbG9zXG4gIGNvbnN0cnVjdG9yOiAoeyBAbWFjaGluZSB9KSAtPlxuICAgIEBuYW1lID0gQG1hY2hpbmUubmFtZVxuICAgIEBzdGF0ZSA9ICRzdGFydFxuICAgIEBjb250ZXh0ID0ge31cbiAgICBAZXJyb3IgPSBudWxsXG5cbiAgTWV0YS5taXhpbiBAOjosIFtcbiAgICBNZXRhLmdldHRlcnNcbiAgICAgIGVuZGVkOiAtPiBhdEVuZCBAc3RhdGVcbiAgICAgIHN1Y2Nlc3M6IC0+IEBlbmRlZCAmJiAhQGVycm9yP1xuICAgICAgZmFpbHVyZTogLT4gQGVuZGVkICYmIEBlcnJvcj9cbiAgICAgIHJ1bm5pbmc6IC0+ICFAZW5kZWRcbiAgXVxuXG4gIEBtYWtlOiAoIF9tYWNoaW5lICkgLT4gXG4gICAgbWFjaGluZSA9IE1hY2hpbmUubWFrZSBfbWFjaGluZVxuICAgIG5ldyBUYWxvcyB7IG1hY2hpbmUgfVxuICBcbiAgQGlzVHlwZTogVHlwZS5pc1R5cGUgQFxuXG4gIGVuZDogLT5cbiAgICBAc3RhdGUgPSAkZW5kXG5cbiAgY2F0Y2g6ICggZXJyb3IgKSAtPlxuICAgIEBlbmQoKVxuICAgIEBlcnJvciA9IGVycm9yXG5cblxuZXhwb3J0IHtcbiAgVGFsb3Ncbn0iXSwibmFtZXMiOlsiVGFsb3MiLCJNZXRhIiwiVHlwZSIsIk1hY2hpbmUiLCIkc3RhcnQiLCIkZW5kIiwiYXRTdGFydCIsImF0RW5kIiwiY29uc3RydWN0b3IiLCJtYWNoaW5lIiwibWFjaGluZTEiLCJuYW1lIiwic3RhdGUiLCJjb250ZXh0IiwiZXJyb3IiLCJtYWtlIiwiX21hY2hpbmUiLCJlbmQiLCJjYXRjaCIsIm1peGluIiwicHJvdG90eXBlIiwiZ2V0dGVycyIsImVuZGVkIiwic3VjY2VzcyIsImZhaWx1cmUiLCJydW5uaW5nIiwiaXNUeXBlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFBQTtBQUFBLFlBQU9DLFVBQVAsMEJBQUE7QUFDQSxZQUFPQyxVQUFQLHFCQUFBO0FBQ0EsU0FBU0MsT0FBVCxRQUFBLFlBQUE7QUFDQSxTQUFTQyxNQUFULEVBQWlCQyxJQUFqQixFQUF1QkMsT0FBdkIsRUFBZ0NDLEtBQWhDLFFBQUEsV0FBQTtBQUdNUCxRQUFBLENBQUE7SUFBTixNQUFBQTtRQUNFUSxZQUFjLEVBQUdDLFNBQUFDLFFBQUEsRUFBSixDQUFBO1lBQUcsSUFBQyxDQUFBRCxPQUFBLEdBQUFDO1lBQ2YsSUFBQyxDQUFBQyxJQUFELEdBQVEsSUFBQyxDQUFBRixPQUFPLENBQUNFLElBQUE7WUFDakIsSUFBQyxDQUFBQyxLQUFELEdBQVNSO1lBQ1QsSUFBQyxDQUFBUyxPQUFELEdBQVcsQ0FBQTtZQUNYLElBQUMsQ0FBQUMsS0FBRCxHQUFTO1FBSkU7UUFjTixPQUFOQyxLQUFRQyxRQUFGLEVBQUE7WUFDVCxJQUFBUDtZQUFJQSxVQUFVTixRQUFRWSxJQUFSLENBQWFDO21CQUN2QixJQUFJaEIsTUFBTTtnQkFBRVM7WUFBRjtRQUZMO1FBTVBRLE1BQUs7bUJBQ0gsSUFBQyxDQUFBTCxLQUFELEdBQVNQO1FBRE47UUFHTGEsTUFBU0osS0FBRixFQUFBO1lBQ0wsSUFBQyxDQUFBRyxHQUFEO21CQUNBLElBQUMsQ0FBQUgsS0FBRCxHQUFTQTtRQUZKO0lBeEJUOztJQU9FYixLQUFLa0IsS0FBTCxDQUFXbkIsTUFBQ29CLFNBQVosRUFBZ0I7UUFDZG5CLEtBQUtvQixPQUFMLENBQ0U7WUFBQUMsT0FBTzt1QkFBR2YsTUFBTSxJQUFDLENBQUFLLEtBQVA7WUFBSDtZQUNQVyxTQUFTO3VCQUFHLElBQUMsQ0FBQUQsS0FBRCxJQUFXLElBQUEsQ0FBQVIsS0FBQSxJQUFBO1lBQWQ7WUFDVFUsU0FBUzt1QkFBRyxJQUFDLENBQUFGLEtBQUQsSUFBVSxJQUFBLENBQUFSLEtBQUEsSUFBQTtZQUFiO1lBQ1RXLFNBQVM7dUJBQUcsQ0FBQyxJQUFDLENBQUFILEtBQUE7WUFBTDtRQUhUO0tBRko7SUFZQXRCLE1BQUMwQixNQUFELEdBQVN4QixLQUFLd0IsTUFBTCxDQUFZMUI7OztBQVV2QixTQUNFQSxLQURGIn0=