"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Auto = void 0;
var Meta = _interopRequireWildcard(require("@dashkite/joy/metaclass"));
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _generic = require("@dashkite/joy/generic");
var _graph = require("./graph.js");
var _talos = require("./talos.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Auto, make;
make = (0, _generic.generic)({
  name: "auto make",
  default: function (...args) {
    throw new Error(`Auto.make: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(make, Drive.isType, function (drive) {
  return new Auto({
    drive: this.drive
  });
});
exports.Auto = Auto = function () {
  class Auto {
    constructor({
      drive: drive1
    }) {
      this.drive = drive1;
    }
    start(transform) {
      return this.step(this.graph, this.talos, transform);
    }
    halt() {
      return this.halted = true;
    }
  }
  ;
  Meta.mixin(Auto.prototype, [Meta.getters({})]);
  Auto.make = make;
  Auto.isType = Type.isType(Auto);
  return Auto;
}.call(void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250YWluZXJzL2F1dG8uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUEsSUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsSUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsUUFBQSxHQUFBLE9BQUE7QUFBQSxJQUFBLE1BQUEsR0FBQSxPQUFBO0FBQUEsSUFBQSxNQUFBLEdBQUEsT0FBQTtBQUFBLFNBQUEseUJBQUEsQ0FBQSw2QkFBQSxPQUFBLG1CQUFBLENBQUEsT0FBQSxPQUFBLElBQUEsQ0FBQSxPQUFBLE9BQUEsWUFBQSx3QkFBQSxZQUFBLENBQUEsQ0FBQSxXQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUE7QUFBQSxTQUFBLHdCQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsVUFBQSxTQUFBLENBQUEsZUFBQSxDQUFBLHVCQUFBLENBQUEseUJBQUEsQ0FBQSxXQUFBLE9BQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLHdCQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsU0FBQSxVQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLENBQUEsSUFBQSxDQUFBLG9CQUFBLENBQUEsSUFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsWUFBQSxDQUFBLENBQUEsT0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUE7QUFGQSxJQUFBLElBQUEsRUFBQSxJQUFBO0FBT0EsSUFBQSxHQUFPLElBQUEsZ0JBQUEsRUFDTDtFQUFBLElBQUEsRUFBTSxXQUFOO0VBQ0EsT0FBQSxFQUFTLFNBQUEsQ0FBQSxHQUFFLElBQUYsRUFBQTtJQUNQLE1BQU0sSUFBSSxLQUFKLENBQVUsaUNBQWlDLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBaEQsQ0FBQSxFQUFWLENBQUE7RUFEQztBQURULENBREssQ0FBQTtBQUtQLElBQUEsZ0JBQUEsRUFBUSxJQUFSLEVBQWMsS0FBSyxDQUFDLE1BQXBCLEVBQTRCLFVBQUUsS0FBRixFQUFBO1NBQzFCLElBQUksSUFBSixDQUFTO0lBQUcsS0FBQSxFQUFELElBQUMsQ0FBQTtFQUFILENBQVQsQ0FBQTtBQUQwQixDQUE1QixDQUFBO0FBSU0sT0FBQSxDQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsWUFBQTtFQUFOLE1BQUEsSUFBQSxDQUFBO0lBQ0UsV0FBYSxDQUFDO01BQUcsS0FBQSxFQUFBO0lBQUgsQ0FBRCxFQUFBO01BQUcsSUFBQyxDQUFBLEtBQUEsR0FBQSxNQUFBO0lBQUo7SUFTYixLQUFPLENBQUUsU0FBRixFQUFBO2FBQ0wsSUFBQyxDQUFBLElBQUQsQ0FBTSxJQUFDLENBQUEsS0FBUCxFQUFjLElBQUMsQ0FBQSxLQUFmLEVBQXNCLFNBQXRCLENBQUE7SUFESztJQUdQLElBQU0sQ0FBQSxFQUFBO2FBQ0osSUFBQyxDQUFBLE1BQUQsR0FBVSxJQUFBO0lBRE47RUFiUjtFQUFBO0VBR0UsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFDLENBQUEsU0FBWixFQUFnQixDQUNkLElBQUksQ0FBQyxPQUFMLENBQWEsQ0FBQSxDQUFiLENBRGMsQ0FBaEIsQ0FBQTtFQUlBLElBQUMsQ0FBQSxJQUFELEdBQU8sSUFBQTtFQUNQLElBQUMsQ0FBQSxNQUFELEdBQVMsSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFaLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBNZXRhIGZyb20gXCJAZGFzaGtpdGUvam95L21ldGFjbGFzc1wiXG5pbXBvcnQgKiBhcyBUeXBlIGZyb20gXCJAZGFzaGtpdGUvam95L3R5cGVcIlxuaW1wb3J0IHsgZ2VuZXJpYyB9IGZyb20gXCJAZGFzaGtpdGUvam95L2dlbmVyaWNcIlxuaW1wb3J0IHsgR3JhcGggfSBmcm9tIFwiLi9ncmFwaFwiXG5pbXBvcnQgeyBUYWxvcyB9IGZyb20gXCIuL3RhbG9zXCJcblxuXG5tYWtlID0gZ2VuZXJpYyBcbiAgbmFtZTogXCJhdXRvIG1ha2VcIlxuICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJBdXRvLm1ha2U6IGlucHV0IGlzIG1hbGZvcm1lZCAje0pTT04uc3RyaW5naWZ5IGFyZ3N9XCJcblxuZ2VuZXJpYyBtYWtlLCBEcml2ZS5pc1R5cGUsICggZHJpdmUgKSAtPlxuICBuZXcgQXV0byB7IEBkcml2ZSB9XG5cblxuY2xhc3MgQXV0b1xuICBjb25zdHJ1Y3RvcjogKHsgQGRyaXZlIH0pIC0+XG5cbiAgTWV0YS5taXhpbiBAOjosIFtcbiAgICBNZXRhLmdldHRlcnMge31cbiAgXVxuXG4gIEBtYWtlOiBtYWtlXG4gIEBpc1R5cGU6IFR5cGUuaXNUeXBlIEBcblxuICBzdGFydDogKCB0cmFuc2Zvcm0gKSAtPlxuICAgIEBzdGVwIEBncmFwaCwgQHRhbG9zLCB0cmFuc2Zvcm1cblxuICBoYWx0OiAtPlxuICAgIEBoYWx0ZWQgPSB0cnVlXG5cbiAgXG5cblxuZXhwb3J0IHtcbiAgQXV0b1xufSJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=src/containers/auto.coffee