var Edge, Edges, Machine, Vertex, areVertexEdges, isState, normalizeMove, normalizeWhen, prioritize;
import { generic } from "@dashkite/joy/generic";
import * as Type from "@dashkite/joy/type";
import { $start, $end } from "./states";
isState = function(x) {
    return Type.isString(x) || Type.isSymbol(x);
};
areVertexEdges = function(x) {
    var edge, j, len, ref;
    if (x.edges == null) {
        return false;
    }
    if (!Type.isArray(x.edges)) {
        return false;
    }
    ref = x.edges;
    for(j = 0, len = ref.length; j < len; j++){
        edge = ref[j];
        if (!Type.isObject(edge)) {
            return false;
        }
    }
    return true;
};
normalizeWhen = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return event === condition;
        };
    } else if (Type.isFunction(x)) {
        return x;
    } else if (Type.isBoolean(x)) {
        return function() {
            return x;
        };
    } else {
        throw new Error("unable to normalize when description");
    }
};
normalizeMove = function(x) {
    if (isState(x)) {
        return function(talos, event) {
            return talos.state = x;
        };
    } else if (Type.isFunction(x)) {
        return x;
    } else {
        throw new Error("unable to normalize move description");
    }
};
prioritize = function(frames) {
    return frames.sort(function(a, b) {
        if (a.priority < b.priority) {
            return -1;
        } else if (a.priority > b.priority) {
            return 1;
        } else {
            return 0;
        }
    });
};
Edge = {
    make: generic({
        name: "talos: edge make"
    })
};
generic(Edge.make, Type.isObject, function(object) {
    return {
        when: normalizeWhen(object.when),
        run: object.run,
        move: normalizeMove(object.move)
    };
});
generic(Edge.make, isState, Type.isAny, function(move, _when) {
    return Edge.make({
        move,
        when: _when
    });
});
generic(Edge.make, isState, Type.isObject, function(move, object) {
    var ref, ref1;
    return {
        when: normalizeWhen((ref = object.when) != null ? ref : true),
        run: object.run,
        move: normalizeMove((ref1 = object.move) != null ? ref1 : move)
    };
});
Edges = {
    make: generic({
        name: "talos: edges make"
    })
};
generic(Edges.make, Type.isObject, function(object) {
    var defaultFrame, edges, frames, j, k, key, len, len1, priority, ref, ref1, value;
    frames = [];
    defaultFrame = null;
    ref = Reflect.ownKeys(object);
    for(j = 0, len = ref.length; j < len; j++){
        key = ref[j];
        value = object[key];
        priority = (ref1 = value.priority) != null ? ref1 : 100;
        if (key === "default") {
            defaultFrame = {
                key,
                value
            };
        } else {
            if (key === "end") {
                key = $end;
            }
            frames.push({
                key,
                value,
                priority
            });
        }
    }
    prioritize(frames);
    edges = [];
    for(k = 0, len1 = frames.length; k < len1; k++){
        ({ key, value } = frames[k]);
        edges.push(Edge.make(key, value));
    }
    if (defaultFrame != null) {
        // default is a special case emphasizing an always true "when" function.
        ({ value } = defaultFrame);
        if (Type.isObject(value)) {
            edges.push(Edge.make({
                ...value,
                when: true
            }));
        } else {
            edges.push(Edge.make({
                when: true,
                move: value
            }));
        }
    }
    return edges;
});
generic(Edges.make, Type.isArray, function(array) {
    var edge, j, len, results;
    results = [];
    for(j = 0, len = array.length; j < len; j++){
        edge = array[j];
        results.push(Edge.make(edge));
    }
    return results;
});
generic(Edges.make, Type.isFunction, function(f) {
    var edge;
    edge = {
        when: true,
        run: f,
        move: $end
    };
    return [
        Edge.make(edge)
    ];
});
generic(Edges.make, isState, function(move) {
    return Edges.make({
        [move]: true
    });
});
generic(Edges.make, areVertexEdges, function(param) {
    let { edges } = param;
    var edge, j, len, results;
    results = [];
    for(j = 0, len = edges.length; j < len; j++){
        edge = edges[j];
        results.push({
            when: edge.when,
            run: edge.run,
            move: edge.move
        });
    }
    return results;
});
Vertex = {
    make: function(key, value) {
        return {
            name: key,
            edges: Edges.make(value)
        };
    }
};
Machine = {
    make: function(value) {
        var _graph, j, key, len, machine, ref, ref1;
        _graph = Machine.format(value);
        machine = {
            name: (ref = value.name) != null ? ref : "anonymous",
            graph: {}
        };
        ref1 = Reflect.ownKeys(_graph);
        for(j = 0, len = ref1.length; j < len; j++){
            key = ref1[j];
            value = _graph[key];
            machine.graph[key] = Vertex.make(key, value);
        }
        return machine;
    },
    format: function(value) {
        var graph, j, key, len, ref;
        if (Type.isObject(value)) {
            graph = {};
            ref = Reflect.ownKeys(value.graph);
            for(j = 0, len = ref.length; j < len; j++){
                key = ref[j];
                graph[key] = value.graph[key];
            }
        } else if (Type.isArray(value)) {
            graph = Machine.expand(value);
        } else {
            throw new Error("Talos machine representation is malformed");
        }
        if (graph[$start] == null) {
            if (graph.start != null) {
                graph[$start] = graph.start;
                delete graph.start;
            } else {
                throw new Error("no start state defined for this machine");
            }
        }
        if (graph[$end] == null) {
            if (graph.end != null) {
                graph[$end] = graph.end;
                delete graph.end;
            }
        }
        return graph;
    },
    expand: function(fx) {
        var cache, current, f, getName, graph, i, j, k, len, len1, names, next, ref;
        for(j = 0, len = fx.length; j < len; j++){
            f = fx[j];
            if (f == null) {
                throw new Error("undefined item in function composition array");
            }
        }
        if (fx.length === 0) {
            return {
                [$start]: {
                    end: {
                        when: true,
                        next: $end
                    }
                }
            };
        }
        names = {};
        getName = function(f) {
            var name;
            name = f.name || "anonymous";
            if (names[name] != null) {
                return `${name}-${++names[name]}`;
            } else {
                names[name] = 1;
                return name;
            }
        };
        graph = {};
        cache = {};
        for(i = k = 0, len1 = fx.length; k < len1; i = ++k){
            f = fx[i];
            current = (ref = cache.current) != null ? ref : getName(f);
            if (i === 0) {
                cache.startName = current;
            }
            if (i === fx.length - 1) {
                next = $end;
            } else {
                next = getName(fx[i + 1]);
            }
            graph[current] = {
                next: {
                    when: true,
                    run: f,
                    move: next
                }
            };
            cache.current = next;
        }
        graph[$start] = {
            next: {
                when: true,
                move: cache.startName
            }
        };
        return graph;
    }
};
export { Machine, Vertex, Edges, Edge }; //# sourceMappingURL=data:application/json;base64,
 //# sourceURL=src/machine.coffee

//# sourceMappingURL=data:application/json;base64,