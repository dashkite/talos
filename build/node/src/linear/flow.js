"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flow = void 0;
var Fn = _interopRequireWildcard(require("@dashkite/joy/function"));
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _generic = require("@dashkite/joy/generic");
var _index = require("../containers/index.js");
var Async = _interopRequireWildcard(require("../strict/async.js"));
var h = _interopRequireWildcard(require("./helpers.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var _flow, debug, finished, flow;
exports.flow = flow = (0, _generic.generic)({
  name: "talos flow",
  default: function (...args) {
    throw new Error(`flow: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(flow, h.isFunctionArray, function (fx) {
  return _flow({}, fx);
});
(0, _generic.generic)(flow, Type.isObject, h.isFunctionArray, function (options, fx) {
  return _flow(options, fx);
});
_flow = function (options, fx) {
  var drive, f, graph, step, talos;
  if (fx.length === 0) {
    if (options.debug === true) {
      console.log("[ flow ] empty function list, mapping to no-op");
    }
    return async function (x) {
      await Promise.resolve();
      return x;
    };
  }
  f = fx[0];
  graph = _index.Graph.make(h.expand(fx));
  talos = _index.Talos.make();
  step = options.debug === true ? debug : Async.step;
  drive = _index.Drive.make(graph, talos, step);
  return Fn.arity(f.length, async function (...args) {
    await drive.update(...args);
    while (true) {
      h.check(talos);
      if (talos.halted) {
        return talos.context;
      }
      await drive.update();
    }
  });
};
finished = h.finished("flow");
debug = async function (graph, talos, ...transforms) {
  var edge, name, vertex;
  vertex = Async.matchVertex(graph, talos);
  name = h.nameVertex(vertex);
  if (finished(talos)) {
    return talos;
  }
  edge = await Async.matchEdge(vertex, talos, transforms);
  if (finished(talos)) {
    return talos;
  }
  console.log(`[ flow ] starting step ${name}`, talos.context);
  if (transforms.length > 0) {
    console.log("arguments", ...transforms);
  }
  await Async.run(edge, talos, transforms);
  if (finished(talos)) {
    return talos;
  }
  console.log(`[ flow ] finished step ${name}`);
  await Async.move(edge, talos, transforms);
  if (finished(talos)) {
    return talos;
  }
  return talos;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saW5lYXIvZmxvdy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQSxFQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxJQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQTtBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUE7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUE7QUFBQSxJQUFBLENBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUE7QUFBQSxTQUFBLHlCQUFBLENBQUEsNkJBQUEsT0FBQSxtQkFBQSxDQUFBLE9BQUEsT0FBQSxJQUFBLENBQUEsT0FBQSxPQUFBLFlBQUEsd0JBQUEsWUFBQSxDQUFBLENBQUEsV0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBO0FBQUEsU0FBQSx3QkFBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLFVBQUEsU0FBQSxDQUFBLGVBQUEsQ0FBQSx1QkFBQSxDQUFBLHlCQUFBLENBQUEsV0FBQSxPQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSx3QkFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLFNBQUEsVUFBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsSUFBQSxNQUFBLENBQUEsd0JBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxvQkFBQSxDQUFBLElBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxVQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsR0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBLE9BQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsR0FBQSxDQUFBO0FBRkEsSUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxJQUFBO0FBUUEsT0FBQSxDQUFBLElBQUEsR0FBQSxJQUFBLEdBQU8sSUFBQSxnQkFBQSxFQUNMO0VBQUEsSUFBQSxFQUFNLFlBQU47RUFDQSxPQUFBLEVBQVMsU0FBQSxDQUFBLEdBQUUsSUFBRixFQUFBO0lBQ1AsTUFBTSxJQUFJLEtBQUosQ0FBVSw0QkFBNEIsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUEzQyxDQUFBLEVBQVYsQ0FBQTtFQURDO0FBRFQsQ0FESyxDQUFBO0FBS1AsSUFBQSxnQkFBQSxFQUFRLElBQVIsRUFBYyxDQUFDLENBQUMsZUFBaEIsRUFBaUMsVUFBRSxFQUFGLEVBQUE7U0FDL0IsS0FBQSxDQUFNLENBQUEsQ0FBTixFQUFVLEVBQVYsQ0FBQTtBQUQrQixDQUFqQyxDQUFBO0FBR0EsSUFBQSxnQkFBQSxFQUFRLElBQVIsRUFBYyxJQUFJLENBQUMsUUFBbkIsRUFBNkIsQ0FBQyxDQUFDLGVBQS9CLEVBQWdELFVBQUUsT0FBRixFQUFXLEVBQVgsRUFBQTtTQUM5QyxLQUFBLENBQU0sT0FBTixFQUFlLEVBQWYsQ0FBQTtBQUQ4QyxDQUFoRCxDQUFBO0FBR0EsS0FBQSxHQUFRLFNBQUEsQ0FBRSxPQUFGLEVBQVcsRUFBWCxFQUFBO0VBQ1IsSUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQTtFQUFFLElBQUcsRUFBRSxDQUFDLE1BQUgsS0FBYSxDQUFoQixFQUFBO0lBQ0UsSUFBRyxPQUFPLENBQUMsS0FBUixLQUFpQixJQUFwQixFQUFBO01BQ0UsT0FBTyxDQUFDLEdBQVIsQ0FBWSxnREFBWixDQURGOztJQUVBLE9BQU8sZ0JBQUUsQ0FBRixFQUFBO01BQVMsTUFBTSxPQUFPLENBQUMsT0FBUixDQUFBLENBQUE7YUFBb0IsQ0FBQTtJQUFuQyxDQUhUOztFQUtBLENBQUEsR0FBSSxFQUFFLENBQUUsQ0FBRixDQUFBO0VBQ04sS0FBQSxHQUFRLFlBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxFQUFULENBQVgsQ0FBQTtFQUNSLEtBQUEsR0FBUSxZQUFLLENBQUMsSUFBTixDQUFBLENBQUE7RUFDUixJQUFBLEdBQVUsT0FBTyxDQUFDLEtBQVIsS0FBaUIsSUFBcEIsR0FBOEIsS0FBOUIsR0FBeUMsS0FBSyxDQUFDLElBQUE7RUFDdEQsS0FBQSxHQUFRLFlBQUssQ0FBQyxJQUFOLENBQVcsS0FBWCxFQUFrQixLQUFsQixFQUF5QixJQUF6QixDQUFBO1NBRVIsRUFBRSxDQUFDLEtBQUgsQ0FBUyxDQUFDLENBQUMsTUFBWCxFQUFtQixnQkFBQSxHQUFFLElBQUYsRUFBQTtJQUNqQixNQUFNLEtBQUssQ0FBQyxNQUFOLENBQWEsR0FBQSxJQUFiLENBQUE7SUFDTixPQUFBLElBQUEsRUFBQTtNQUNFLENBQUMsQ0FBQyxLQUFGLENBQVEsS0FBUixDQUFBO01BQ0EsSUFBd0IsS0FBSyxDQUFDLE1BQTlCLEVBQUE7UUFBQSxPQUFPLEtBQUssQ0FBQyxPQUFiOztNQUNBLE1BQU0sS0FBSyxDQUFDLE1BQU4sQ0FBQSxDQUFBO0lBSFI7RUFGaUIsQ0FBbkIsQ0FBQTtBQVpNLENBQUE7QUFvQlIsUUFBQSxHQUFXLENBQUMsQ0FBQyxRQUFGLENBQVcsTUFBWCxDQUFBO0FBRVgsS0FBQSxHQUFRLGVBQUEsQ0FBRSxLQUFGLEVBQVMsS0FBVCxFQUFBLEdBQWdCLFVBQWhCLEVBQUE7RUFDUixJQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQTtFQUFFLE1BQUEsR0FBUyxLQUFLLENBQUMsV0FBTixDQUFrQixLQUFsQixFQUF5QixLQUF6QixDQUFBO0VBQ1QsSUFBQSxHQUFPLENBQUMsQ0FBQyxVQUFGLENBQWEsTUFBYixDQUFBO0VBQ1AsSUFBZ0IsUUFBQSxDQUFTLEtBQVQsQ0FBaEIsRUFBQTtJQUFBLE9BQU8sS0FBUDs7RUFFQSxJQUFBLEdBQU8sTUFBTSxLQUFLLENBQUMsU0FBTixDQUFnQixNQUFoQixFQUF3QixLQUF4QixFQUErQixVQUFyQyxDQUFBO0VBQ1AsSUFBZ0IsUUFBQSxDQUFTLEtBQVQsQ0FBaEIsRUFBQTtJQUFBLE9BQU8sS0FBUDs7RUFFQSxPQUFPLENBQUMsR0FBUixDQUFZLDBCQUFBLElBQUEsRUFBWixFQUFnRCxLQUFLLENBQUMsT0FBdEQsQ0FBQTtFQUNBLElBQUcsVUFBVSxDQUFDLE1BQVgsR0FBb0IsQ0FBdkIsRUFBQTtJQUNFLE9BQU8sQ0FBQyxHQUFSLENBQVksV0FBWixFQUF5QixHQUFBLFVBQXpCLENBREY7O0VBRUEsTUFBTSxLQUFLLENBQUMsR0FBTixDQUFVLElBQVYsRUFBZ0IsS0FBaEIsRUFBdUIsVUFBdkIsQ0FBQTtFQUNOLElBQWdCLFFBQUEsQ0FBUyxLQUFULENBQWhCLEVBQUE7SUFBQSxPQUFPLEtBQVA7O0VBQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSwwQkFBQSxJQUFBLEVBQVosQ0FBQTtFQUVBLE1BQU0sS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFYLEVBQWlCLEtBQWpCLEVBQXdCLFVBQXhCLENBQUE7RUFDTixJQUFnQixRQUFBLENBQVMsS0FBVCxDQUFoQixFQUFBO0lBQUEsT0FBTyxLQUFQOztTQUNBLEtBQUE7QUFqQk0sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEZuIGZyb20gXCJAZGFzaGtpdGUvam95L2Z1bmN0aW9uXCJcbmltcG9ydCAqIGFzIFR5cGUgZnJvbSBcIkBkYXNoa2l0ZS9qb3kvdHlwZVwiXG5pbXBvcnQgeyBnZW5lcmljIH0gZnJvbSBcIkBkYXNoa2l0ZS9qb3kvZ2VuZXJpY1wiXG5pbXBvcnQgeyBHcmFwaCwgVGFsb3MsIERyaXZlIH0gZnJvbSBcIi4uL2NvbnRhaW5lcnNcIlxuaW1wb3J0ICogYXMgQXN5bmMgZnJvbSBcIi4uL3N0cmljdC9hc3luY1wiXG5pbXBvcnQgKiBhcyBoIGZyb20gXCIuL2hlbHBlcnNcIlxuXG5cbmZsb3cgPSBnZW5lcmljIFxuICBuYW1lOiBcInRhbG9zIGZsb3dcIlxuICBkZWZhdWx0OiAoIGFyZ3MuLi4gKSAtPiBcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJmbG93OiBpbnB1dCBpcyBtYWxmb3JtZWQgI3tKU09OLnN0cmluZ2lmeSBhcmdzfVwiXG5cbmdlbmVyaWMgZmxvdywgaC5pc0Z1bmN0aW9uQXJyYXksICggZnggKSAtPlxuICBfZmxvdyB7fSwgZnhcblxuZ2VuZXJpYyBmbG93LCBUeXBlLmlzT2JqZWN0LCBoLmlzRnVuY3Rpb25BcnJheSwgKCBvcHRpb25zLCBmeCApIC0+XG4gIF9mbG93IG9wdGlvbnMsIGZ4XG5cbl9mbG93ID0gKCBvcHRpb25zLCBmeCApIC0+XG4gIGlmIGZ4Lmxlbmd0aCA9PSAwXG4gICAgaWYgb3B0aW9ucy5kZWJ1ZyA9PSB0cnVlXG4gICAgICBjb25zb2xlLmxvZyBcIlsgZmxvdyBdIGVtcHR5IGZ1bmN0aW9uIGxpc3QsIG1hcHBpbmcgdG8gbm8tb3BcIlxuICAgIHJldHVybiAoIHggKSAtPiBhd2FpdCBQcm9taXNlLnJlc29sdmUoKSA7IHhcbiAgXG4gIGYgPSBmeFsgMCBdXG4gIGdyYXBoID0gR3JhcGgubWFrZSBoLmV4cGFuZCBmeFxuICB0YWxvcyA9IFRhbG9zLm1ha2UoKVxuICBzdGVwID0gaWYgb3B0aW9ucy5kZWJ1ZyA9PSB0cnVlIHRoZW4gZGVidWcgZWxzZSBBc3luYy5zdGVwXG4gIGRyaXZlID0gRHJpdmUubWFrZSBncmFwaCwgdGFsb3MsIHN0ZXBcblxuICBGbi5hcml0eSBmLmxlbmd0aCwgKCBhcmdzLi4uICkgLT5cbiAgICBhd2FpdCBkcml2ZS51cGRhdGUgYXJncy4uLlxuICAgIGxvb3BcbiAgICAgIGguY2hlY2sgdGFsb3NcbiAgICAgIHJldHVybiB0YWxvcy5jb250ZXh0IGlmIHRhbG9zLmhhbHRlZFxuICAgICAgYXdhaXQgZHJpdmUudXBkYXRlKClcblxuXG5maW5pc2hlZCA9IGguZmluaXNoZWQgXCJmbG93XCJcblxuZGVidWcgPSAoIGdyYXBoLCB0YWxvcywgdHJhbnNmb3Jtcy4uLiApIC0+XG4gIHZlcnRleCA9IEFzeW5jLm1hdGNoVmVydGV4IGdyYXBoLCB0YWxvc1xuICBuYW1lID0gaC5uYW1lVmVydGV4IHZlcnRleFxuICByZXR1cm4gdGFsb3MgaWYgZmluaXNoZWQgdGFsb3NcblxuICBlZGdlID0gYXdhaXQgQXN5bmMubWF0Y2hFZGdlIHZlcnRleCwgdGFsb3MsIHRyYW5zZm9ybXNcbiAgcmV0dXJuIHRhbG9zIGlmIGZpbmlzaGVkIHRhbG9zXG5cbiAgY29uc29sZS5sb2cgXCJbIGZsb3cgXSBzdGFydGluZyBzdGVwICN7IG5hbWUgfVwiLCB0YWxvcy5jb250ZXh0XG4gIGlmIHRyYW5zZm9ybXMubGVuZ3RoID4gMFxuICAgIGNvbnNvbGUubG9nIFwiYXJndW1lbnRzXCIsIHRyYW5zZm9ybXMuLi5cbiAgYXdhaXQgQXN5bmMucnVuIGVkZ2UsIHRhbG9zLCB0cmFuc2Zvcm1zXG4gIHJldHVybiB0YWxvcyBpZiBmaW5pc2hlZCB0YWxvc1xuICBjb25zb2xlLmxvZyBcIlsgZmxvdyBdIGZpbmlzaGVkIHN0ZXAgI3sgbmFtZSB9XCJcblxuICBhd2FpdCBBc3luYy5tb3ZlIGVkZ2UsIHRhbG9zLCB0cmFuc2Zvcm1zXG4gIHJldHVybiB0YWxvcyBpZiBmaW5pc2hlZCB0YWxvc1xuICB0YWxvc1xuXG5cblxuZXhwb3J0IHtcbiAgZmxvd1xufSJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=src/linear/flow.coffee