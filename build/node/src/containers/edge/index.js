"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Edge = void 0;
var Meta = _interopRequireWildcard(require("@dashkite/joy/metaclass"));
var Type = _interopRequireWildcard(require("@dashkite/joy/type"));
var _generic = require("@dashkite/joy/generic");
var Make = _interopRequireWildcard(require("./make.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Edge, make;
make = (0, _generic.generic)({
  name: "edge make",
  default: function (...args) {
    throw new Error(`Edge.make: input is malformed ${JSON.stringify(args)}`);
  }
});
(0, _generic.generic)(make, Type.isObject, function (edge) {
  return new Edge({
    accept: Make.accept(edge.accept),
    run: Make.run(edge.run),
    move: Make.move(edge.move)
  });
});
exports.Edge = Edge = function () {
  class Edge {
    constructor({
      accept,
      run,
      move
    }) {
      this.accept = accept;
      this.run = run;
      this.move = move;
    }
    clone() {
      return new Edge({
        accept: this.accept,
        run: this.run,
        move: this.move
      });
    }
  }
  ;
  Meta.mixin(Edge.prototype, [Meta.getters({})]);
  Edge.make = make;
  Edge.isType = Type.isType(Edge);
  return Edge;
}.call(void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb250YWluZXJzL2VkZ2UvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUEsSUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsSUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsUUFBQSxHQUFBLE9BQUE7QUFBQSxJQUFBLElBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUE7QUFBQSxTQUFBLHlCQUFBLENBQUEsNkJBQUEsT0FBQSxtQkFBQSxDQUFBLE9BQUEsT0FBQSxJQUFBLENBQUEsT0FBQSxPQUFBLFlBQUEsd0JBQUEsWUFBQSxDQUFBLENBQUEsV0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBO0FBQUEsU0FBQSx3QkFBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLFVBQUEsU0FBQSxDQUFBLGVBQUEsQ0FBQSx1QkFBQSxDQUFBLHlCQUFBLENBQUEsV0FBQSxPQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsR0FBQSx3QkFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLFNBQUEsVUFBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsSUFBQSxNQUFBLENBQUEsd0JBQUEsV0FBQSxDQUFBLElBQUEsQ0FBQSxvQkFBQSxDQUFBLElBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxVQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsR0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBLE9BQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsR0FBQSxDQUFBO0FBRkEsSUFBQSxJQUFBLEVBQUEsSUFBQTtBQU1BLElBQUEsR0FBTyxJQUFBLGdCQUFBLEVBQ0w7RUFBQSxJQUFBLEVBQU0sV0FBTjtFQUNBLE9BQUEsRUFBUyxTQUFBLENBQUEsR0FBRSxJQUFGLEVBQUE7SUFDUCxNQUFNLElBQUksS0FBSixDQUFVLGlDQUFpQyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWhELENBQUEsRUFBVixDQUFBO0VBREM7QUFEVCxDQURLLENBQUE7QUFLUCxJQUFBLGdCQUFBLEVBQVEsSUFBUixFQUFjLElBQUksQ0FBQyxRQUFuQixFQUE2QixVQUFFLElBQUYsRUFBQTtTQUMzQixJQUFJLElBQUosQ0FDRTtJQUFBLE1BQUEsRUFBUSxJQUFJLENBQUMsTUFBTCxDQUFZLElBQUksQ0FBQyxNQUFqQixDQUFSO0lBQ0EsR0FBQSxFQUFLLElBQUksQ0FBQyxHQUFMLENBQVMsSUFBSSxDQUFDLEdBQWQsQ0FETDtJQUVBLElBQUEsRUFBTSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUksQ0FBQyxJQUFmO0VBRk4sQ0FERixDQUFBO0FBRDJCLENBQTdCLENBQUE7QUFPTSxPQUFBLENBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxZQUFBO0VBQU4sTUFBQSxJQUFBLENBQUE7SUFDRSxXQUFhLENBQUM7TUFBQSxNQUFBO01BQUEsR0FBQTtNQUFBO0lBQUEsQ0FBRCxFQUFBO01BQUcsSUFBQyxDQUFBLE1BQUEsR0FBQSxNQUFBO01BQVEsSUFBQyxDQUFBLEdBQUEsR0FBQSxHQUFBO01BQUssSUFBQyxDQUFBLElBQUEsR0FBQSxJQUFBO0lBQW5CO0lBU2IsS0FBTyxDQUFBLEVBQUE7YUFDTCxJQUFJLElBQUosQ0FBUztRQUFHLE1BQUEsRUFBRCxJQUFDLENBQUEsTUFBSDtRQUFZLEdBQUEsRUFBRCxJQUFDLENBQUEsR0FBWjtRQUFrQixJQUFBLEVBQUQsSUFBQyxDQUFBO01BQWxCLENBQVQsQ0FBQTtJQURLO0VBVlQ7RUFBQTtFQUdFLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBQyxDQUFBLFNBQVosRUFBZ0IsQ0FDZCxJQUFJLENBQUMsT0FBTCxDQUFhLENBQUEsQ0FBYixDQURjLENBQWhCLENBQUE7RUFJQSxJQUFDLENBQUEsSUFBRCxHQUFPLElBQUE7RUFDUCxJQUFDLENBQUEsTUFBRCxHQUFTLElBQUksQ0FBQyxNQUFMLENBQVksSUFBWixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTWV0YSBmcm9tIFwiQGRhc2hraXRlL2pveS9tZXRhY2xhc3NcIlxuaW1wb3J0ICogYXMgVHlwZSBmcm9tIFwiQGRhc2hraXRlL2pveS90eXBlXCJcbmltcG9ydCB7IGdlbmVyaWMgfSBmcm9tIFwiQGRhc2hraXRlL2pveS9nZW5lcmljXCJcbmltcG9ydCAqIGFzIE1ha2UgZnJvbSBcIi4vbWFrZVwiXG5cblxubWFrZSA9IGdlbmVyaWMgXG4gIG5hbWU6IFwiZWRnZSBtYWtlXCJcbiAgZGVmYXVsdDogKCBhcmdzLi4uICkgLT4gXG4gICAgdGhyb3cgbmV3IEVycm9yIFwiRWRnZS5tYWtlOiBpbnB1dCBpcyBtYWxmb3JtZWQgI3tKU09OLnN0cmluZ2lmeSBhcmdzfVwiXG5cbmdlbmVyaWMgbWFrZSwgVHlwZS5pc09iamVjdCwgKCBlZGdlICkgLT5cbiAgbmV3IEVkZ2VcbiAgICBhY2NlcHQ6IE1ha2UuYWNjZXB0IGVkZ2UuYWNjZXB0XG4gICAgcnVuOiBNYWtlLnJ1biBlZGdlLnJ1blxuICAgIG1vdmU6IE1ha2UubW92ZSBlZGdlLm1vdmVcblxuXG5jbGFzcyBFZGdlXG4gIGNvbnN0cnVjdG9yOiAoeyBAYWNjZXB0LCBAcnVuLCBAbW92ZSB9KSAtPlxuXG4gIE1ldGEubWl4aW4gQDo6LCBbXG4gICAgTWV0YS5nZXR0ZXJzIHt9XG4gIF1cblxuICBAbWFrZTogbWFrZVxuICBAaXNUeXBlOiBUeXBlLmlzVHlwZSBAXG5cbiAgY2xvbmU6IC0+XG4gICAgbmV3IEVkZ2UgeyBAYWNjZXB0LCBAcnVuLCBAbW92ZSB9XG5cblxuZXhwb3J0IHtcbiAgRWRnZVxufSJdLCJzb3VyY2VSb290IjoiIn0=
//# sourceURL=src/containers/edge/index.coffee